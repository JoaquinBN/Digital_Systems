

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat May 20 02:00:45 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    91                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    92   000000                     
    93                           ; Generated 09/02/2023 GMT
    94                           ; 
    95                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution. Publication is not required when
   109                           ;        this file is used in an embedded application.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4321 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127   000000                     
   128                           	psect	idataCOMRAM
   129   00010C                     __pidataCOMRAM:
   130                           	callstack 0
   131                           
   132                           ;initializer for _MUSICPERIODS
   133   00010C  03                 	db	3
   134   00010D  02                 	db	2
   135   00010E  03                 	db	3
   136   00010F  01                 	db	1
   137   000110  04                 	db	4
   138   000111  03                 	db	3
   139   000112  02                 	db	2
   140   000113  05                 	db	5
   141                           
   142                           	psect	idataBANK0
   143   00187C                     __pidataBANK0:
   144                           	callstack 0
   145                           
   146                           ;initializer for _MUSICDELAY
   147   00187C  03E8               	dw	1000
   148   00187E  03E8               	dw	1000
   149   001880  03E8               	dw	1000
   150   001882  0960               	dw	2400
   151   001884  03E8               	dw	1000
   152   001886  03E8               	dw	1000
   153   001888  0258               	dw	600
   154   00188A  04B0               	dw	1200
   155                           
   156                           ;initializer for _CURRENTTIME
   157   00188C  43                 	db	67
   158   00188D  55                 	db	85
   159   00188E  52                 	db	82
   160   00188F  52                 	db	82
   161   001890  45                 	db	69
   162   001891  4E                 	db	78
   163   001892  54                 	db	84
   164   001893  20                 	db	32
   165   001894  54                 	db	84
   166   001895  49                 	db	73
   167   001896  4D                 	db	77
   168   001897  45                 	db	69
   169   001898  3A                 	db	58
   170   001899  00                 	db	0
   171                           
   172                           ;initializer for _STARTRECORDING
   173   00189A  52                 	db	82
   174   00189B  45                 	db	69
   175   00189C  43                 	db	67
   176   00189D  4F                 	db	79
   177   00189E  52                 	db	82
   178   00189F  44                 	db	68
   179   0018A0  49                 	db	73
   180   0018A1  4E                 	db	78
   181   0018A2  47                 	db	71
   182   0018A3  2E                 	db	46
   183   0018A4  2E                 	db	46
   184   0018A5  2E                 	db	46
   185   0018A6  00                 	db	0
   186   0018A7  00                 	db	0
   187                           
   188                           ;initializer for _MODIFYTIME
   189   0018A8  4D                 	db	77
   190   0018A9  4F                 	db	79
   191   0018AA  44                 	db	68
   192   0018AB  49                 	db	73
   193   0018AC  46                 	db	70
   194   0018AD  59                 	db	89
   195   0018AE  20                 	db	32
   196   0018AF  54                 	db	84
   197   0018B0  49                 	db	73
   198   0018B1  4D                 	db	77
   199   0018B2  45                 	db	69
   200   0018B3  3A                 	db	58
   201   0018B4  00                 	db	0
   202                           
   203                           ;initializer for _PLAYRECORDINGS
   204   0018B5  50                 	db	80
   205   0018B6  4C                 	db	76
   206   0018B7  41                 	db	65
   207   0018B8  59                 	db	89
   208   0018B9  49                 	db	73
   209   0018BA  4E                 	db	78
   210   0018BB  47                 	db	71
   211   0018BC  2E                 	db	46
   212   0018BD  2E                 	db	46
   213   0018BE  2E                 	db	46
   214   0018BF  00                 	db	0
   215   0018C0  00                 	db	0
   216                           
   217                           ;initializer for _PORTNAMEMENU
   218   0018C1  50                 	db	80
   219   0018C2  4F                 	db	79
   220   0018C3  52                 	db	82
   221   0018C4  54                 	db	84
   222   0018C5  20                 	db	32
   223   0018C6  4E                 	db	78
   224   0018C7  41                 	db	65
   225   0018C8  4D                 	db	77
   226   0018C9  45                 	db	69
   227   0018CA  3A                 	db	58
   228   0018CB  20                 	db	32
   229   0018CC  00                 	db	0
   230                           
   231                           ;initializer for _ENDCOMMUNICATION
   232   0018CD  62                 	db	98
   233   0018CE  79                 	db	121
   234   0018CF  65                 	db	101
   235   0018D0  20                 	db	32
   236   0018D1  62                 	db	98
   237   0018D2  79                 	db	121
   238   0018D3  65                 	db	101
   239   0018D4  20                 	db	32
   240   0018D5  00                 	db	0
   241   0018D6  00                 	db	0
   242   0018D7  00                 	db	0
   243                           
   244                           	psect	idataBANK1
   245   000042                     __pidataBANK1:
   246                           	callstack 0
   247                           
   248                           ;initializer for _ERRORMESSAGES
   249   000042  4E                 	db	78
   250   000043  4F                 	db	79
   251   000044  20                 	db	32
   252   000045  52                 	db	82
   253   000046  45                 	db	69
   254   000047  43                 	db	67
   255   000048  4F                 	db	79
   256   000049  52                 	db	82
   257   00004A  44                 	db	68
   258   00004B  53                 	db	83
   259   00004C  20                 	db	32
   260   00004D  46                 	db	70
   261   00004E  4F                 	db	79
   262   00004F  55                 	db	85
   263   000050  4E                 	db	78
   264   000051  44                 	db	68
   265   000052  00                 	db	0
   266   000053  00                 	db	0
   267   000054  00                 	db	0
   268   000055  00                 	db	0
   269                           
   270                           	psect	smallconst
   271   000200                     __psmallconst:
   272                           	callstack 0
   273   000200  00                 	db	0
   274   000201                     _TABLE:
   275                           	callstack 0
   276   000201  31                 	db	49
   277   000202  32                 	db	50
   278   000203  33                 	db	51
   279   000204  34                 	db	52
   280   000205  35                 	db	53
   281   000206  36                 	db	54
   282   000207  37                 	db	55
   283   000208  38                 	db	56
   284   000209  39                 	db	57
   285   00020A  2A                 	db	42
   286   00020B  30                 	db	48
   287   00020C  23                 	db	35
   288   00020D                     __end_of_TABLE:
   289                           	callstack 0
   290   00020D                     _MAINMENU:
   291                           	callstack 0
   292   00020D  31                 	db	49
   293   00020E  2E                 	db	46
   294   00020F  53                 	db	83
   295   000210  54                 	db	84
   296   000211  41                 	db	65
   297   000212  52                 	db	82
   298   000213  54                 	db	84
   299   000214  20                 	db	32
   300   000215  52                 	db	82
   301   000216  45                 	db	69
   302   000217  43                 	db	67
   303   000218  4F                 	db	79
   304   000219  52                 	db	82
   305   00021A  44                 	db	68
   306   00021B  49                 	db	73
   307   00021C  4E                 	db	78
   308   00021D  47                 	db	71
   309   00021E  20                 	db	32
   310   00021F  20                 	db	32
   311   000220  20                 	db	32
   312   000221  20                 	db	32
   313   000222  20                 	db	32
   314   000223  00                 	db	0
   315   000224  32                 	db	50
   316   000225  2E                 	db	46
   317   000226  50                 	db	80
   318   000227  4C                 	db	76
   319   000228  41                 	db	65
   320   000229  59                 	db	89
   321   00022A  20                 	db	32
   322   00022B  52                 	db	82
   323   00022C  45                 	db	69
   324   00022D  43                 	db	67
   325   00022E  4F                 	db	79
   326   00022F  52                 	db	82
   327   000230  44                 	db	68
   328   000231  49                 	db	73
   329   000232  4E                 	db	78
   330   000233  47                 	db	71
   331   000234  53                 	db	83
   332   000235  20                 	db	32
   333   000236  20                 	db	32
   334   000237  20                 	db	32
   335   000238  20                 	db	32
   336   000239  20                 	db	32
   337   00023A  00                 	db	0
   338   00023B  33                 	db	51
   339   00023C  2E                 	db	46
   340   00023D  4D                 	db	77
   341   00023E  4F                 	db	79
   342   00023F  44                 	db	68
   343   000240  49                 	db	73
   344   000241  46                 	db	70
   345   000242  59                 	db	89
   346   000243  20                 	db	32
   347   000244  43                 	db	67
   348   000245  55                 	db	85
   349   000246  52                 	db	82
   350   000247  52                 	db	82
   351   000248  45                 	db	69
   352   000249  4E                 	db	78
   353   00024A  54                 	db	84
   354   00024B  20                 	db	32
   355   00024C  54                 	db	84
   356   00024D  49                 	db	73
   357   00024E  4D                 	db	77
   358   00024F  45                 	db	69
   359   000250  20                 	db	32
   360   000251  00                 	db	0
   361   000252  34                 	db	52
   362   000253  2E                 	db	46
   363   000254  53                 	db	83
   364   000255  48                 	db	72
   365   000256  4F                 	db	79
   366   000257  57                 	db	87
   367   000258  20                 	db	32
   368   000259  43                 	db	67
   369   00025A  55                 	db	85
   370   00025B  52                 	db	82
   371   00025C  52                 	db	82
   372   00025D  45                 	db	69
   373   00025E  4E                 	db	78
   374   00025F  54                 	db	84
   375   000260  20                 	db	32
   376   000261  54                 	db	84
   377   000262  49                 	db	73
   378   000263  4D                 	db	77
   379   000264  45                 	db	69
   380   000265  20                 	db	32
   381   000266  20                 	db	32
   382   000267  20                 	db	32
   383   000268  00                 	db	0
   384   000269  35                 	db	53
   385   00026A  2E                 	db	46
   386   00026B  45                 	db	69
   387   00026C  4E                 	db	78
   388   00026D  44                 	db	68
   389   00026E  20                 	db	32
   390   00026F  43                 	db	67
   391   000270  4F                 	db	79
   392   000271  4D                 	db	77
   393   000272  4D                 	db	77
   394   000273  55                 	db	85
   395   000274  4E                 	db	78
   396   000275  49                 	db	73
   397   000276  43                 	db	67
   398   000277  41                 	db	65
   399   000278  54                 	db	84
   400   000279  49                 	db	73
   401   00027A  4F                 	db	79
   402   00027B  4E                 	db	78
   403   00027C  20                 	db	32
   404   00027D  20                 	db	32
   405   00027E  20                 	db	32
   406   00027F  00                 	db	0
   407   000280  20                 	db	32
   408   000281  20                 	db	32
   409   000282  20                 	db	32
   410   000283  20                 	db	32
   411   000284  20                 	db	32
   412   000285  20                 	db	32
   413   000286  20                 	db	32
   414   000287  20                 	db	32
   415   000288  20                 	db	32
   416   000289  20                 	db	32
   417   00028A  20                 	db	32
   418   00028B  20                 	db	32
   419   00028C  20                 	db	32
   420   00028D  20                 	db	32
   421   00028E  20                 	db	32
   422   00028F  20                 	db	32
   423   000290  20                 	db	32
   424   000291  20                 	db	32
   425   000292  20                 	db	32
   426   000293  20                 	db	32
   427   000294  20                 	db	32
   428   000295  20                 	db	32
   429   000296  00                 	db	0
   430   000297                     __end_of_MAINMENU:
   431                           	callstack 0
   432   000297                     _SMSTABLE:
   433                           	callstack 0
   434   000297  31                 	db	49
   435   000298  00                 	db	0
   436   000299  00                 	db	0
   437   00029A  00                 	db	0
   438   00029B  00                 	db	0
   439   00029C  00                 	db	0
   440   00029D  41                 	db	65
   441   00029E  42                 	db	66
   442   00029F  43                 	db	67
   443   0002A0  32                 	db	50
   444   0002A1  00                 	db	0
   445   0002A2  00                 	db	0
   446   0002A3  44                 	db	68
   447   0002A4  45                 	db	69
   448   0002A5  46                 	db	70
   449   0002A6  33                 	db	51
   450   0002A7  00                 	db	0
   451   0002A8  00                 	db	0
   452   0002A9  47                 	db	71
   453   0002AA  48                 	db	72
   454   0002AB  49                 	db	73
   455   0002AC  34                 	db	52
   456   0002AD  00                 	db	0
   457   0002AE  00                 	db	0
   458   0002AF  4A                 	db	74
   459   0002B0  4B                 	db	75
   460   0002B1  4C                 	db	76
   461   0002B2  35                 	db	53
   462   0002B3  00                 	db	0
   463   0002B4  00                 	db	0
   464   0002B5  4D                 	db	77
   465   0002B6  4E                 	db	78
   466   0002B7  4F                 	db	79
   467   0002B8  36                 	db	54
   468   0002B9  00                 	db	0
   469   0002BA  00                 	db	0
   470   0002BB  50                 	db	80
   471   0002BC  51                 	db	81
   472   0002BD  52                 	db	82
   473   0002BE  53                 	db	83
   474   0002BF  37                 	db	55
   475   0002C0  00                 	db	0
   476   0002C1  54                 	db	84
   477   0002C2  55                 	db	85
   478   0002C3  56                 	db	86
   479   0002C4  38                 	db	56
   480   0002C5  00                 	db	0
   481   0002C6  00                 	db	0
   482   0002C7  57                 	db	87
   483   0002C8  58                 	db	88
   484   0002C9  59                 	db	89
   485   0002CA  5A                 	db	90
   486   0002CB  39                 	db	57
   487   0002CC  00                 	db	0
   488   0002CD                     __end_of_SMSTABLE:
   489                           	callstack 0
   490   000000                     _TMR0	set	4054
   491   000000                     _EECON2	set	4007
   492   000000                     _EEDATA	set	4008
   493   000000                     _EEADR	set	4009
   494   000000                     _RCREG	set	4014
   495   000000                     _TXREG	set	4013
   496   000000                     _TRISBbits	set	3987
   497   000000                     _TRISCbits	set	3988
   498   000000                     _TRISDbits	set	3989
   499   000000                     _T0CON	set	4053
   500   000000                     _ADCON2	set	4032
   501   000000                     _ADCON1	set	4033
   502   000000                     _ADCON0	set	4034
   503   000000                     _ADCON0bits	set	4034
   504   000000                     _INTCONbits	set	4082
   505   000000                     _PORTBbits	set	3969
   506   000000                     _PORTDbits	set	3971
   507   000000                     _LATDbits	set	3980
   508   000000                     _TRISAbits	set	3986
   509   000000                     _INTCON2bits	set	4081
   510   000000                     _TMR0IF	set	32658
   511   000000                     _ADRESH	set	4036
   512   000000                     _PIR1bits	set	3998
   513   000000                     _RCSTAbits	set	4011
   514   000000                     _TXSTAbits	set	4012
   515   000000                     _SPBRG	set	4015
   516   000000                     _SPBRGH	set	4016
   517   000000                     _LATBbits	set	3978
   518   000000                     _LATCbits	set	3979
   519   000000                     _BAUDCONbits	set	4024
   520   000000                     _EECON1bits	set	4006
   521   0002CD  00                 	db	0	; dummy byte at the end
   522   000000                     
   523                           ; #config settings
   524                           
   525                           	psect	cinit
   526   0014B4                     __pcinit:
   527                           	callstack 0
   528   0014B4                     start_initialization:
   529                           	callstack 0
   530   0014B4                     __initialization:
   531                           	callstack 0
   532                           
   533                           ; Initialize objects allocated to BANK1 (20 bytes)
   534                           ; load TBLPTR registers with __pidataBANK1
   535   0014B4  0E42               	movlw	low __pidataBANK1
   536   0014B6  6EF6               	movwf	tblptrl,c
   537   0014B8  0E00               	movlw	high __pidataBANK1
   538   0014BA  6EF7               	movwf	tblptrh,c
   539   0014BC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   540   0014BE  6EF8               	movwf	tblptru,c
   541   0014C0  EE01  F04B         	lfsr	0,__pdataBANK1
   542   0014C4  EE10 F014          	lfsr	1,20
   543   0014C8                     copy_data0:
   544   0014C8  0009               	tblrd		*+
   545   0014CA  CFF5 FFEE          	movff	tablat,postinc0
   546   0014CE  50E5               	movf	postdec1,w,c
   547   0014D0  50E1               	movf	fsr1l,w,c
   548   0014D2  E1FA               	bnz	copy_data0
   549                           
   550                           ; Initialize objects allocated to BANK0 (92 bytes)
   551                           ; load TBLPTR registers with __pidataBANK0
   552   0014D4  0E7C               	movlw	low __pidataBANK0
   553   0014D6  6EF6               	movwf	tblptrl,c
   554   0014D8  0E18               	movlw	high __pidataBANK0
   555   0014DA  6EF7               	movwf	tblptrh,c
   556   0014DC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   557   0014DE  6EF8               	movwf	tblptru,c
   558   0014E0  EE00  F080         	lfsr	0,__pdataBANK0
   559   0014E4  EE10 F05C          	lfsr	1,92
   560   0014E8                     copy_data1:
   561   0014E8  0009               	tblrd		*+
   562   0014EA  CFF5 FFEE          	movff	tablat,postinc0
   563   0014EE  50E5               	movf	postdec1,w,c
   564   0014F0  50E1               	movf	fsr1l,w,c
   565   0014F2  E1FA               	bnz	copy_data1
   566                           
   567                           ; Initialize objects allocated to COMRAM (8 bytes)
   568                           ; load TBLPTR registers with __pidataCOMRAM
   569   0014F4  0E0C               	movlw	low __pidataCOMRAM
   570   0014F6  6EF6               	movwf	tblptrl,c
   571   0014F8  0E01               	movlw	high __pidataCOMRAM
   572   0014FA  6EF7               	movwf	tblptrh,c
   573   0014FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   574   0014FE  6EF8               	movwf	tblptru,c
   575   001500  EE00  F06D         	lfsr	0,__pdataCOMRAM
   576   001504  EE10 F008          	lfsr	1,8
   577   001508                     copy_data2:
   578   001508  0009               	tblrd		*+
   579   00150A  CFF5 FFEE          	movff	tablat,postinc0
   580   00150E  50E5               	movf	postdec1,w,c
   581   001510  50E1               	movf	fsr1l,w,c
   582   001512  E1FA               	bnz	copy_data2
   583                           
   584                           ; Clear objects allocated to BANK1 (75 bytes)
   585   001514  EE01  F000         	lfsr	0,__pbssBANK1
   586   001518  0E4B               	movlw	75
   587   00151A                     clear_0:
   588   00151A  6AEE               	clrf	postinc0,c
   589   00151C  06E8               	decf	wreg,f,c
   590   00151E  E1FD               	bnz	clear_0
   591                           
   592                           ; Clear objects allocated to BANK0 (24 bytes)
   593   001520  EE00  F0DC         	lfsr	0,__pbssBANK0
   594   001524  0E18               	movlw	24
   595   001526                     clear_1:
   596   001526  6AEE               	clrf	postinc0,c
   597   001528  06E8               	decf	wreg,f,c
   598   00152A  E1FD               	bnz	clear_1
   599                           
   600                           ; Clear objects allocated to COMRAM (74 bytes)
   601   00152C  EE00  F001         	lfsr	0,__pbssCOMRAM
   602   001530  0E4A               	movlw	74
   603   001532                     clear_2:
   604   001532  6AEE               	clrf	postinc0,c
   605   001534  06E8               	decf	wreg,f,c
   606   001536  E1FD               	bnz	clear_2
   607   001538                     end_of_initialization:
   608                           	callstack 0
   609   001538                     __end_of__initialization:
   610                           	callstack 0
   611   001538  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   612   00153A  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   613   00153C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   614   00153E  6EF8               	movwf	tblptru,c
   615   001540  0100               	movlb	0
   616   001542  EF94  F00C         	goto	_main	;jump to C main() function
   617                           
   618                           	psect	bssCOMRAM
   619   000001                     __pbssCOMRAM:
   620                           	callstack 0
   621   000001                     _timestamp:
   622                           	callstack 0
   623   000001                     	ds	18
   624   000013                     _portName:
   625                           	callstack 0
   626   000013                     	ds	4
   627   000017                     _Tics:
   628                           	callstack 0
   629   000017                     	ds	4
   630   00001B                     _row:
   631                           	callstack 0
   632   00001B                     	ds	2
   633   00001D                     _scrollIndex:
   634                           	callstack 0
   635   00001D                     	ds	2
   636   00001F                     _scroll:
   637                           	callstack 0
   638   00001F                     	ds	2
   639   000021                     _timeValue:
   640                           	callstack 0
   641   000021                     	ds	2
   642   000023                     	ds	2
   643   000025                     _data:
   644                           	callstack 0
   645   000025                     	ds	1
   646   000026                     _indexEEPROM:
   647                           	callstack 0
   648   000026                     	ds	1
   649   000027                     _indexTemp:
   650                           	callstack 0
   651   000027                     	ds	1
   652   000028                     _state@EEPROM$F1455:
   653                           	callstack 0
   654   000028                     	ds	1
   655   000029                     _stateSMS:
   656                           	callstack 0
   657   000029                     	ds	1
   658   00002A                     _state@Keypad$F1073:
   659                           	callstack 0
   660   00002A                     	ds	1
   661   00002B                     _available:
   662                           	callstack 0
   663   00002B                     	ds	1
   664   00002C                     _numPresses:
   665                           	callstack 0
   666   00002C                     	ds	1
   667   00002D                     _pressed:
   668                           	callstack 0
   669   00002D                     	ds	1
   670   00002E                     _previous:
   671                           	callstack 0
   672   00002E                     	ds	1
   673   00002F                     _currentKey:
   674                           	callstack 0
   675   00002F                     	ds	1
   676   000030                     _index@SystemTimer$F848:
   677                           	callstack 0
   678   000030                     	ds	1
   679   000031                     _state@SystemTimer$F847:
   680                           	callstack 0
   681   000031                     	ds	1
   682   000032                     _period:
   683                           	callstack 0
   684   000032                     	ds	1
   685   000033                     _state@Audio$F811:
   686                           	callstack 0
   687   000033                     	ds	1
   688   000034                     _tmpPortChar:
   689                           	callstack 0
   690   000034                     	ds	1
   691   000035                     _state@Menu$F707:
   692                           	callstack 0
   693   000035                     	ds	1
   694   000036                     _skipState:
   695                           	callstack 0
   696   000036                     	ds	1
   697   000037                     _index:
   698                           	callstack 0
   699   000037                     	ds	1
   700   000038                     _displayPos:
   701                           	callstack 0
   702   000038                     	ds	1
   703   000039                     _colIndex:
   704                           	callstack 0
   705   000039                     	ds	1
   706   00003A                     _rowIndex:
   707                           	callstack 0
   708   00003A                     	ds	1
   709   00003B                     _ColumnAct:
   710                           	callstack 0
   711   00003B                     	ds	1
   712   00003C                     _RowAct:
   713                           	callstack 0
   714   00003C                     	ds	1
   715   00003D                     _Columns:
   716                           	callstack 0
   717   00003D                     	ds	1
   718   00003E                     _Rows:
   719                           	callstack 0
   720   00003E                     	ds	1
   721   00003F                     _y:
   722                           	callstack 0
   723   00003F                     	ds	1
   724   000040                     _x:
   725                           	callstack 0
   726   000040                     	ds	1
   727   000041                     _hasMoved:
   728                           	callstack 0
   729   000041                     	ds	1
   730   000042                     _direction:
   731                           	callstack 0
   732   000042                     	ds	1
   733   000043                     _state:
   734                           	callstack 0
   735   000043                     	ds	1
   736   000044                     _timer_SMS:
   737                           	callstack 0
   738   000044                     	ds	1
   739   000045                     _timerBounces:
   740                           	callstack 0
   741   000045                     	ds	1
   742   000046                     _sysTmr:
   743                           	callstack 0
   744   000046                     	ds	1
   745   000047                     _songTime:
   746                           	callstack 0
   747   000047                     	ds	1
   748   000048                     _pTime:
   749                           	callstack 0
   750   000048                     	ds	1
   751   000049                     _songTimer:
   752                           	callstack 0
   753   000049                     	ds	1
   754   00004A                     _timer:
   755                           	callstack 0
   756   00004A                     	ds	1
   757                           
   758                           	psect	dataCOMRAM
   759   00006D                     __pdataCOMRAM:
   760                           	callstack 0
   761   00006D                     _MUSICPERIODS:
   762                           	callstack 0
   763   00006D                     	ds	8
   764                           
   765                           	psect	bssBANK0
   766   0000DC                     __pbssBANK0:
   767                           	callstack 0
   768   0000DC                     _recordings:
   769                           	callstack 0
   770   0000DC                     	ds	24
   771                           
   772                           	psect	dataBANK0
   773   000080                     __pdataBANK0:
   774                           	callstack 0
   775   000080                     _MUSICDELAY:
   776                           	callstack 0
   777   000080                     	ds	16
   778   000090                     _CURRENTTIME:
   779                           	callstack 0
   780   000090                     	ds	14
   781   00009E                     _STARTRECORDING:
   782                           	callstack 0
   783   00009E                     	ds	14
   784   0000AC                     _MODIFYTIME:
   785                           	callstack 0
   786   0000AC                     	ds	13
   787   0000B9                     _PLAYRECORDINGS:
   788                           	callstack 0
   789   0000B9                     	ds	12
   790   0000C5                     _PORTNAMEMENU:
   791                           	callstack 0
   792   0000C5                     	ds	12
   793   0000D1                     _ENDCOMMUNICATION:
   794                           	callstack 0
   795   0000D1                     	ds	11
   796                           
   797                           	psect	bssBANK1
   798   000100                     __pbssBANK1:
   799                           	callstack 0
   800   000100                     _Timers:
   801                           	callstack 0
   802   000100                     	ds	75
   803                           
   804                           	psect	dataBANK1
   805   00014B                     __pdataBANK1:
   806                           	callstack 0
   807   00014B                     _ERRORMESSAGES:
   808                           	callstack 0
   809   00014B                     	ds	20
   810                           
   811                           	psect	cstackCOMRAM
   812   00004B                     __pcstackCOMRAM:
   813                           	callstack 0
   814   00004B                     ??_joystickLoop:
   815   00004B                     ??_EscriuPrimeraOrdre:
   816   00004B                     ??_CantaPartAlta:
   817   00004B                     ??_CantaPartBaixa:
   818   00004B                     ?_getSysTimestamp:
   819                           	callstack 0
   820   00004B                     ?_getColumn:
   821                           	callstack 0
   822   00004B                     ?___awmod:
   823                           	callstack 0
   824   00004B                     ?_TI_GetTics:
   825                           	callstack 0
   826   00004B                     _getJoystickDown$241:
   827                           	callstack 0
   828   00004B                     _getJoystickUp$243:
   829                           	callstack 0
   830   00004B                     TI_Init@counter:
   831                           	callstack 0
   832   00004B                     TI_ResetTics@TimerHandle:
   833                           	callstack 0
   834   00004B                     _isPressed$1105:
   835                           	callstack 0
   836   00004B                     setTX@letter:
   837                           	callstack 0
   838   00004B                     saveData@data:
   839                           	callstack 0
   840   00004B                     readData@address:
   841                           	callstack 0
   842   00004B                     displayRecordings@indexPosition:
   843                           	callstack 0
   844   00004B                     sendIndex@indexPosition:
   845                           	callstack 0
   846   00004B                     ___lbdiv@divisor:
   847                           	callstack 0
   848   00004B                     ___lbmod@divisor:
   849                           	callstack 0
   850   00004B                     TI_NewTimer@TimerHandle:
   851                           	callstack 0
   852   00004B                     _getNumRecordings$1492:
   853                           	callstack 0
   854   00004B                     ___awmod@dividend:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x0
   858   00004B                     	ds	1
   859   00004C                     CantaPartAlta@c:
   860                           	callstack 0
   861   00004C                     CantaPartBaixa@c:
   862                           	callstack 0
   863   00004C                     EscriuPrimeraOrdre@ordre:
   864                           	callstack 0
   865   00004C                     playMusic@aux:
   866                           	callstack 0
   867   00004C                     saveData@address:
   868                           	callstack 0
   869   00004C                     ___lbdiv@dividend:
   870                           	callstack 0
   871   00004C                     ___lbmod@dividend:
   872                           	callstack 0
   873   00004C                     updateSysTimestamp@time:
   874                           	callstack 0
   875                           
   876                           ; 2 bytes @ 0x1
   877   00004C                     	ds	1
   878   00004D                     ??_KeGetGenericValue:
   879   00004D                     _joystickLoop$239:
   880                           	callstack 0
   881   00004D                     CantaIR@IR:
   882                           	callstack 0
   883   00004D                     CantaData@Data:
   884                           	callstack 0
   885   00004D                     ___lbdiv@counter:
   886                           	callstack 0
   887   00004D                     ___lbmod@counter:
   888                           	callstack 0
   889   00004D                     _getNumRecordings$1493:
   890                           	callstack 0
   891   00004D                     ___awmod@divisor:
   892                           	callstack 0
   893                           
   894                           ; 2 bytes @ 0x2
   895   00004D                     	ds	1
   896   00004E                     ??_KeGetCharValue:
   897   00004E                     TI_NewTimer@Counter:
   898                           	callstack 0
   899   00004E                     updateSysTimestamp@i:
   900                           	callstack 0
   901   00004E                     ___lbdiv@quotient:
   902                           	callstack 0
   903   00004E                     ___lbmod@rem:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x3
   907   00004E                     	ds	1
   908   00004F                     ??_TI_GetTics:
   909   00004F                     ___awmod@counter:
   910                           	callstack 0
   911                           
   912                           ; 1 bytes @ 0x4
   913   00004F                     	ds	1
   914   000050                     KeGetCharValue@generic:
   915                           	callstack 0
   916   000050                     ___awmod@sign:
   917                           	callstack 0
   918                           
   919                           ; 1 bytes @ 0x5
   920   000050                     	ds	3
   921   000053                     TI_GetTics@CopyCurrentTics:
   922                           	callstack 0
   923                           
   924                           ; 4 bytes @ 0x8
   925   000053                     	ds	4
   926   000057                     TI_GetTics@TimerHandle:
   927                           	callstack 0
   928                           
   929                           ; 1 bytes @ 0xC
   930   000057                     	ds	1
   931   000058                     ??_audioLoop:
   932   000058                     ??_keypadLoop:
   933   000058                     ??_smsLoop:
   934   000058                     WaitForBusy@Busy:
   935                           	callstack 0
   936   000058                     Espera@Timer:
   937                           	callstack 0
   938                           
   939                           ; 2 bytes @ 0xD
   940   000058                     	ds	1
   941   000059                     LcGotoXY@Row:
   942                           	callstack 0
   943                           
   944                           ; 1 bytes @ 0xE
   945   000059                     	ds	1
   946   00005A                     ??_LcGotoXY:
   947   00005A                     Espera@ms:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0xF
   951   00005A                     	ds	2
   952   00005C                     ??_Espera:
   953   00005C                     _LcGotoXY$528:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x11
   957   00005C                     	ds	2
   958   00005E                     LcGotoXY@Fisics:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x13
   962   00005E                     	ds	2
   963   000060                     LcInit@columns:
   964                           	callstack 0
   965   000060                     LcGotoXY@Column:
   966                           	callstack 0
   967                           
   968                           ; 1 bytes @ 0x15
   969   000060                     	ds	1
   970   000061                     LcInit@rows:
   971                           	callstack 0
   972   000061                     LcPutChar@c:
   973                           	callstack 0
   974                           
   975                           ; 1 bytes @ 0x16
   976   000061                     	ds	1
   977   000062                     ??_sysTimerLoop:
   978   000062                     ??_memoryLoop:
   979   000062                     displayMenu@string:
   980                           	callstack 0
   981   000062                     LcInit@i:
   982                           	callstack 0
   983   000062                     lcdAddString@string:
   984                           	callstack 0
   985                           
   986                           ; 2 bytes @ 0x17
   987   000062                     	ds	1
   988   000063                     ??_displayMenu:
   989                           
   990                           ; 1 bytes @ 0x18
   991   000063                     	ds	1
   992   000064                     _memoryLoop$1475:
   993                           	callstack 0
   994                           
   995                           ; 2 bytes @ 0x19
   996   000064                     	ds	1
   997   000065                     ??_menuLoop:
   998                           
   999                           ; 1 bytes @ 0x1A
  1000   000065                     	ds	1
  1001   000066                     _memoryLoop$1476:
  1002                           	callstack 0
  1003                           
  1004                           ; 2 bytes @ 0x1B
  1005   000066                     	ds	2
  1006   000068                     _memoryLoop$1478:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x1D
  1010   000068                     	ds	3
  1011   00006B                     _menuLoop$716:
  1012                           	callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x20
  1015   00006B                     	ds	2
  1016   00006D                     
  1017                           ; 1 bytes @ 0x22
  1018 ;;
  1019 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1020 ;;
  1021 ;; *************** function _main *****************
  1022 ;; Defined at:
  1023 ;;		line 28 in file "MAIN.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1
  1037 ;;      Params:         0       0       0
  1038 ;;      Locals:         0       0       0
  1039 ;;      Temps:          0       0       0
  1040 ;;      Totals:         0       0       0
  1041 ;;Total ram usage:        0 bytes
  1042 ;; Hardware stack levels required when called: 8
  1043 ;; This function calls:
  1044 ;;		_LcInit
  1045 ;;		_TI_Init
  1046 ;;		_audioLoop
  1047 ;;		_initAudio
  1048 ;;		_initJoystick
  1049 ;;		_initKeypad
  1050 ;;		_initMemory
  1051 ;;		_initMenu
  1052 ;;		_initSIO
  1053 ;;		_initSysTimer
  1054 ;;		_joystickLoop
  1055 ;;		_keypadLoop
  1056 ;;		_memoryLoop
  1057 ;;		_menuLoop
  1058 ;;		_smsLoop
  1059 ;;		_sysTimerLoop
  1060 ;; This function is called by:
  1061 ;;		Startup code after reset
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text0
  1066   001928                     __ptext0:
  1067                           	callstack 0
  1068   001928                     _main:
  1069                           	callstack 23
  1070                           
  1071                           ;incstack = 0
  1072   001928  EC83  F00D         	call	_TI_Init	;wreg free
  1073   00192C  EC5B  F00E         	call	_initJoystick	;wreg free
  1074   001930  EC04  F00E         	call	_initKeypad	;wreg free
  1075   001934  0E10               	movlw	16
  1076   001936  6E60               	movwf	LcInit@columns^0,c
  1077   001938  0E02               	movlw	2
  1078   00193A  EC75  F008         	call	_LcInit
  1079   00193E  ECC5  F00E         	call	_initAudio	;wreg free
  1080   001942  EC16  F000         	call	_initMenu	;wreg free
  1081   001946  ECB9  F00E         	call	_initSysTimer	;wreg free
  1082   00194A  EC5C  F000         	call	_initMemory	;wreg free
  1083   00194E  EC7A  F00E         	call	_initSIO	;wreg free
  1084   001952                     l5198:
  1085   001952  EC07  F00A         	call	_audioLoop	;wreg free
  1086   001956  EC59  F009         	call	_joystickLoop	;wreg free
  1087   00195A  EC49  F007         	call	_keypadLoop	;wreg free
  1088   00195E  ECA3  F00A         	call	_smsLoop	;wreg free
  1089   001962  ECF1  F007         	call	_sysTimerLoop	;wreg free
  1090   001966  EC6B  F005         	call	_memoryLoop	;wreg free
  1091   00196A  EC67  F001         	call	_menuLoop	;wreg free
  1092   00196E  D7F1               	goto	l5198
  1093   001970                     __end_of_main:
  1094                           	callstack 0
  1095                           
  1096 ;; *************** function _sysTimerLoop *****************
  1097 ;; Defined at:
  1098 ;;		line 19 in file "SystemTimer.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1
  1112 ;;      Params:         0       0       0
  1113 ;;      Locals:         0       0       0
  1114 ;;      Temps:          2       0       0
  1115 ;;      Totals:         2       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used: 1
  1118 ;; Hardware stack levels required when called: 6
  1119 ;; This function calls:
  1120 ;;		_LcPutChar
  1121 ;;		_TI_GetTics
  1122 ;;		_TI_ResetTics
  1123 ;;		___lbdiv
  1124 ;;		___lbmod
  1125 ;;		_incrementSysTimestamp
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text1
  1132   000FE2                     __ptext1:
  1133                           	callstack 0
  1134   000FE2                     _sysTimerLoop:
  1135                           	callstack 24
  1136                           
  1137                           ;SystemTimer.c: 20:     switch(state){
  1138                           
  1139                           ;incstack = 0
  1140   000FE2  D062               	goto	l4032
  1141   000FE4                     l4000:
  1142                           
  1143                           ;SystemTimer.c: 22:             if(TI_GetTics(sysTmr) >= 2000){
  1144   000FE4  5046               	movf	_sysTmr^0,w,c
  1145   000FE6  EC6C  F00C         	call	_TI_GetTics
  1146   000FEA  504E               	movf	(?_TI_GetTics+3)^0,w,c
  1147   000FEC  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  1148   000FEE  E106               	bnz	u3380
  1149   000FF0  0ED0               	movlw	208
  1150   000FF2  5C4B               	subwf	?_TI_GetTics^0,w,c
  1151   000FF4  0E07               	movlw	7
  1152   000FF6  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  1153   000FF8  A0D8               	btfss	status,0,c
  1154   000FFA  0012               	return	
  1155   000FFC                     u3380:
  1156                           
  1157                           ;SystemTimer.c: 23:                 TI_ResetTics(sysTmr);
  1158   000FFC  5046               	movf	_sysTmr^0,w,c
  1159   000FFE  ECDD  F00D         	call	_TI_ResetTics
  1160                           
  1161                           ;SystemTimer.c: 24:                 incrementSysTimestamp();
  1162   001002  EC2B  F000         	call	_incrementSysTimestamp	;wreg free
  1163   001006  0012               	return	
  1164   001008                     l4006:
  1165                           
  1166                           ;SystemTimer.c: 28:             state = 9;
  1167   001008  0E09               	movlw	9
  1168   00100A  6E31               	movwf	_state@SystemTimer$F847^0,c
  1169                           
  1170                           ;SystemTimer.c: 29:             break;
  1171   00100C  0012               	return	
  1172   00100E                     l4008:
  1173                           
  1174                           ;SystemTimer.c: 31:             state = 10;
  1175   00100E  0E0A               	movlw	10
  1176   001010  6E31               	movwf	_state@SystemTimer$F847^0,c
  1177                           
  1178                           ;SystemTimer.c: 32:             break;
  1179   001012  0012               	return	
  1180   001014                     l4010:
  1181                           
  1182                           ;SystemTimer.c: 34:             LcPutChar((timestamp[index].minutes/10) + '0');
  1183   001014  0E0A               	movlw	10
  1184   001016  6E4B               	movwf	___lbdiv@divisor^0,c
  1185   001018  5030               	movf	_index@SystemTimer$F848^0,w,c
  1186   00101A  0D02               	mullw	2
  1187   00101C  50F3               	movf	243,w,c
  1188   00101E  0F01               	addlw	low _timestamp
  1189   001020  6ED9               	movwf	fsr2l,c
  1190   001022  6ADA               	clrf	fsr2h,c
  1191   001024  50DF               	movf	indf2,w,c
  1192   001026  ECFE  F00C         	call	___lbdiv
  1193   00102A  0F30               	addlw	48
  1194   00102C  ECEA  F00A         	call	_LcPutChar
  1195                           
  1196                           ;SystemTimer.c: 35:             state = 11;
  1197   001030  0E0B               	movlw	11
  1198   001032  6E31               	movwf	_state@SystemTimer$F847^0,c
  1199                           
  1200                           ;SystemTimer.c: 36:             break;
  1201   001034  0012               	return	
  1202   001036                     l4014:
  1203                           
  1204                           ;SystemTimer.c: 39:             LcPutChar((timestamp[index].minutes%10) + '0');
  1205   001036  0E0A               	movlw	10
  1206   001038  6E4B               	movwf	___lbmod@divisor^0,c
  1207   00103A  5030               	movf	_index@SystemTimer$F848^0,w,c
  1208   00103C  0D02               	mullw	2
  1209   00103E  50F3               	movf	243,w,c
  1210   001040  0F01               	addlw	low _timestamp
  1211   001042  6ED9               	movwf	fsr2l,c
  1212   001044  6ADA               	clrf	fsr2h,c
  1213   001046  50DF               	movf	indf2,w,c
  1214   001048  ECC8  F00D         	call	___lbmod
  1215   00104C  0F30               	addlw	48
  1216   00104E  ECEA  F00A         	call	_LcPutChar
  1217                           
  1218                           ;SystemTimer.c: 40:             state = 12;
  1219   001052  0E0C               	movlw	12
  1220   001054  6E31               	movwf	_state@SystemTimer$F847^0,c
  1221                           
  1222                           ;SystemTimer.c: 41:             break;
  1223   001056  0012               	return	
  1224   001058                     l4018:
  1225                           
  1226                           ;SystemTimer.c: 43:             LcPutChar(':');
  1227   001058  0E3A               	movlw	58
  1228   00105A  ECEA  F00A         	call	_LcPutChar
  1229                           
  1230                           ;SystemTimer.c: 44:             state = 13;
  1231   00105E  0E0D               	movlw	13
  1232   001060  6E31               	movwf	_state@SystemTimer$F847^0,c
  1233                           
  1234                           ;SystemTimer.c: 45:             break;
  1235   001062  0012               	return	
  1236   001064                     l4022:
  1237                           
  1238                           ;SystemTimer.c: 47:             LcPutChar((timestamp[index].seconds/10) + '0');
  1239   001064  0E0A               	movlw	10
  1240   001066  6E4B               	movwf	___lbdiv@divisor^0,c
  1241   001068  5030               	movf	_index@SystemTimer$F848^0,w,c
  1242   00106A  0D02               	mullw	2
  1243   00106C  50F3               	movf	243,w,c
  1244   00106E  0F02               	addlw	low (_timestamp+1)
  1245   001070  6ED9               	movwf	fsr2l,c
  1246   001072  6ADA               	clrf	fsr2h,c
  1247   001074  50DF               	movf	indf2,w,c
  1248   001076  ECFE  F00C         	call	___lbdiv
  1249   00107A  0F30               	addlw	48
  1250   00107C  ECEA  F00A         	call	_LcPutChar
  1251                           
  1252                           ;SystemTimer.c: 48:             state = 14;
  1253   001080  0E0E               	movlw	14
  1254   001082  6E31               	movwf	_state@SystemTimer$F847^0,c
  1255                           
  1256                           ;SystemTimer.c: 49:             break;
  1257   001084  0012               	return	
  1258   001086                     l4026:
  1259                           
  1260                           ;SystemTimer.c: 51:             LcPutChar((timestamp[index].seconds%10) + '0');
  1261   001086  0E0A               	movlw	10
  1262   001088  6E4B               	movwf	___lbmod@divisor^0,c
  1263   00108A  5030               	movf	_index@SystemTimer$F848^0,w,c
  1264   00108C  0D02               	mullw	2
  1265   00108E  50F3               	movf	243,w,c
  1266   001090  0F02               	addlw	low (_timestamp+1)
  1267   001092  6ED9               	movwf	fsr2l,c
  1268   001094  6ADA               	clrf	fsr2h,c
  1269   001096  50DF               	movf	indf2,w,c
  1270   001098  ECC8  F00D         	call	___lbmod
  1271   00109C  0F30               	addlw	48
  1272   00109E  ECEA  F00A         	call	_LcPutChar
  1273                           
  1274                           ;SystemTimer.c: 52:             state = 0;
  1275   0010A2  0E00               	movlw	0
  1276   0010A4  6E31               	movwf	_state@SystemTimer$F847^0,c
  1277                           
  1278                           ;SystemTimer.c: 53:             break;
  1279   0010A6  0012               	return	
  1280   0010A8                     l4032:
  1281   0010A8  5031               	movf	_state@SystemTimer$F847^0,w,c
  1282   0010AA  6E62               	movwf	??_sysTimerLoop^0,c
  1283   0010AC  6A63               	clrf	(??_sysTimerLoop+1)^0,c
  1284                           
  1285                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1286                           ; Switch size 1, requested type "simple"
  1287                           ; Number of cases is 1, Range of values is 0 to 0
  1288                           ; switch strategies available:
  1289                           ; Name         Instructions Cycles
  1290                           ; simple_byte            4     3 (average)
  1291                           ;	Chosen strategy is simple_byte
  1292   0010AE  5063               	movf	(??_sysTimerLoop+1)^0,w,c
  1293   0010B0  0A00               	xorlw	0	; case 0
  1294   0010B2  A4D8               	btfss	status,2,c
  1295   0010B4  0012               	return	
  1296                           
  1297                           ; Switch size 1, requested type "simple"
  1298                           ; Number of cases is 8, Range of values is 0 to 14
  1299                           ; switch strategies available:
  1300                           ; Name         Instructions Cycles
  1301                           ; simple_byte           25    13 (average)
  1302                           ;	Chosen strategy is simple_byte
  1303   0010B6  5062               	movf	??_sysTimerLoop^0,w,c
  1304   0010B8  0A00               	xorlw	0	; case 0
  1305   0010BA  B4D8               	btfsc	status,2,c
  1306   0010BC  D793               	goto	l4000
  1307   0010BE  0A08               	xorlw	8	; case 8
  1308   0010C0  B4D8               	btfsc	status,2,c
  1309   0010C2  D7A2               	goto	l4006
  1310   0010C4  0A01               	xorlw	1	; case 9
  1311   0010C6  B4D8               	btfsc	status,2,c
  1312   0010C8  D7A2               	goto	l4008
  1313   0010CA  0A03               	xorlw	3	; case 10
  1314   0010CC  B4D8               	btfsc	status,2,c
  1315   0010CE  D7A2               	goto	l4010
  1316   0010D0  0A01               	xorlw	1	; case 11
  1317   0010D2  B4D8               	btfsc	status,2,c
  1318   0010D4  D7B0               	goto	l4014
  1319   0010D6  0A07               	xorlw	7	; case 12
  1320   0010D8  B4D8               	btfsc	status,2,c
  1321   0010DA  D7BE               	goto	l4018
  1322   0010DC  0A01               	xorlw	1	; case 13
  1323   0010DE  B4D8               	btfsc	status,2,c
  1324   0010E0  D7C1               	goto	l4022
  1325   0010E2  0A03               	xorlw	3	; case 14
  1326   0010E4  A4D8               	btfss	status,2,c
  1327   0010E6  0012               	return	
  1328   0010E8  D7CE               	goto	l4026
  1329   0010EA                     __end_of_sysTimerLoop:
  1330                           	callstack 0
  1331                           
  1332 ;; *************** function _incrementSysTimestamp *****************
  1333 ;; Defined at:
  1334 ;;		line 66 in file "SystemTimer.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;		None
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2, status,0
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1
  1348 ;;      Params:         0       0       0
  1349 ;;      Locals:         0       0       0
  1350 ;;      Temps:          0       0       0
  1351 ;;      Totals:         0       0       0
  1352 ;;Total ram usage:        0 bytes
  1353 ;; Hardware stack levels used: 1
  1354 ;; Hardware stack levels required when called: 2
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_sysTimerLoop
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text2
  1363   000056                     __ptext2:
  1364                           	callstack 0
  1365   000056                     _incrementSysTimestamp:
  1366                           	callstack 27
  1367                           
  1368                           ;SystemTimer.c: 67:     if(timestamp[0].seconds == 59){
  1369                           
  1370                           ;incstack = 0
  1371   000056  0E3B               	movlw	59
  1372   000058  1802               	xorwf	(_timestamp+1)^0,w,c
  1373   00005A  A4D8               	btfss	status,2,c
  1374   00005C  D004               	goto	l2014
  1375                           
  1376                           ;SystemTimer.c: 68:         timestamp[0].seconds = 0;
  1377   00005E  0E00               	movlw	0
  1378   000060  6E02               	movwf	(_timestamp+1)^0,c
  1379                           
  1380                           ;SystemTimer.c: 69:         timestamp[0].minutes++;
  1381   000062  2A01               	incf	_timestamp^0,f,c
  1382                           
  1383                           ;SystemTimer.c: 70:     }else{
  1384   000064  0012               	return	
  1385   000066                     l2014:
  1386                           
  1387                           ;SystemTimer.c: 71:         timestamp[0].seconds++;
  1388   000066  2A02               	incf	(_timestamp+1)^0,f,c
  1389   000068  0012               	return		;funcret
  1390   00006A                     __end_of_incrementSysTimestamp:
  1391                           	callstack 0
  1392                           
  1393 ;; *************** function _smsLoop *****************
  1394 ;; Defined at:
  1395 ;;		line 127 in file "Keypad.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1
  1409 ;;      Params:         0       0       0
  1410 ;;      Locals:         0       0       0
  1411 ;;      Temps:          2       0       0
  1412 ;;      Totals:         2       0       0
  1413 ;;Total ram usage:        2 bytes
  1414 ;; Hardware stack levels used: 1
  1415 ;; Hardware stack levels required when called: 4
  1416 ;; This function calls:
  1417 ;;		_KeGetGenericValue
  1418 ;;		_TI_GetTics
  1419 ;;		_TI_ResetTics
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text3
  1426   001546                     __ptext3:
  1427                           	callstack 0
  1428   001546                     _smsLoop:
  1429                           	callstack 26
  1430                           
  1431                           ;Keypad.c: 128:     switch(stateSMS){
  1432                           
  1433                           ;incstack = 0
  1434   001546  D034               	goto	l3992
  1435   001548                     l3962:
  1436                           
  1437                           ;Keypad.c: 133:             if(pressed){
  1438   001548  502D               	movf	_pressed^0,w,c
  1439   00154A  B4D8               	btfsc	status,2,c
  1440   00154C  D021               	goto	l715
  1441                           
  1442                           ;Keypad.c: 134:                 stateSMS=1;
  1443   00154E  0E01               	movlw	1
  1444   001550  6E29               	movwf	_stateSMS^0,c
  1445                           
  1446                           ;Keypad.c: 135:                 currentKey = KeGetGenericValue();
  1447   001552  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  1448   001556  6E2F               	movwf	_currentKey^0,c
  1449                           
  1450                           ;Keypad.c: 136:                 available = 1;
  1451   001558  0E01               	movlw	1
  1452   00155A  6E2B               	movwf	_available^0,c
  1453                           
  1454                           ;Keypad.c: 137:                 if(numPresses != 0 && (previous != currentKey || TI_GetT
      +                          ics(timer_SMS) >= 2000)){
  1455   00155C  502C               	movf	_numPresses^0,w,c
  1456   00155E  B4D8               	btfsc	status,2,c
  1457   001560  0012               	return	
  1458   001562  502F               	movf	_currentKey^0,w,c
  1459   001564  182E               	xorwf	_previous^0,w,c
  1460   001566  A4D8               	btfss	status,2,c
  1461   001568  D00C               	goto	u3360
  1462   00156A  5044               	movf	_timer_SMS^0,w,c
  1463   00156C  EC6C  F00C         	call	_TI_GetTics
  1464   001570  504E               	movf	(?_TI_GetTics+3)^0,w,c
  1465   001572  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  1466   001574  E106               	bnz	u3360
  1467   001576  0ED0               	movlw	208
  1468   001578  5C4B               	subwf	?_TI_GetTics^0,w,c
  1469   00157A  0E07               	movlw	7
  1470   00157C  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  1471   00157E  A0D8               	btfss	status,0,c
  1472   001580  0012               	return	
  1473   001582                     u3360:
  1474                           
  1475                           ;Keypad.c: 138:                     available = 0;
  1476   001582  0E00               	movlw	0
  1477   001584  6E2B               	movwf	_available^0,c
  1478                           
  1479                           ;Keypad.c: 139:                     previous = currentKey;
  1480   001586  C02F  F02E         	movff	_currentKey,_previous
  1481                           
  1482                           ;Keypad.c: 140:                     numPresses = 0;
  1483   00158A  0E00               	movlw	0
  1484   00158C  6E2C               	movwf	_numPresses^0,c
  1485   00158E  0012               	return	
  1486   001590                     l715:
  1487                           
  1488                           ;Keypad.c: 144:               previous=currentKey;
  1489   001590  C02F  F02E         	movff	_currentKey,_previous
  1490   001594  0012               	return	
  1491   001596                     l3980:
  1492                           
  1493                           ;Keypad.c: 149:             numPresses++;
  1494   001596  2A2C               	incf	_numPresses^0,f,c
  1495                           
  1496                           ;Keypad.c: 150:             stateSMS = 2;
  1497   001598  0E02               	movlw	2
  1498   00159A  6E29               	movwf	_stateSMS^0,c
  1499                           
  1500                           ;Keypad.c: 151:             break;
  1501   00159C  0012               	return	
  1502   00159E                     l3984:
  1503                           
  1504                           ;Keypad.c: 154:             if (!pressed){
  1505   00159E  502D               	movf	_pressed^0,w,c
  1506   0015A0  A4D8               	btfss	status,2,c
  1507   0015A2  0012               	return	
  1508                           
  1509                           ;Keypad.c: 155:                 TI_ResetTics(timer_SMS);
  1510   0015A4  5044               	movf	_timer_SMS^0,w,c
  1511   0015A6  ECDD  F00D         	call	_TI_ResetTics
  1512                           
  1513                           ;Keypad.c: 157:                 stateSMS = 0;
  1514   0015AA  0E00               	movlw	0
  1515   0015AC  6E29               	movwf	_stateSMS^0,c
  1516   0015AE  0012               	return	
  1517   0015B0                     l3992:
  1518   0015B0  5029               	movf	_stateSMS^0,w,c
  1519   0015B2  6E58               	movwf	??_smsLoop^0,c
  1520   0015B4  6A59               	clrf	(??_smsLoop+1)^0,c
  1521                           
  1522                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1523                           ; Switch size 1, requested type "simple"
  1524                           ; Number of cases is 1, Range of values is 0 to 0
  1525                           ; switch strategies available:
  1526                           ; Name         Instructions Cycles
  1527                           ; simple_byte            4     3 (average)
  1528                           ;	Chosen strategy is simple_byte
  1529   0015B6  5059               	movf	(??_smsLoop+1)^0,w,c
  1530   0015B8  0A00               	xorlw	0	; case 0
  1531   0015BA  A4D8               	btfss	status,2,c
  1532   0015BC  0012               	return	
  1533                           
  1534                           ; Switch size 1, requested type "simple"
  1535                           ; Number of cases is 3, Range of values is 0 to 2
  1536                           ; switch strategies available:
  1537                           ; Name         Instructions Cycles
  1538                           ; simple_byte           10     6 (average)
  1539                           ;	Chosen strategy is simple_byte
  1540   0015BE  5058               	movf	??_smsLoop^0,w,c
  1541   0015C0  0A00               	xorlw	0	; case 0
  1542   0015C2  B4D8               	btfsc	status,2,c
  1543   0015C4  D7C1               	goto	l3962
  1544   0015C6  0A01               	xorlw	1	; case 1
  1545   0015C8  B4D8               	btfsc	status,2,c
  1546   0015CA  D7E5               	goto	l3980
  1547   0015CC  0A03               	xorlw	3	; case 2
  1548   0015CE  A4D8               	btfss	status,2,c
  1549   0015D0  0012               	return	
  1550   0015D2  D7E5               	goto	l3984
  1551   0015D4                     __end_of_smsLoop:
  1552                           	callstack 0
  1553                           
  1554 ;; *************** function _menuLoop *****************
  1555 ;; Defined at:
  1556 ;;		line 43 in file "Menu.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1
  1570 ;;      Params:         0       0       0
  1571 ;;      Locals:         2       0       0
  1572 ;;      Temps:          6       0       0
  1573 ;;      Totals:         8       0       0
  1574 ;;Total ram usage:        8 bytes
  1575 ;; Hardware stack levels used: 1
  1576 ;; Hardware stack levels required when called: 7
  1577 ;; This function calls:
  1578 ;;		_KeGetCharValue
  1579 ;;		_KeGetGenericValue
  1580 ;;		_LcCursorOff
  1581 ;;		_LcCursorOn
  1582 ;;		_LcGotoXY
  1583 ;;		_LcPutChar
  1584 ;;		_TI_GetTics
  1585 ;;		_TI_ResetTics
  1586 ;;		___awmod
  1587 ;;		_checkRX
  1588 ;;		_checkTX
  1589 ;;		_displayMenu
  1590 ;;		_displayRecordings
  1591 ;;		_displayTimestamp
  1592 ;;		_getAvailable
  1593 ;;		_getColumnAct
  1594 ;;		_getJoystickDown
  1595 ;;		_getJoystickUp
  1596 ;;		_getNumRecordings
  1597 ;;		_getRX
  1598 ;;		_isIdle
  1599 ;;		_isPressed
  1600 ;;		_lcdAddString
  1601 ;;		_playMusic
  1602 ;;		_refreshDisplay
  1603 ;;		_resetDisplay
  1604 ;;		_saveIndex
  1605 ;;		_sendIndex
  1606 ;;		_sendTimestamp
  1607 ;;		_setTX
  1608 ;;		_stopMusic
  1609 ;;		_updateSysTimestamp
  1610 ;; This function is called by:
  1611 ;;		_main
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text4
  1616   0002CE                     __ptext4:
  1617                           	callstack 0
  1618   0002CE                     _menuLoop:
  1619                           	callstack 23
  1620                           
  1621                           ;Menu.c: 44:     switch (state){
  1622                           
  1623                           ;incstack = 0
  1624   0002CE  D373               	goto	l5178
  1625   0002D0                     l4728:
  1626                           
  1627                           ;Menu.c: 46:             resetDisplay();
  1628   0002D0  EC0B  F000         	call	_resetDisplay	;wreg free
  1629                           
  1630                           ;Menu.c: 47:             LcCursorOn();
  1631   0002D4  EC75  F000         	call	_LcCursorOn	;wreg free
  1632                           
  1633                           ;Menu.c: 48:             skipState = 0;
  1634   0002D8  0E00               	movlw	0
  1635   0002DA  6E36               	movwf	_skipState^0,c
  1636                           
  1637                           ;Menu.c: 49:             index = 0;
  1638   0002DC  0E00               	movlw	0
  1639   0002DE  6E37               	movwf	_index^0,c
  1640                           
  1641                           ;Menu.c: 50:             timeValue.minutes = 0;
  1642   0002E0  0E00               	movlw	0
  1643   0002E2  6E21               	movwf	_timeValue^0,c
  1644                           
  1645                           ;Menu.c: 51:             timeValue.seconds = 0;
  1646   0002E4  0E00               	movlw	0
  1647   0002E6  6E22               	movwf	(_timeValue+1)^0,c
  1648                           
  1649                           ;Menu.c: 52:             state = 1;
  1650   0002E8  0E01               	movlw	1
  1651   0002EA  6E35               	movwf	_state@Menu$F707^0,c
  1652                           
  1653                           ;Menu.c: 53:             displayPos = 0;
  1654   0002EC  0E00               	movlw	0
  1655   0002EE  6E38               	movwf	_displayPos^0,c
  1656                           
  1657                           ;Menu.c: 54:             tmpPortChar = 0;
  1658   0002F0  0E00               	movlw	0
  1659   0002F2  6E34               	movwf	_tmpPortChar^0,c
  1660                           
  1661                           ;Menu.c: 55:             break;
  1662   0002F4  0012               	return	
  1663   0002F6                     l4744:
  1664                           
  1665                           ;Menu.c: 57:             lcdAddString(&PORTNAMEMENU);
  1666   0002F6  0EC5               	movlw	low _PORTNAMEMENU
  1667   0002F8  6E62               	movwf	lcdAddString@string^0,c
  1668   0002FA  6A63               	clrf	(lcdAddString@string+1)^0,c
  1669   0002FC  EC9B  F00D         	call	_lcdAddString	;wreg free
  1670                           
  1671                           ;Menu.c: 58:             if(rowIndex ==1 ){
  1672   000300  043A               	decf	_rowIndex^0,w,c
  1673   000302  A4D8               	btfss	status,2,c
  1674   000304  0012               	return	
  1675                           
  1676                           ;Menu.c: 59:                 state = 2;
  1677   000306  0E02               	movlw	2
  1678   000308  6E35               	movwf	_state@Menu$F707^0,c
  1679                           
  1680                           ;Menu.c: 61:             break;
  1681                           
  1682                           ;Menu.c: 60:             }
  1683   00030A  0012               	return	
  1684   00030C                     l4750:
  1685                           
  1686                           ;Menu.c: 63:             if (colIndex >= 3 ){
  1687   00030C  0E02               	movlw	2
  1688   00030E  6439               	cpfsgt	_colIndex^0,c
  1689   000310  D003               	goto	l4754
  1690   000312                     u4380:
  1691                           
  1692                           ;Menu.c: 64:                 state = 0;
  1693   000312  0E00               	movlw	0
  1694   000314  6E35               	movwf	_state@Menu$F707^0,c
  1695                           
  1696                           ;Menu.c: 65:             }else if (isPressed()){
  1697   000316  0012               	return	
  1698   000318                     l4754:
  1699   000318  EC95  F00E         	call	_isPressed	;wreg free
  1700   00031C  0900               	iorlw	0
  1701   00031E  B4D8               	btfsc	status,2,c
  1702   000320  0012               	return	
  1703                           
  1704                           ;Menu.c: 66:                 if(KeGetGenericValue() == '*'){
  1705   000322  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  1706   000326  0A2A               	xorlw	42
  1707   000328  B4D8               	btfsc	status,2,c
  1708   00032A  D7F3               	goto	u4380
  1709   00032C  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  1710   000330  0A23               	xorlw	35
  1711   000332  A4D8               	btfss	status,2,c
  1712   000334  D009               	goto	l4766
  1713   000336  0E02               	movlw	2
  1714   000338  1839               	xorwf	_colIndex^0,w,c
  1715   00033A  A4D8               	btfss	status,2,c
  1716   00033C  D005               	goto	l4766
  1717                           
  1718                           ;Menu.c: 69:                     tmpPortChar = 1;
  1719   00033E  0E01               	movlw	1
  1720   000340  6E34               	movwf	_tmpPortChar^0,c
  1721                           
  1722                           ;Menu.c: 70:                     state = 8;
  1723   000342  0E08               	movlw	8
  1724   000344  6E35               	movwf	_state@Menu$F707^0,c
  1725                           
  1726                           ;Menu.c: 71:                 }else if (KeGetGenericValue() != '#'){
  1727   000346  0012               	return	
  1728   000348                     l4766:
  1729   000348  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  1730   00034C  0A23               	xorlw	35
  1731   00034E  B4D8               	btfsc	status,2,c
  1732   000350  0012               	return	
  1733                           
  1734                           ;Menu.c: 72:                     if (getAvailable() || skipState == 0){
  1735   000352  EC99  F000         	call	_getAvailable	;wreg free
  1736   000356  0900               	iorlw	0
  1737   000358  A4D8               	btfss	status,2,c
  1738   00035A  D003               	goto	u4450
  1739   00035C  5036               	movf	_skipState^0,w,c
  1740   00035E  A4D8               	btfss	status,2,c
  1741   000360  D006               	goto	l4776
  1742   000362                     u4450:
  1743                           
  1744                           ;Menu.c: 73:                         LcGotoXY(colIndex,rowIndex);
  1745   000362  C03A  F059         	movff	_rowIndex,LcGotoXY@Row
  1746   000366  5039               	movf	_colIndex^0,w,c
  1747   000368  ECB2  F009         	call	_LcGotoXY
  1748                           
  1749                           ;Menu.c: 74:                         colIndex--;
  1750   00036C  0639               	decf	_colIndex^0,f,c
  1751   00036E                     l4776:
  1752                           
  1753                           ;Menu.c: 76:                     tmpPortChar = KeGetCharValue();
  1754   00036E  ECF6  F008         	call	_KeGetCharValue	;wreg free
  1755   000372  6E34               	movwf	_tmpPortChar^0,c
  1756                           
  1757                           ;Menu.c: 77:                     state = 3;
  1758   000374  0E03               	movlw	3
  1759   000376  6E35               	movwf	_state@Menu$F707^0,c
  1760   000378  0012               	return	
  1761   00037A                     l4780:
  1762                           
  1763                           ;Menu.c: 83:             portName[getColumnAct()] = tmpPortChar;
  1764   00037A  EC97  F000         	call	_getColumnAct	;wreg free
  1765   00037E  6E65               	movwf	??_menuLoop^0,c
  1766   000380  5065               	movf	??_menuLoop^0,w,c
  1767   000382  0F13               	addlw	low _portName
  1768   000384  6ED9               	movwf	fsr2l,c
  1769   000386  6ADA               	clrf	fsr2h,c
  1770   000388  C034  FFDF         	movff	_tmpPortChar,indf2
  1771                           
  1772                           ;Menu.c: 84:             LcPutChar(tmpPortChar);
  1773   00038C  5034               	movf	_tmpPortChar^0,w,c
  1774   00038E  ECEA  F00A         	call	_LcPutChar
  1775                           
  1776                           ;Menu.c: 85:             colIndex++;
  1777   000392  2A39               	incf	_colIndex^0,f,c
  1778                           
  1779                           ;Menu.c: 86:             skipState++;
  1780   000394  2A36               	incf	_skipState^0,f,c
  1781                           
  1782                           ;Menu.c: 87:             state = 4;
  1783   000396  0E04               	movlw	4
  1784   000398  6E35               	movwf	_state@Menu$F707^0,c
  1785                           
  1786                           ;Menu.c: 88:             break;
  1787   00039A  0012               	return	
  1788   00039C                     l4790:
  1789                           
  1790                           ;Menu.c: 91:             if(!isPressed()){
  1791   00039C  EC95  F00E         	call	_isPressed	;wreg free
  1792   0003A0  0900               	iorlw	0
  1793   0003A2  D7AF               	goto	L7
  1794   0003A4                     l4794:
  1795                           
  1796                           ;Menu.c: 97:             displayMenu(&MAINMENU[displayPos]);
  1797   0003A4  5038               	movf	_displayPos^0,w,c
  1798   0003A6  0D17               	mullw	23
  1799   0003A8  50F3               	movf	243,w,c
  1800   0003AA  0F0D               	addlw	low _MAINMENU
  1801   0003AC  6E62               	movwf	displayMenu@string^0,c
  1802   0003AE  EC66  F00B         	call	_displayMenu	;wreg free
  1803                           
  1804                           ;Menu.c: 99:             if(rowIndex ==1 && !skipState){
  1805   0003B2  043A               	decf	_rowIndex^0,w,c
  1806   0003B4  A4D8               	btfss	status,2,c
  1807   0003B6  D007               	goto	l4804
  1808   0003B8  5036               	movf	_skipState^0,w,c
  1809   0003BA  A4D8               	btfss	status,2,c
  1810   0003BC  D004               	goto	l4804
  1811                           
  1812                           ;Menu.c: 100:                 displayPos++;
  1813   0003BE  2A38               	incf	_displayPos^0,f,c
  1814                           
  1815                           ;Menu.c: 101:                 skipState = 1;
  1816   0003C0  0E01               	movlw	1
  1817   0003C2  6E36               	movwf	_skipState^0,c
  1818                           
  1819                           ;Menu.c: 102:             }else if(rowIndex == 2){
  1820   0003C4  0012               	return	
  1821   0003C6                     l4804:
  1822   0003C6  0E02               	movlw	2
  1823   0003C8  183A               	xorwf	_rowIndex^0,w,c
  1824   0003CA  A4D8               	btfss	status,2,c
  1825   0003CC  0012               	return	
  1826                           
  1827                           ;Menu.c: 103:                 displayPos--;
  1828   0003CE  0638               	decf	_displayPos^0,f,c
  1829                           
  1830                           ;Menu.c: 104:                 tmpPortChar = 1;
  1831   0003D0  0E01               	movlw	1
  1832   0003D2  6E34               	movwf	_tmpPortChar^0,c
  1833                           
  1834                           ;Menu.c: 105:                 skipState = 4;
  1835   0003D4  0E04               	movlw	4
  1836   0003D6  6E36               	movwf	_skipState^0,c
  1837   0003D8                     l4812:
  1838                           
  1839                           ;Menu.c: 106:                 state = 90;
  1840   0003D8  0E5A               	movlw	90
  1841   0003DA  6E35               	movwf	_state@Menu$F707^0,c
  1842   0003DC  0012               	return	
  1843   0003DE                     l4814:
  1844                           
  1845                           ;Menu.c: 111:             if(displayPos == 0){
  1846   0003DE  5038               	movf	_displayPos^0,w,c
  1847   0003E0  A4D8               	btfss	status,2,c
  1848   0003E2  D003               	goto	l4818
  1849                           
  1850                           ;Menu.c: 113:                 state = 40;
  1851   0003E4  0E28               	movlw	40
  1852   0003E6  6E35               	movwf	_state@Menu$F707^0,c
  1853                           
  1854                           ;Menu.c: 114:             }else if(displayPos == 1){
  1855   0003E8  0012               	return	
  1856   0003EA                     l4818:
  1857   0003EA  0438               	decf	_displayPos^0,w,c
  1858   0003EC  A4D8               	btfss	status,2,c
  1859   0003EE  D003               	goto	l4822
  1860                           
  1861                           ;Menu.c: 116:                 state = 60;
  1862   0003F0  0E3C               	movlw	60
  1863   0003F2  6E35               	movwf	_state@Menu$F707^0,c
  1864                           
  1865                           ;Menu.c: 117:             }else if(displayPos == 2){
  1866   0003F4  0012               	return	
  1867   0003F6                     l4822:
  1868   0003F6  0E02               	movlw	2
  1869   0003F8  1838               	xorwf	_displayPos^0,w,c
  1870   0003FA  A4D8               	btfss	status,2,c
  1871   0003FC  D003               	goto	l4826
  1872                           
  1873                           ;Menu.c: 119:                 state = 20;
  1874   0003FE  0E14               	movlw	20
  1875   000400  6E35               	movwf	_state@Menu$F707^0,c
  1876                           
  1877                           ;Menu.c: 120:             }else if(displayPos == 3){
  1878   000402  0012               	return	
  1879   000404                     l4826:
  1880   000404  0E03               	movlw	3
  1881   000406  1838               	xorwf	_displayPos^0,w,c
  1882   000408  A4D8               	btfss	status,2,c
  1883   00040A  D003               	goto	l4830
  1884   00040C                     u4530:
  1885                           
  1886                           ;Menu.c: 122:                 state = 30;
  1887   00040C  0E1E               	movlw	30
  1888   00040E  6E35               	movwf	_state@Menu$F707^0,c
  1889                           
  1890                           ;Menu.c: 123:             }else if (displayPos == 4){
  1891   000410  0012               	return	
  1892   000412                     l4830:
  1893   000412  0E04               	movlw	4
  1894   000414  1838               	xorwf	_displayPos^0,w,c
  1895   000416  A4D8               	btfss	status,2,c
  1896   000418  0012               	return	
  1897                           
  1898                           ;Menu.c: 125:                 state = 100;
  1899   00041A  0E64               	movlw	100
  1900   00041C  6E35               	movwf	_state@Menu$F707^0,c
  1901   00041E  0012               	return	
  1902   000420                     l4834:
  1903                           
  1904                           ;Menu.c: 131:             LcCursorOff();
  1905   000420  EC7B  F000         	call	_LcCursorOff	;wreg free
  1906                           
  1907                           ;Menu.c: 132:             updateSysTimestamp(timeValue,0);
  1908   000424  C021  F04C         	movff	_timeValue,updateSysTimestamp@time
  1909   000428  C022  F04D         	movff	_timeValue+1,updateSysTimestamp@time+1
  1910   00042C  0E00               	movlw	0
  1911   00042E  6E4E               	movwf	updateSysTimestamp@i^0,c
  1912   000430  ECB2  F00D         	call	_updateSysTimestamp	;wreg free
  1913                           
  1914                           ;Menu.c: 133:             state = 9;
  1915   000434  0E09               	movlw	9
  1916   000436  6E35               	movwf	_state@Menu$F707^0,c
  1917                           
  1918                           ;Menu.c: 134:             break;
  1919   000438  0012               	return	
  1920   00043A                     l4838:
  1921                           
  1922                           ;Menu.c: 138:             if(checkTX()){
  1923   00043A  EC69  F000         	call	_checkTX	;wreg free
  1924   00043E  0900               	iorlw	0
  1925   000440  B4D8               	btfsc	status,2,c
  1926   000442  0012               	return	
  1927                           
  1928                           ;Menu.c: 139:                 setTX('T');
  1929   000444  0E54               	movlw	84
  1930   000446  EC8A  F000         	call	_setTX
  1931                           
  1932                           ;Menu.c: 140:                 state = 10;
  1933   00044A  0E0A               	movlw	10
  1934   00044C  6E35               	movwf	_state@Menu$F707^0,c
  1935   00044E  0012               	return	
  1936   000450                     l4844:
  1937                           
  1938                           ;Menu.c: 144:             if(checkRX() && getRX() == 'K'){
  1939   000450  EC6F  F000         	call	_checkRX	;wreg free
  1940   000454  0900               	iorlw	0
  1941   000456  B4D8               	btfsc	status,2,c
  1942   000458  0012               	return	
  1943   00045A  EC9B  F000         	call	_getRX	;wreg free
  1944   00045E  0A4B               	xorlw	75
  1945   000460  A4D8               	btfss	status,2,c
  1946   000462  0012               	return	
  1947                           
  1948                           ;Menu.c: 145:                 state = 11;
  1949   000464  0E0B               	movlw	11
  1950   000466  6E35               	movwf	_state@Menu$F707^0,c
  1951                           
  1952                           ;Menu.c: 146:                 index = 0;
  1953   000468  0E00               	movlw	0
  1954   00046A  6E37               	movwf	_index^0,c
  1955                           
  1956                           ;Menu.c: 147:                 TI_ResetTics(timer);
  1957   00046C  504A               	movf	_timer^0,w,c
  1958   00046E  ECDD  F00D         	call	_TI_ResetTics
  1959   000472  0012               	return	
  1960   000474                     l4852:
  1961                           
  1962                           ;Menu.c: 151:             if(index == 4){
  1963   000474  0E04               	movlw	4
  1964   000476  1837               	xorwf	_index^0,w,c
  1965   000478  A4D8               	btfss	status,2,c
  1966   00047A  D003               	goto	l4856
  1967   00047C                     u4580:
  1968                           
  1969                           ;Menu.c: 152:                 refreshDisplay();
  1970   00047C  EC17  F00E         	call	_refreshDisplay	;wreg free
  1971                           
  1972                           ;Menu.c: 153:             }else if(checkTX() && TI_GetTics(timer) >= 100){
  1973   000480  0012               	return	
  1974   000482                     l4856:
  1975   000482  EC69  F000         	call	_checkTX	;wreg free
  1976   000486  0900               	iorlw	0
  1977   000488  B4D8               	btfsc	status,2,c
  1978   00048A  0012               	return	
  1979   00048C  504A               	movf	_timer^0,w,c
  1980   00048E  EC6C  F00C         	call	_TI_GetTics
  1981   000492  504E               	movf	(?_TI_GetTics+3)^0,w,c
  1982   000494  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  1983   000496  104C               	iorwf	(?_TI_GetTics+1)^0,w,c
  1984   000498  E104               	bnz	u4600
  1985   00049A  0E64               	movlw	100
  1986   00049C  5C4B               	subwf	?_TI_GetTics^0,w,c
  1987   00049E  A0D8               	btfss	status,0,c
  1988   0004A0  0012               	return	
  1989   0004A2                     u4600:
  1990                           
  1991                           ;Menu.c: 154:                 setTX(portName[index]);
  1992   0004A2  5037               	movf	_index^0,w,c
  1993   0004A4  0F13               	addlw	low _portName
  1994   0004A6  6ED9               	movwf	fsr2l,c
  1995   0004A8  6ADA               	clrf	fsr2h,c
  1996   0004AA  50DF               	movf	indf2,w,c
  1997   0004AC  EC8A  F000         	call	_setTX
  1998                           
  1999                           ;Menu.c: 155:                 TI_ResetTics(timer);
  2000   0004B0  504A               	movf	_timer^0,w,c
  2001   0004B2  ECDD  F00D         	call	_TI_ResetTics
  2002                           
  2003                           ;Menu.c: 156:                 index++;
  2004   0004B6  2A37               	incf	_index^0,f,c
  2005   0004B8  0012               	return	
  2006   0004BA                     l4866:
  2007                           
  2008                           ;Menu.c: 161:             lcdAddString(&MODIFYTIME);
  2009   0004BA  0EAC               	movlw	low _MODIFYTIME
  2010   0004BC  6E62               	movwf	lcdAddString@string^0,c
  2011   0004BE  6A63               	clrf	(lcdAddString@string+1)^0,c
  2012   0004C0  EC9B  F00D         	call	_lcdAddString	;wreg free
  2013                           
  2014                           ;Menu.c: 162:             if(rowIndex == 1){
  2015   0004C4  043A               	decf	_rowIndex^0,w,c
  2016   0004C6  A4D8               	btfss	status,2,c
  2017   0004C8  0012               	return	
  2018                           
  2019                           ;Menu.c: 163:                 LcCursorOn();
  2020   0004CA  EC75  F000         	call	_LcCursorOn	;wreg free
  2021                           
  2022                           ;Menu.c: 164:                 index = 4;
  2023   0004CE  0E04               	movlw	4
  2024   0004D0  6E37               	movwf	_index^0,c
  2025   0004D2                     l4874:
  2026                           
  2027                           ;Menu.c: 165:                 state = 21;
  2028   0004D2  0E15               	movlw	21
  2029   0004D4  6E35               	movwf	_state@Menu$F707^0,c
  2030   0004D6  0012               	return	
  2031   0004D8                     l4876:
  2032                           
  2033                           ;Menu.c: 170:             if (isPressed()){
  2034   0004D8  EC95  F00E         	call	_isPressed	;wreg free
  2035   0004DC  0900               	iorlw	0
  2036   0004DE  B4D8               	btfsc	status,2,c
  2037   0004E0  0012               	return	
  2038                           
  2039                           ;Menu.c: 171:                 if(KeGetGenericValue() == '*'){
  2040   0004E2  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2041   0004E6  0A2A               	xorlw	42
  2042   0004E8  B4D8               	btfsc	status,2,c
  2043   0004EA  D7C8               	goto	u4580
  2044   0004EC  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2045   0004F0  0A23               	xorlw	35
  2046   0004F2  B4D8               	btfsc	status,2,c
  2047   0004F4  0012               	return	
  2048                           
  2049                           ;Menu.c: 174:                     LcPutChar(KeGetGenericValue());
  2050   0004F6  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2051   0004FA  ECEA  F00A         	call	_LcPutChar
  2052                           
  2053                           ;Menu.c: 175:                     colIndex++;
  2054   0004FE  2A39               	incf	_colIndex^0,f,c
  2055                           
  2056                           ;Menu.c: 176:                     index--;
  2057   000500  0637               	decf	_index^0,f,c
  2058                           
  2059                           ;Menu.c: 177:                     if(index == 3){
  2060   000502  0E03               	movlw	3
  2061   000504  1837               	xorwf	_index^0,w,c
  2062   000506  A4D8               	btfss	status,2,c
  2063   000508  D006               	goto	l4894
  2064                           
  2065                           ;Menu.c: 178:                         timeValue.minutes = (KeGetGenericValue()*10);
  2066   00050A  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2067   00050E  0D0A               	mullw	10
  2068   000510  CFF3 F021          	movff	prodl,_timeValue
  2069                           
  2070                           ;Menu.c: 179:                     }else if(index == 2){
  2071   000514  D016               	goto	l4904
  2072   000516                     l4894:
  2073   000516  0E02               	movlw	2
  2074   000518  1837               	xorwf	_index^0,w,c
  2075   00051A  A4D8               	btfss	status,2,c
  2076   00051C  D005               	goto	l4898
  2077                           
  2078                           ;Menu.c: 180:                         timeValue.minutes += KeGetGenericValue()-16;
  2079   00051E  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2080   000522  0FF0               	addlw	240
  2081   000524  2621               	addwf	_timeValue^0,f,c
  2082                           
  2083                           ;Menu.c: 181:                     }else if(index == 1){
  2084   000526  D00D               	goto	l4904
  2085   000528                     l4898:
  2086   000528  0437               	decf	_index^0,w,c
  2087   00052A  A4D8               	btfss	status,2,c
  2088   00052C  D006               	goto	l4902
  2089                           
  2090                           ;Menu.c: 182:                         timeValue.seconds = (KeGetGenericValue()*10);
  2091   00052E  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2092   000532  0D0A               	mullw	10
  2093   000534  CFF3 F022          	movff	prodl,_timeValue+1
  2094                           
  2095                           ;Menu.c: 183:                     }else{
  2096   000538  D004               	goto	l4904
  2097   00053A                     l4902:
  2098                           
  2099                           ;Menu.c: 184:                         timeValue.seconds += KeGetGenericValue()-16;
  2100   00053A  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2101   00053E  0FF0               	addlw	240
  2102   000540  2622               	addwf	(_timeValue+1)^0,f,c
  2103   000542                     l4904:
  2104                           
  2105                           ;Menu.c: 186:                     state = index==0?23:22;
  2106   000542  5037               	movf	_index^0,w,c
  2107   000544  B4D8               	btfsc	status,2,c
  2108   000546  D004               	goto	l4908
  2109   000548  0E00               	movlw	0
  2110   00054A  6E6C               	movwf	(_menuLoop$716+1)^0,c
  2111   00054C  0E16               	movlw	22
  2112   00054E  D003               	goto	L1
  2113   000550                     l4908:
  2114   000550  0E00               	movlw	0
  2115   000552  6E6C               	movwf	(_menuLoop$716+1)^0,c
  2116   000554  0E17               	movlw	23
  2117   000556                     L1:
  2118   000556  6E6B               	movwf	_menuLoop$716^0,c
  2119   000558  C06B  F035         	movff	_menuLoop$716,_state@Menu$F707
  2120   00055C  0012               	return	
  2121   00055E                     l4912:
  2122                           
  2123                           ;Menu.c: 192:             if(!isPressed()){
  2124   00055E  EC95  F00E         	call	_isPressed	;wreg free
  2125   000562  0900               	iorlw	0
  2126   000564  A4D8               	btfss	status,2,c
  2127   000566  0012               	return	
  2128                           
  2129                           ;Menu.c: 193:                 if(index == 2){
  2130   000568  0E02               	movlw	2
  2131   00056A  1837               	xorwf	_index^0,w,c
  2132   00056C  A4D8               	btfss	status,2,c
  2133   00056E  D7B1               	goto	l4874
  2134                           
  2135                           ;Menu.c: 194:                     LcPutChar(':');
  2136   000570  0E3A               	movlw	58
  2137   000572  ECEA  F00A         	call	_LcPutChar
  2138                           
  2139                           ;Menu.c: 195:                     colIndex++;
  2140   000576  2A39               	incf	_colIndex^0,f,c
  2141   000578  D7AC               	goto	l4874
  2142   00057A                     l4922:
  2143                           
  2144                           ;Menu.c: 201:             if(isPressed() && KeGetCharValue() == '#'){
  2145   00057A  EC95  F00E         	call	_isPressed	;wreg free
  2146   00057E  0900               	iorlw	0
  2147   000580  B4D8               	btfsc	status,2,c
  2148   000582  D010               	goto	l4928
  2149   000584  ECF6  F008         	call	_KeGetCharValue	;wreg free
  2150   000588  0A23               	xorlw	35
  2151   00058A  A4D8               	btfss	status,2,c
  2152   00058C  D00B               	goto	l4928
  2153                           
  2154                           ;Menu.c: 202:                 updateSysTimestamp(timeValue,0);
  2155   00058E  C021  F04C         	movff	_timeValue,updateSysTimestamp@time
  2156   000592  C022  F04D         	movff	_timeValue+1,updateSysTimestamp@time+1
  2157   000596  0E00               	movlw	0
  2158   000598  6E4E               	movwf	updateSysTimestamp@i^0,c
  2159   00059A  ECB2  F00D         	call	_updateSysTimestamp	;wreg free
  2160                           
  2161                           ;Menu.c: 203:                 refreshDisplay();
  2162   00059E  EC17  F00E         	call	_refreshDisplay	;wreg free
  2163                           
  2164                           ;Menu.c: 204:             }else if(isPressed() && KeGetCharValue() == '*'){
  2165   0005A2  0012               	return	
  2166   0005A4                     l4928:
  2167   0005A4  EC95  F00E         	call	_isPressed	;wreg free
  2168   0005A8  0900               	iorlw	0
  2169   0005AA  B4D8               	btfsc	status,2,c
  2170   0005AC  0012               	return	
  2171   0005AE  ECF6  F008         	call	_KeGetCharValue	;wreg free
  2172   0005B2  0A2A               	xorlw	42
  2173   0005B4  A4D8               	btfss	status,2,c
  2174   0005B6  0012               	return	
  2175   0005B8  D761               	goto	u4580
  2176   0005BA                     l4934:
  2177                           
  2178                           ;Menu.c: 209:             lcdAddString(&CURRENTTIME);
  2179   0005BA  0E90               	movlw	low _CURRENTTIME
  2180   0005BC  6E62               	movwf	lcdAddString@string^0,c
  2181   0005BE  6A63               	clrf	(lcdAddString@string+1)^0,c
  2182   0005C0  EC9B  F00D         	call	_lcdAddString	;wreg free
  2183                           
  2184                           ;Menu.c: 210:             if(rowIndex == 1){
  2185   0005C4  043A               	decf	_rowIndex^0,w,c
  2186   0005C6  A4D8               	btfss	status,2,c
  2187   0005C8  0012               	return	
  2188                           
  2189                           ;Menu.c: 211:                 displayTimestamp();
  2190   0005CA  EC91  F000         	call	_displayTimestamp	;wreg free
  2191                           
  2192                           ;Menu.c: 212:                 TI_ResetTics(timer);
  2193   0005CE  504A               	movf	_timer^0,w,c
  2194   0005D0  ECDD  F00D         	call	_TI_ResetTics
  2195                           
  2196                           ;Menu.c: 213:                 state = 31;
  2197   0005D4  0E1F               	movlw	31
  2198   0005D6  6E35               	movwf	_state@Menu$F707^0,c
  2199   0005D8  0012               	return	
  2200   0005DA                     l4944:
  2201                           
  2202                           ;Menu.c: 217:             if(isPressed() && KeGetCharValue() == '#'){
  2203   0005DA  EC95  F00E         	call	_isPressed	;wreg free
  2204   0005DE  0900               	iorlw	0
  2205   0005E0  B4D8               	btfsc	status,2,c
  2206   0005E2  D005               	goto	l4950
  2207   0005E4  ECF6  F008         	call	_KeGetCharValue	;wreg free
  2208   0005E8  0A23               	xorlw	35
  2209   0005EA  B4D8               	btfsc	status,2,c
  2210   0005EC  D747               	goto	u4580
  2211   0005EE                     l4950:
  2212   0005EE  504A               	movf	_timer^0,w,c
  2213   0005F0  EC6C  F00C         	call	_TI_GetTics
  2214   0005F4  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2215   0005F6  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2216   0005F8  E106               	bnz	u4780
  2217   0005FA  0ED0               	movlw	208
  2218   0005FC  5C4B               	subwf	?_TI_GetTics^0,w,c
  2219   0005FE  0E07               	movlw	7
  2220   000600  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2221   000602  A0D8               	btfss	status,0,c
  2222   000604  0012               	return	
  2223   000606                     u4780:
  2224                           
  2225                           ;Menu.c: 220:                 resetDisplay();
  2226   000606  EC0B  F000         	call	_resetDisplay	;wreg free
  2227   00060A  D700               	goto	u4530
  2228   00060C                     l4956:
  2229                           
  2230                           ;Menu.c: 228:             lcdAddString(&STARTRECORDING);
  2231   00060C  0E9E               	movlw	low _STARTRECORDING
  2232   00060E  6E62               	movwf	lcdAddString@string^0,c
  2233   000610  6A63               	clrf	(lcdAddString@string+1)^0,c
  2234   000612  EC9B  F00D         	call	_lcdAddString	;wreg free
  2235                           
  2236                           ;Menu.c: 229:             if(rowIndex == 1){
  2237   000616  043A               	decf	_rowIndex^0,w,c
  2238   000618  A4D8               	btfss	status,2,c
  2239   00061A  0012               	return	
  2240                           
  2241                           ;Menu.c: 230:                 index = 0;
  2242   00061C  0E00               	movlw	0
  2243   00061E  6E37               	movwf	_index^0,c
  2244                           
  2245                           ;Menu.c: 231:                 state = 41;
  2246   000620  0E29               	movlw	41
  2247   000622  6E35               	movwf	_state@Menu$F707^0,c
  2248   000624  0012               	return	
  2249   000626                     l4962:
  2250                           
  2251                           ;Menu.c: 235:             if(checkTX()){
  2252   000626  EC69  F000         	call	_checkTX	;wreg free
  2253   00062A  0900               	iorlw	0
  2254   00062C  B4D8               	btfsc	status,2,c
  2255   00062E  0012               	return	
  2256                           
  2257                           ;Menu.c: 236:                 setTX('D');
  2258   000630  0E44               	movlw	68
  2259   000632  EC8A  F000         	call	_setTX
  2260                           
  2261                           ;Menu.c: 237:                 state = 42;
  2262   000636  0E2A               	movlw	42
  2263   000638  6E35               	movwf	_state@Menu$F707^0,c
  2264   00063A  0012               	return	
  2265   00063C                     l4968:
  2266                           
  2267                           ;Menu.c: 241:             sendTimestamp();
  2268   00063C  ECDD  F00E         	call	_sendTimestamp	;wreg free
  2269                           
  2270                           ;Menu.c: 242:             state = 43;
  2271   000640  0E2B               	movlw	43
  2272   000642  6E35               	movwf	_state@Menu$F707^0,c
  2273                           
  2274                           ;Menu.c: 243:             break;
  2275   000644  0012               	return	
  2276   000646                     l4972:
  2277                           
  2278                           ;Menu.c: 245:             if(isIdle()){
  2279   000646  EC4E  F000         	call	_isIdle	;wreg free
  2280   00064A  0900               	iorlw	0
  2281   00064C  B4D8               	btfsc	status,2,c
  2282   00064E  0012               	return	
  2283                           
  2284                           ;Menu.c: 246:                 saveIndex();
  2285   000650  EC8E  F000         	call	_saveIndex	;wreg free
  2286                           
  2287                           ;Menu.c: 247:                 state = 44;
  2288   000654  0E2C               	movlw	44
  2289   000656  6E35               	movwf	_state@Menu$F707^0,c
  2290   000658  0012               	return	
  2291   00065A                     l4978:
  2292                           
  2293                           ;Menu.c: 251:             if(isIdle()){
  2294   00065A  EC4E  F000         	call	_isIdle	;wreg free
  2295   00065E  0900               	iorlw	0
  2296   000660  B4D8               	btfsc	status,2,c
  2297   000662  0012               	return	
  2298                           
  2299                           ;Menu.c: 252:                 state = 45;
  2300   000664  0E2D               	movlw	45
  2301   000666  6E35               	movwf	_state@Menu$F707^0,c
  2302                           
  2303                           ;Menu.c: 253:                 TI_ResetTics(timer);
  2304   000668  504A               	movf	_timer^0,w,c
  2305   00066A  ECDD  F00D         	call	_TI_ResetTics
  2306   00066E  0012               	return	
  2307   000670                     l4984:
  2308                           
  2309                           ;Menu.c: 257:             if(TI_GetTics(timer) >= 2000){
  2310   000670  504A               	movf	_timer^0,w,c
  2311   000672  EC6C  F00C         	call	_TI_GetTics
  2312   000676  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2313   000678  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2314   00067A  E106               	bnz	u4830
  2315   00067C  0ED0               	movlw	208
  2316   00067E  5C4B               	subwf	?_TI_GetTics^0,w,c
  2317   000680  0E07               	movlw	7
  2318   000682  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2319   000684  A0D8               	btfss	status,0,c
  2320   000686  0012               	return	
  2321   000688                     u4830:
  2322                           
  2323                           ;Menu.c: 258:                 TI_ResetTics(songTimer);
  2324   000688  5049               	movf	_songTimer^0,w,c
  2325   00068A  ECDD  F00D         	call	_TI_ResetTics
  2326                           
  2327                           ;Menu.c: 259:                 TI_ResetTics(timer);
  2328   00068E  504A               	movf	_timer^0,w,c
  2329   000690  ECDD  F00D         	call	_TI_ResetTics
  2330                           
  2331                           ;Menu.c: 260:                 state = 50;
  2332   000694  0E32               	movlw	50
  2333   000696  6E35               	movwf	_state@Menu$F707^0,c
  2334   000698  0012               	return	
  2335   00069A                     l4990:
  2336                           
  2337                           ;Menu.c: 270:             if(TI_GetTics(songTimer) >= MUSICDELAY[index] ){
  2338   00069A  5037               	movf	_index^0,w,c
  2339   00069C  0D02               	mullw	2
  2340   00069E  50F3               	movf	243,w,c
  2341   0006A0  0F80               	addlw	low _MUSICDELAY
  2342   0006A2  6ED9               	movwf	fsr2l,c
  2343   0006A4  6ADA               	clrf	fsr2h,c
  2344   0006A6  CFDE F065          	movff	postinc2,??_menuLoop
  2345   0006AA  CFDD F066          	movff	postdec2,??_menuLoop+1
  2346   0006AE  C065  F067         	movff	??_menuLoop,??_menuLoop+2
  2347   0006B2  C066  F068         	movff	??_menuLoop+1,??_menuLoop+3
  2348   0006B6  0E00               	movlw	0
  2349   0006B8  BE68               	btfsc	(??_menuLoop+3)^0,7,c
  2350   0006BA  0EFF               	movlw	255
  2351   0006BC  6E69               	movwf	(??_menuLoop+4)^0,c
  2352   0006BE  6E6A               	movwf	(??_menuLoop+5)^0,c
  2353   0006C0  5049               	movf	_songTimer^0,w,c
  2354   0006C2  EC6C  F00C         	call	_TI_GetTics
  2355   0006C6  5067               	movf	(??_menuLoop+2)^0,w,c
  2356   0006C8  5C4B               	subwf	?_TI_GetTics^0,w,c
  2357   0006CA  5068               	movf	(??_menuLoop+3)^0,w,c
  2358   0006CC  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2359   0006CE  5069               	movf	(??_menuLoop+4)^0,w,c
  2360   0006D0  584D               	subwfb	(?_TI_GetTics+2)^0,w,c
  2361   0006D2  506A               	movf	(??_menuLoop+5)^0,w,c
  2362   0006D4  584E               	subwfb	(?_TI_GetTics+3)^0,w,c
  2363   0006D6  A0D8               	btfss	status,0,c
  2364   0006D8  0012               	return	
  2365                           
  2366                           ;Menu.c: 271:                 index++;
  2367   0006DA  2A37               	incf	_index^0,f,c
  2368                           
  2369                           ;Menu.c: 272:                 if(index == 8){
  2370   0006DC  0E08               	movlw	8
  2371   0006DE  1837               	xorwf	_index^0,w,c
  2372   0006E0  A4D8               	btfss	status,2,c
  2373   0006E2  D003               	goto	l4998
  2374                           
  2375                           ;Menu.c: 273:                     state = 51;
  2376   0006E4  0E33               	movlw	51
  2377   0006E6  6E35               	movwf	_state@Menu$F707^0,c
  2378                           
  2379                           ;Menu.c: 274:                 }else{
  2380   0006E8  0012               	return	
  2381   0006EA                     l4998:
  2382                           
  2383                           ;Menu.c: 275:                     playMusic(MUSICPERIODS[index]);
  2384   0006EA  5037               	movf	_index^0,w,c
  2385   0006EC  0F6D               	addlw	low _MUSICPERIODS
  2386   0006EE  6ED9               	movwf	fsr2l,c
  2387   0006F0  6ADA               	clrf	fsr2h,c
  2388   0006F2  50DF               	movf	indf2,w,c
  2389   0006F4  EC35  F000         	call	_playMusic
  2390                           
  2391                           ;Menu.c: 276:                     TI_ResetTics(songTimer);
  2392   0006F8  5049               	movf	_songTimer^0,w,c
  2393   0006FA  ECDD  F00D         	call	_TI_ResetTics
  2394   0006FE  0012               	return	
  2395   000700                     l5000:
  2396                           
  2397                           ;Menu.c: 282:             if(TI_GetTics(timer) >= 5*2000){
  2398   000700  504A               	movf	_timer^0,w,c
  2399   000702  EC6C  F00C         	call	_TI_GetTics
  2400   000706  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2401   000708  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2402   00070A  E106               	bnz	u4860
  2403   00070C  0E10               	movlw	16
  2404   00070E  5C4B               	subwf	?_TI_GetTics^0,w,c
  2405   000710  0E27               	movlw	39
  2406   000712  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2407   000714  A0D8               	btfss	status,0,c
  2408   000716  D005               	goto	l5008
  2409   000718                     u4860:
  2410                           
  2411                           ;Menu.c: 283:                 stopMusic();
  2412   000718  EC94  F000         	call	_stopMusic	;wreg free
  2413                           
  2414                           ;Menu.c: 284:                 tmpPortChar = 1;
  2415   00071C  0E01               	movlw	1
  2416   00071E  6E34               	movwf	_tmpPortChar^0,c
  2417   000720  D6AD               	goto	u4580
  2418   000722                     l5008:
  2419                           
  2420                           ;Menu.c: 287:                 index = 0;
  2421   000722  0E00               	movlw	0
  2422   000724  6E37               	movwf	_index^0,c
  2423                           
  2424                           ;Menu.c: 288:                 state = 50;
  2425   000726  0E32               	movlw	50
  2426   000728  6E35               	movwf	_state@Menu$F707^0,c
  2427   00072A  0012               	return	
  2428   00072C                     l5010:
  2429                           
  2430                           ;Menu.c: 297:             if(getNumRecordings() == 0){
  2431   00072C  EC1B  F00D         	call	_getNumRecordings	;wreg free
  2432   000730  0900               	iorlw	0
  2433   000732  A4D8               	btfss	status,2,c
  2434   000734  D003               	goto	l5014
  2435                           
  2436                           ;Menu.c: 298:                 state = 150;
  2437   000736  0E96               	movlw	150
  2438   000738  6E35               	movwf	_state@Menu$F707^0,c
  2439                           
  2440                           ;Menu.c: 299:             }else{
  2441   00073A  0012               	return	
  2442   00073C                     l5014:
  2443                           
  2444                           ;Menu.c: 300:                 displayPos = 0;
  2445   00073C  0E00               	movlw	0
  2446   00073E  6E38               	movwf	_displayPos^0,c
  2447                           
  2448                           ;Menu.c: 301:                 skipState = 0;
  2449   000740  0E00               	movlw	0
  2450   000742  6E36               	movwf	_skipState^0,c
  2451                           
  2452                           ;Menu.c: 302:                 state = 61;
  2453   000744  0E3D               	movlw	61
  2454   000746  6E35               	movwf	_state@Menu$F707^0,c
  2455   000748  0012               	return	
  2456   00074A                     l5016:
  2457                           
  2458                           ;Menu.c: 306:             displayRecordings(displayPos);
  2459   00074A  5038               	movf	_displayPos^0,w,c
  2460   00074C  EC3E  F000         	call	_displayRecordings
  2461                           
  2462                           ;Menu.c: 307:             state = 62;
  2463   000750  0E3E               	movlw	62
  2464   000752  6E35               	movwf	_state@Menu$F707^0,c
  2465                           
  2466                           ;Menu.c: 308:             break;
  2467   000754  0012               	return	
  2468   000756                     l5020:
  2469                           
  2470                           ;Menu.c: 311:             if(isIdle()){
  2471   000756  EC4E  F000         	call	_isIdle	;wreg free
  2472   00075A  0900               	iorlw	0
  2473   00075C  B4D8               	btfsc	status,2,c
  2474   00075E  0012               	return	
  2475                           
  2476                           ;Menu.c: 312:                 skipState = getNumRecordings();
  2477   000760  EC1B  F00D         	call	_getNumRecordings	;wreg free
  2478   000764  6E36               	movwf	_skipState^0,c
  2479                           
  2480                           ;Menu.c: 313:                 tmpPortChar = 0;
  2481   000766  0E00               	movlw	0
  2482   000768  6E34               	movwf	_tmpPortChar^0,c
  2483   00076A  D636               	goto	l4812
  2484   00076C                     l5028:
  2485                           
  2486                           ;Menu.c: 319:             lcdAddString(&PLAYRECORDINGS);
  2487   00076C  0EB9               	movlw	low _PLAYRECORDINGS
  2488   00076E  6E62               	movwf	lcdAddString@string^0,c
  2489   000770  6A63               	clrf	(lcdAddString@string+1)^0,c
  2490   000772  EC9B  F00D         	call	_lcdAddString	;wreg free
  2491                           
  2492                           ;Menu.c: 320:             if(rowIndex == 1){
  2493   000776  043A               	decf	_rowIndex^0,w,c
  2494   000778  A4D8               	btfss	status,2,c
  2495   00077A  0012               	return	
  2496                           
  2497                           ;Menu.c: 321:                 state = 71;
  2498   00077C  0E47               	movlw	71
  2499   00077E  6E35               	movwf	_state@Menu$F707^0,c
  2500   000780  0012               	return	
  2501   000782                     l5034:
  2502                           
  2503                           ;Menu.c: 325:             if(checkTX()){
  2504   000782  EC69  F000         	call	_checkTX	;wreg free
  2505   000786  0900               	iorlw	0
  2506   000788  B4D8               	btfsc	status,2,c
  2507   00078A  0012               	return	
  2508                           
  2509                           ;Menu.c: 326:                 setTX('P');
  2510   00078C  0E50               	movlw	80
  2511   00078E  EC8A  F000         	call	_setTX
  2512                           
  2513                           ;Menu.c: 327:                 state = 72;
  2514   000792  0E48               	movlw	72
  2515   000794  6E35               	movwf	_state@Menu$F707^0,c
  2516   000796  0012               	return	
  2517   000798                     l5040:
  2518                           
  2519                           ;Menu.c: 331:             if(checkRX() && getRX() == 'K'){
  2520   000798  EC6F  F000         	call	_checkRX	;wreg free
  2521   00079C  0900               	iorlw	0
  2522   00079E  B4D8               	btfsc	status,2,c
  2523   0007A0  0012               	return	
  2524   0007A2  EC9B  F000         	call	_getRX	;wreg free
  2525   0007A6  0A4B               	xorlw	75
  2526   0007A8  A4D8               	btfss	status,2,c
  2527   0007AA  0012               	return	
  2528                           
  2529                           ;Menu.c: 332:                 sendIndex(displayPos);
  2530   0007AC  5038               	movf	_displayPos^0,w,c
  2531   0007AE  EC63  F000         	call	_sendIndex
  2532                           
  2533                           ;Menu.c: 333:                 state = 73;
  2534   0007B2  0E49               	movlw	73
  2535   0007B4  6E35               	movwf	_state@Menu$F707^0,c
  2536   0007B6  0012               	return	
  2537   0007B8                     l5048:
  2538                           
  2539                           ;Menu.c: 338:             if(isIdle()){
  2540   0007B8  EC4E  F000         	call	_isIdle	;wreg free
  2541   0007BC  0900               	iorlw	0
  2542   0007BE  B4D8               	btfsc	status,2,c
  2543   0007C0  0012               	return	
  2544                           
  2545                           ;Menu.c: 339:                 state = 84;
  2546   0007C2  0E54               	movlw	84
  2547   0007C4  6E35               	movwf	_state@Menu$F707^0,c
  2548   0007C6  0012               	return	
  2549   0007C8                     l5052:
  2550                           
  2551                           ;Menu.c: 344:             index = 7;
  2552   0007C8  0E07               	movlw	7
  2553   0007CA  6E37               	movwf	_index^0,c
  2554                           
  2555                           ;Menu.c: 345:             TI_ResetTics(timer);
  2556   0007CC  504A               	movf	_timer^0,w,c
  2557   0007CE  ECDD  F00D         	call	_TI_ResetTics
  2558                           
  2559                           ;Menu.c: 346:             playMusic(index);
  2560   0007D2  5037               	movf	_index^0,w,c
  2561   0007D4  EC35  F000         	call	_playMusic
  2562                           
  2563                           ;Menu.c: 347:             state = 85;
  2564   0007D8  0E55               	movlw	85
  2565   0007DA  6E35               	movwf	_state@Menu$F707^0,c
  2566                           
  2567                           ;Menu.c: 348:             break;
  2568   0007DC  0012               	return	
  2569   0007DE                     l5058:
  2570                           
  2571                           ;Menu.c: 350:             if(TI_GetTics(timer) >= 2000 && index != 1){
  2572   0007DE  504A               	movf	_timer^0,w,c
  2573   0007E0  EC6C  F00C         	call	_TI_GetTics
  2574   0007E4  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2575   0007E6  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2576   0007E8  E106               	bnz	u4940
  2577   0007EA  0ED0               	movlw	208
  2578   0007EC  5C4B               	subwf	?_TI_GetTics^0,w,c
  2579   0007EE  0E07               	movlw	7
  2580   0007F0  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2581   0007F2  A0D8               	btfss	status,0,c
  2582   0007F4  D00B               	goto	l5068
  2583   0007F6                     u4940:
  2584   0007F6  0437               	decf	_index^0,w,c
  2585   0007F8  B4D8               	btfsc	status,2,c
  2586   0007FA  D008               	goto	l5068
  2587                           
  2588                           ;Menu.c: 351:                 playMusic(index);
  2589   0007FC  5037               	movf	_index^0,w,c
  2590   0007FE  EC35  F000         	call	_playMusic
  2591                           
  2592                           ;Menu.c: 352:                 index--;
  2593   000802  0637               	decf	_index^0,f,c
  2594                           
  2595                           ;Menu.c: 353:                 TI_ResetTics(timer);
  2596   000804  504A               	movf	_timer^0,w,c
  2597   000806  ECDD  F00D         	call	_TI_ResetTics
  2598                           
  2599                           ;Menu.c: 354:             }else if (index == 1){
  2600   00080A  0012               	return	
  2601   00080C                     l5068:
  2602   00080C  0437               	decf	_index^0,w,c
  2603   00080E  A4D8               	btfss	status,2,c
  2604   000810  0012               	return	
  2605                           
  2606                           ;Menu.c: 355:                 stopMusic();
  2607   000812  EC94  F000         	call	_stopMusic	;wreg free
  2608                           
  2609                           ;Menu.c: 356:                 tmpPortChar = 1;
  2610   000816  0E01               	movlw	1
  2611   000818  6E34               	movwf	_tmpPortChar^0,c
  2612                           
  2613                           ;Menu.c: 357:                 displayPos = 1;
  2614   00081A  0E01               	movlw	1
  2615   00081C  6E38               	movwf	_displayPos^0,c
  2616   00081E  D62E               	goto	u4580
  2617   000820                     l5078:
  2618                           
  2619                           ;Menu.c: 364:             if(!(getJoystickUp() || getJoystickDown())){
  2620   000820  ECA1  F00E         	call	_getJoystickUp	;wreg free
  2621   000824  0900               	iorlw	0
  2622   000826  A4D8               	btfss	status,2,c
  2623   000828  0012               	return	
  2624   00082A  ECAD  F00E         	call	_getJoystickDown	;wreg free
  2625   00082E  0900               	iorlw	0
  2626   000830  A4D8               	btfss	status,2,c
  2627   000832  0012               	return	
  2628                           
  2629                           ;Menu.c: 365:                 state = 91;
  2630   000834  0E5B               	movlw	91
  2631   000836  6E35               	movwf	_state@Menu$F707^0,c
  2632                           
  2633                           ;Menu.c: 366:                 TI_ResetTics(timer);
  2634   000838  504A               	movf	_timer^0,w,c
  2635   00083A  ECDD  F00D         	call	_TI_ResetTics
  2636   00083E  0012               	return	
  2637   000840                     l5086:
  2638                           
  2639                           ;Menu.c: 372:             if(isPressed() && KeGetGenericValue() == '#'){
  2640   000840  EC95  F00E         	call	_isPressed	;wreg free
  2641   000844  0900               	iorlw	0
  2642   000846  B4D8               	btfsc	status,2,c
  2643   000848  D012               	goto	l5100
  2644   00084A  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  2645   00084E  0A23               	xorlw	35
  2646   000850  A4D8               	btfss	status,2,c
  2647   000852  D00D               	goto	l5100
  2648                           
  2649                           ;Menu.c: 373:                 resetDisplay();
  2650   000854  EC0B  F000         	call	_resetDisplay	;wreg free
  2651                           
  2652                           ;Menu.c: 374:                 skipState = 0;
  2653   000858  0E00               	movlw	0
  2654   00085A  6E36               	movwf	_skipState^0,c
  2655                           
  2656                           ;Menu.c: 375:                 if(tmpPortChar){
  2657   00085C  5034               	movf	_tmpPortChar^0,w,c
  2658   00085E  B4D8               	btfsc	status,2,c
  2659   000860  D003               	goto	l5098
  2660                           
  2661                           ;Menu.c: 376:                     state = 7;
  2662   000862  0E07               	movlw	7
  2663   000864  6E35               	movwf	_state@Menu$F707^0,c
  2664                           
  2665                           ;Menu.c: 377:                 }else{
  2666   000866  0012               	return	
  2667   000868                     l5098:
  2668                           
  2669                           ;Menu.c: 378:                     state = 70;
  2670   000868  0E46               	movlw	70
  2671   00086A  6E35               	movwf	_state@Menu$F707^0,c
  2672   00086C  0012               	return	
  2673   00086E                     l5100:
  2674                           
  2675                           ;Menu.c: 381:                 if(getJoystickDown()){
  2676   00086E  ECAD  F00E         	call	_getJoystickDown	;wreg free
  2677   000872  0900               	iorlw	0
  2678   000874  B4D8               	btfsc	status,2,c
  2679   000876  D006               	goto	l5108
  2680                           
  2681                           ;Menu.c: 382:                     if(displayPos < skipState){
  2682   000878  5036               	movf	_skipState^0,w,c
  2683   00087A  5C38               	subwf	_displayPos^0,w,c
  2684   00087C  B0D8               	btfsc	status,0,c
  2685   00087E  0012               	return	
  2686                           
  2687                           ;Menu.c: 383:                         displayPos++;
  2688   000880  2A38               	incf	_displayPos^0,f,c
  2689   000882  D5FC               	goto	u4580
  2690   000884                     l5108:
  2691   000884  ECA1  F00E         	call	_getJoystickUp	;wreg free
  2692   000888  0900               	iorlw	0
  2693   00088A  B4D8               	btfsc	status,2,c
  2694   00088C  D005               	goto	l5116
  2695                           
  2696                           ;Menu.c: 387:                     if(displayPos > 0){
  2697   00088E  5038               	movf	_displayPos^0,w,c
  2698   000890  B4D8               	btfsc	status,2,c
  2699   000892  0012               	return	
  2700                           
  2701                           ;Menu.c: 388:                         displayPos--;
  2702   000894  0638               	decf	_displayPos^0,f,c
  2703   000896  D5F2               	goto	u4580
  2704   000898                     l5116:
  2705   000898  0E04               	movlw	4
  2706   00089A  1836               	xorwf	_skipState^0,w,c
  2707   00089C  A4D8               	btfss	status,2,c
  2708   00089E  0012               	return	
  2709                           
  2710                           ;Menu.c: 392:                     if(TI_GetTics(timer) >= 2000){
  2711   0008A0  504A               	movf	_timer^0,w,c
  2712   0008A2  EC6C  F00C         	call	_TI_GetTics
  2713   0008A6  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2714   0008A8  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2715   0008AA  E106               	bnz	u5070
  2716   0008AC  0ED0               	movlw	208
  2717   0008AE  5C4B               	subwf	?_TI_GetTics^0,w,c
  2718   0008B0  0E07               	movlw	7
  2719   0008B2  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2720   0008B4  A0D8               	btfss	status,0,c
  2721   0008B6  0012               	return	
  2722   0008B8                     u5070:
  2723                           
  2724                           ;Menu.c: 393:                         resetDisplay();
  2725   0008B8  EC0B  F000         	call	_resetDisplay	;wreg free
  2726                           
  2727                           ;Menu.c: 394:                         scroll = (scroll + 1)%22;
  2728   0008BC  0E01               	movlw	1
  2729   0008BE  241F               	addwf	_scroll^0,w,c
  2730   0008C0  6E4B               	movwf	___awmod@dividend^0,c
  2731   0008C2  0E00               	movlw	0
  2732   0008C4  2020               	addwfc	(_scroll+1)^0,w,c
  2733   0008C6  6E4C               	movwf	(___awmod@dividend+1)^0,c
  2734   0008C8  0E00               	movlw	0
  2735   0008CA  6E4E               	movwf	(___awmod@divisor+1)^0,c
  2736   0008CC  0E16               	movlw	22
  2737   0008CE  6E4D               	movwf	___awmod@divisor^0,c
  2738   0008D0  EC9E  F00B         	call	___awmod	;wreg free
  2739   0008D4  C04B  F01F         	movff	?___awmod,_scroll
  2740   0008D8  C04C  F020         	movff	?___awmod+1,_scroll+1
  2741                           
  2742                           ;Menu.c: 395:                         skipState = 0;
  2743   0008DC  0E00               	movlw	0
  2744   0008DE  6E36               	movwf	_skipState^0,c
  2745                           
  2746                           ;Menu.c: 396:                         TI_ResetTics(timer);
  2747   0008E0  504A               	movf	_timer^0,w,c
  2748   0008E2  ECDD  F00D         	call	_TI_ResetTics
  2749                           
  2750                           ;Menu.c: 397:                         state = 5;
  2751   0008E6  0E05               	movlw	5
  2752   0008E8  6E35               	movwf	_state@Menu$F707^0,c
  2753   0008EA  0012               	return	
  2754   0008EC                     l5130:
  2755                           
  2756                           ;Menu.c: 405:             lcdAddString(&ENDCOMMUNICATION);
  2757   0008EC  0ED1               	movlw	low _ENDCOMMUNICATION
  2758   0008EE  6E62               	movwf	lcdAddString@string^0,c
  2759   0008F0  6A63               	clrf	(lcdAddString@string+1)^0,c
  2760   0008F2  EC9B  F00D         	call	_lcdAddString	;wreg free
  2761                           
  2762                           ;Menu.c: 406:             if(rowIndex == 1){
  2763   0008F6  043A               	decf	_rowIndex^0,w,c
  2764   0008F8  A4D8               	btfss	status,2,c
  2765   0008FA  0012               	return	
  2766                           
  2767                           ;Menu.c: 407:                 index = 0;
  2768   0008FC  0E00               	movlw	0
  2769   0008FE  6E37               	movwf	_index^0,c
  2770                           
  2771                           ;Menu.c: 408:                 state = 101;
  2772   000900  0E65               	movlw	101
  2773   000902  6E35               	movwf	_state@Menu$F707^0,c
  2774   000904  0012               	return	
  2775   000906                     l5136:
  2776                           
  2777                           ;Menu.c: 412:             LcCursorOn();
  2778   000906  EC75  F000         	call	_LcCursorOn	;wreg free
  2779                           
  2780                           ;Menu.c: 413:             state = 102;
  2781   00090A  0E66               	movlw	102
  2782   00090C  6E35               	movwf	_state@Menu$F707^0,c
  2783                           
  2784                           ;Menu.c: 414:             break;
  2785   00090E  0012               	return	
  2786   000910                     l5140:
  2787                           
  2788                           ;Menu.c: 416:             LcGotoXY(8,0);
  2789   000910  0E00               	movlw	0
  2790   000912  6E59               	movwf	LcGotoXY@Row^0,c
  2791   000914  0E08               	movlw	8
  2792   000916  ECB2  F009         	call	_LcGotoXY
  2793                           
  2794                           ;Menu.c: 417:             state = 103;
  2795   00091A  0E67               	movlw	103
  2796   00091C  6E35               	movwf	_state@Menu$F707^0,c
  2797                           
  2798                           ;Menu.c: 418:             break;
  2799   00091E  0012               	return	
  2800   000920                     l5144:
  2801                           
  2802                           ;Menu.c: 420:             LcCursorOff();
  2803   000920  EC7B  F000         	call	_LcCursorOff	;wreg free
  2804                           
  2805                           ;Menu.c: 421:             state = 104;
  2806   000924  0E68               	movlw	104
  2807   000926  6E35               	movwf	_state@Menu$F707^0,c
  2808                           
  2809                           ;Menu.c: 422:             break;
  2810   000928  0012               	return	
  2811   00092A                     l5148:
  2812                           
  2813                           ;Menu.c: 425:             LcPutChar(portName[index]);
  2814   00092A  5037               	movf	_index^0,w,c
  2815   00092C  0F13               	addlw	low _portName
  2816   00092E  6ED9               	movwf	fsr2l,c
  2817   000930  6ADA               	clrf	fsr2h,c
  2818   000932  50DF               	movf	indf2,w,c
  2819   000934  ECEA  F00A         	call	_LcPutChar
  2820                           
  2821                           ;Menu.c: 426:             index++;
  2822   000938  2A37               	incf	_index^0,f,c
  2823                           
  2824                           ;Menu.c: 427:             if(index == 3){
  2825   00093A  0E03               	movlw	3
  2826   00093C  1837               	xorwf	_index^0,w,c
  2827   00093E  A4D8               	btfss	status,2,c
  2828   000940  0012               	return	
  2829                           
  2830                           ;Menu.c: 428:                 state = 105;
  2831   000942  0E69               	movlw	105
  2832   000944  6E35               	movwf	_state@Menu$F707^0,c
  2833   000946  0012               	return	
  2834   000948                     l5156:
  2835                           
  2836                           ;Menu.c: 432:             LcPutChar('!');
  2837   000948  0E21               	movlw	33
  2838   00094A  ECEA  F00A         	call	_LcPutChar
  2839                           
  2840                           ;Menu.c: 433:             TI_ResetTics(timer);
  2841   00094E  504A               	movf	_timer^0,w,c
  2842   000950  ECDD  F00D         	call	_TI_ResetTics
  2843                           
  2844                           ;Menu.c: 434:             state = 106;
  2845   000954  0E6A               	movlw	106
  2846   000956  6E35               	movwf	_state@Menu$F707^0,c
  2847                           
  2848                           ;Menu.c: 435:             break;
  2849   000958  0012               	return	
  2850   00095A                     l5160:
  2851                           
  2852                           ;Menu.c: 437:             if(TI_GetTics(timer) >= 2000*2){
  2853   00095A  504A               	movf	_timer^0,w,c
  2854   00095C  EC6C  F00C         	call	_TI_GetTics
  2855   000960  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2856   000962  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2857   000964  E106               	bnz	u5100
  2858   000966  0EA0               	movlw	160
  2859   000968  5C4B               	subwf	?_TI_GetTics^0,w,c
  2860   00096A  0E0F               	movlw	15
  2861   00096C  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2862   00096E  A0D8               	btfss	status,0,c
  2863   000970  0012               	return	
  2864   000972                     u5100:
  2865   000972  D4CF               	goto	u4380
  2866   000974                     l5164:
  2867                           
  2868                           ;Menu.c: 444:             lcdAddString(&ERRORMESSAGES);
  2869   000974  0E4B               	movlw	low _ERRORMESSAGES
  2870   000976  6E62               	movwf	lcdAddString@string^0,c
  2871   000978  0E01               	movlw	high _ERRORMESSAGES
  2872   00097A  6E63               	movwf	(lcdAddString@string+1)^0,c
  2873   00097C  EC9B  F00D         	call	_lcdAddString	;wreg free
  2874                           
  2875                           ;Menu.c: 445:             if(rowIndex == 1){
  2876   000980  043A               	decf	_rowIndex^0,w,c
  2877   000982  A4D8               	btfss	status,2,c
  2878   000984  0012               	return	
  2879                           
  2880                           ;Menu.c: 446:                 TI_ResetTics(timer);
  2881   000986  504A               	movf	_timer^0,w,c
  2882   000988  ECDD  F00D         	call	_TI_ResetTics
  2883                           
  2884                           ;Menu.c: 447:                 state = 151;
  2885   00098C  0E97               	movlw	151
  2886   00098E  6E35               	movwf	_state@Menu$F707^0,c
  2887   000990  0012               	return	
  2888   000992                     l5172:
  2889                           
  2890                           ;Menu.c: 451:             if(TI_GetTics(timer) >= 2000*3){
  2891   000992  504A               	movf	_timer^0,w,c
  2892   000994  EC6C  F00C         	call	_TI_GetTics
  2893   000998  504E               	movf	(?_TI_GetTics+3)^0,w,c
  2894   00099A  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  2895   00099C  E106               	bnz	u5120
  2896   00099E  0E70               	movlw	112
  2897   0009A0  5C4B               	subwf	?_TI_GetTics^0,w,c
  2898   0009A2  0E17               	movlw	23
  2899   0009A4  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  2900   0009A6  A0D8               	btfss	status,0,c
  2901   0009A8  0012               	return	
  2902   0009AA                     u5120:
  2903                           
  2904                           ;Menu.c: 452:                 TI_ResetTics(timer);
  2905   0009AA  504A               	movf	_timer^0,w,c
  2906   0009AC  ECDD  F00D         	call	_TI_ResetTics
  2907                           
  2908                           ;Menu.c: 453:                 refreshDisplay();
  2909   0009B0  EC17  F00E         	call	_refreshDisplay	;wreg free
  2910   0009B4  0012               	return	
  2911   0009B6                     l5178:
  2912   0009B6  5035               	movf	_state@Menu$F707^0,w,c
  2913   0009B8  6E65               	movwf	??_menuLoop^0,c
  2914   0009BA  6A66               	clrf	(??_menuLoop+1)^0,c
  2915                           
  2916                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2917                           ; Switch size 1, requested type "simple"
  2918                           ; Number of cases is 1, Range of values is 0 to 0
  2919                           ; switch strategies available:
  2920                           ; Name         Instructions Cycles
  2921                           ; simple_byte            4     3 (average)
  2922                           ;	Chosen strategy is simple_byte
  2923   0009BC  5066               	movf	(??_menuLoop+1)^0,w,c
  2924   0009BE  0A00               	xorlw	0	; case 0
  2925   0009C0  A4D8               	btfss	status,2,c
  2926   0009C2  0012               	return	
  2927                           
  2928                           ; Switch size 1, requested type "simple"
  2929                           ; Number of cases is 45, Range of values is 0 to 151
  2930                           ; switch strategies available:
  2931                           ; Name         Instructions Cycles
  2932                           ; simple_byte          136    69 (average)
  2933                           ;	Chosen strategy is simple_byte
  2934   0009C4  5065               	movf	??_menuLoop^0,w,c
  2935   0009C6  0A00               	xorlw	0	; case 0
  2936   0009C8  B4D8               	btfsc	status,2,c
  2937   0009CA  D482               	goto	l4728
  2938   0009CC  0A01               	xorlw	1	; case 1
  2939   0009CE  B4D8               	btfsc	status,2,c
  2940   0009D0  D492               	goto	l4744
  2941   0009D2  0A03               	xorlw	3	; case 2
  2942   0009D4  B4D8               	btfsc	status,2,c
  2943   0009D6  D49A               	goto	l4750
  2944   0009D8  0A01               	xorlw	1	; case 3
  2945   0009DA  B4D8               	btfsc	status,2,c
  2946   0009DC  D4CE               	goto	l4780
  2947   0009DE  0A07               	xorlw	7	; case 4
  2948   0009E0  B4D8               	btfsc	status,2,c
  2949   0009E2  D4DC               	goto	l4790
  2950   0009E4  0A01               	xorlw	1	; case 5
  2951   0009E6  B4D8               	btfsc	status,2,c
  2952   0009E8  D4DD               	goto	l4794
  2953   0009EA  0A02               	xorlw	2	; case 7
  2954   0009EC  B4D8               	btfsc	status,2,c
  2955   0009EE  D4F7               	goto	l4814
  2956   0009F0  0A0F               	xorlw	15	; case 8
  2957   0009F2  B4D8               	btfsc	status,2,c
  2958   0009F4  D515               	goto	l4834
  2959   0009F6  0A01               	xorlw	1	; case 9
  2960   0009F8  B4D8               	btfsc	status,2,c
  2961   0009FA  D51F               	goto	l4838
  2962   0009FC  0A03               	xorlw	3	; case 10
  2963   0009FE  B4D8               	btfsc	status,2,c
  2964   000A00  D527               	goto	l4844
  2965   000A02  0A01               	xorlw	1	; case 11
  2966   000A04  B4D8               	btfsc	status,2,c
  2967   000A06  D536               	goto	l4852
  2968   000A08  0A1F               	xorlw	31	; case 20
  2969   000A0A  B4D8               	btfsc	status,2,c
  2970   000A0C  D556               	goto	l4866
  2971   000A0E  0A01               	xorlw	1	; case 21
  2972   000A10  B4D8               	btfsc	status,2,c
  2973   000A12  D562               	goto	l4876
  2974   000A14  0A03               	xorlw	3	; case 22
  2975   000A16  B4D8               	btfsc	status,2,c
  2976   000A18  D5A2               	goto	l4912
  2977   000A1A  0A01               	xorlw	1	; case 23
  2978   000A1C  B4D8               	btfsc	status,2,c
  2979   000A1E  D5AD               	goto	l4922
  2980   000A20  0A09               	xorlw	9	; case 30
  2981   000A22  B4D8               	btfsc	status,2,c
  2982   000A24  D5CA               	goto	l4934
  2983   000A26  0A01               	xorlw	1	; case 31
  2984   000A28  B4D8               	btfsc	status,2,c
  2985   000A2A  D5D7               	goto	l4944
  2986   000A2C  0A37               	xorlw	55	; case 40
  2987   000A2E  B4D8               	btfsc	status,2,c
  2988   000A30  D5ED               	goto	l4956
  2989   000A32  0A01               	xorlw	1	; case 41
  2990   000A34  B4D8               	btfsc	status,2,c
  2991   000A36  D5F7               	goto	l4962
  2992   000A38  0A03               	xorlw	3	; case 42
  2993   000A3A  B4D8               	btfsc	status,2,c
  2994   000A3C  D5FF               	goto	l4968
  2995   000A3E  0A01               	xorlw	1	; case 43
  2996   000A40  B4D8               	btfsc	status,2,c
  2997   000A42  D601               	goto	l4972
  2998   000A44  0A07               	xorlw	7	; case 44
  2999   000A46  B4D8               	btfsc	status,2,c
  3000   000A48  D608               	goto	l4978
  3001   000A4A  0A01               	xorlw	1	; case 45
  3002   000A4C  B4D8               	btfsc	status,2,c
  3003   000A4E  D610               	goto	l4984
  3004   000A50  0A1F               	xorlw	31	; case 50
  3005   000A52  B4D8               	btfsc	status,2,c
  3006   000A54  D622               	goto	l4990
  3007   000A56  0A01               	xorlw	1	; case 51
  3008   000A58  B4D8               	btfsc	status,2,c
  3009   000A5A  D652               	goto	l5000
  3010   000A5C  0A0F               	xorlw	15	; case 60
  3011   000A5E  B4D8               	btfsc	status,2,c
  3012   000A60  D665               	goto	l5010
  3013   000A62  0A01               	xorlw	1	; case 61
  3014   000A64  B4D8               	btfsc	status,2,c
  3015   000A66  D671               	goto	l5016
  3016   000A68  0A03               	xorlw	3	; case 62
  3017   000A6A  B4D8               	btfsc	status,2,c
  3018   000A6C  D674               	goto	l5020
  3019   000A6E  0A78               	xorlw	120	; case 70
  3020   000A70  B4D8               	btfsc	status,2,c
  3021   000A72  D67C               	goto	l5028
  3022   000A74  0A01               	xorlw	1	; case 71
  3023   000A76  B4D8               	btfsc	status,2,c
  3024   000A78  D684               	goto	l5034
  3025   000A7A  0A0F               	xorlw	15	; case 72
  3026   000A7C  B4D8               	btfsc	status,2,c
  3027   000A7E  D68C               	goto	l5040
  3028   000A80  0A01               	xorlw	1	; case 73
  3029   000A82  B4D8               	btfsc	status,2,c
  3030   000A84  D699               	goto	l5048
  3031   000A86  0A1D               	xorlw	29	; case 84
  3032   000A88  B4D8               	btfsc	status,2,c
  3033   000A8A  D69E               	goto	l5052
  3034   000A8C  0A01               	xorlw	1	; case 85
  3035   000A8E  B4D8               	btfsc	status,2,c
  3036   000A90  D6A6               	goto	l5058
  3037   000A92  0A0F               	xorlw	15	; case 90
  3038   000A94  B4D8               	btfsc	status,2,c
  3039   000A96  D6C4               	goto	l5078
  3040   000A98  0A01               	xorlw	1	; case 91
  3041   000A9A  B4D8               	btfsc	status,2,c
  3042   000A9C  D6D1               	goto	l5086
  3043   000A9E  0A3F               	xorlw	63	; case 100
  3044   000AA0  B4D8               	btfsc	status,2,c
  3045   000AA2  D724               	goto	l5130
  3046   000AA4  0A01               	xorlw	1	; case 101
  3047   000AA6  B4D8               	btfsc	status,2,c
  3048   000AA8  D72E               	goto	l5136
  3049   000AAA  0A03               	xorlw	3	; case 102
  3050   000AAC  B4D8               	btfsc	status,2,c
  3051   000AAE  D730               	goto	l5140
  3052   000AB0  0A01               	xorlw	1	; case 103
  3053   000AB2  B4D8               	btfsc	status,2,c
  3054   000AB4  D735               	goto	l5144
  3055   000AB6  0A0F               	xorlw	15	; case 104
  3056   000AB8  B4D8               	btfsc	status,2,c
  3057   000ABA  D737               	goto	l5148
  3058   000ABC  0A01               	xorlw	1	; case 105
  3059   000ABE  B4D8               	btfsc	status,2,c
  3060   000AC0  D743               	goto	l5156
  3061   000AC2  0A03               	xorlw	3	; case 106
  3062   000AC4  B4D8               	btfsc	status,2,c
  3063   000AC6  D749               	goto	l5160
  3064   000AC8  0AFC               	xorlw	252	; case 150
  3065   000ACA  B4D8               	btfsc	status,2,c
  3066   000ACC  D753               	goto	l5164
  3067   000ACE  0A01               	xorlw	1	; case 151
  3068   000AD0  A4D8               	btfss	status,2,c
  3069   000AD2  0012               	return	
  3070   000AD4  D75E               	goto	l5172
  3071   000AD6                     __end_of_menuLoop:
  3072                           	callstack 0
  3073                           
  3074 ;; *************** function _sendTimestamp *****************
  3075 ;; Defined at:
  3076 ;;		line 208 in file "EEPROM.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;		None
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg, status,2
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1
  3090 ;;      Params:         0       0       0
  3091 ;;      Locals:         0       0       0
  3092 ;;      Temps:          0       0       0
  3093 ;;      Totals:         0       0       0
  3094 ;;Total ram usage:        0 bytes
  3095 ;; Hardware stack levels used: 1
  3096 ;; Hardware stack levels required when called: 2
  3097 ;; This function calls:
  3098 ;;		Nothing
  3099 ;; This function is called by:
  3100 ;;		_menuLoop
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text5
  3105   001DBA                     __ptext5:
  3106                           	callstack 0
  3107   001DBA                     _sendTimestamp:
  3108                           	callstack 27
  3109                           
  3110                           ;EEPROM.c: 209:     state = 2;
  3111                           
  3112                           ;incstack = 0
  3113   001DBA  0E02               	movlw	2
  3114   001DBC  6E28               	movwf	_state@EEPROM$F1455^0,c
  3115   001DBE  0012               	return		;funcret
  3116   001DC0                     __end_of_sendTimestamp:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _sendIndex *****************
  3120 ;; Defined at:
  3121 ;;		line 216 in file "EEPROM.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  indexPositio    1    wreg     unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  indexPositio    1    0[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1
  3135 ;;      Params:         0       0       0
  3136 ;;      Locals:         1       0       0
  3137 ;;      Temps:          0       0       0
  3138 ;;      Totals:         1       0       0
  3139 ;;Total ram usage:        1 bytes
  3140 ;; Hardware stack levels used: 1
  3141 ;; Hardware stack levels required when called: 2
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_menuLoop
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text6
  3150   0000C6                     __ptext6:
  3151                           	callstack 0
  3152   0000C6                     _sendIndex:
  3153                           	callstack 27
  3154                           
  3155                           ;incstack = 0
  3156                           ;sendIndex@indexPosition stored from wreg
  3157   0000C6  6E4B               	movwf	sendIndex@indexPosition^0,c
  3158                           
  3159                           ;EEPROM.c: 217:     indexTemp = indexPosition;
  3160   0000C8  C04B  F027         	movff	sendIndex@indexPosition,_indexTemp
  3161                           
  3162                           ;EEPROM.c: 218:     state = 30;
  3163   0000CC  0E1E               	movlw	30
  3164   0000CE  6E28               	movwf	_state@EEPROM$F1455^0,c
  3165   0000D0  0012               	return		;funcret
  3166   0000D2                     __end_of_sendIndex:
  3167                           	callstack 0
  3168                           
  3169 ;; *************** function _saveIndex *****************
  3170 ;; Defined at:
  3171 ;;		line 212 in file "EEPROM.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;		None
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;		None
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, status,2
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1
  3185 ;;      Params:         0       0       0
  3186 ;;      Locals:         0       0       0
  3187 ;;      Temps:          0       0       0
  3188 ;;      Totals:         0       0       0
  3189 ;;Total ram usage:        0 bytes
  3190 ;; Hardware stack levels used: 1
  3191 ;; Hardware stack levels required when called: 2
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_menuLoop
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text7
  3200   00011C                     __ptext7:
  3201                           	callstack 0
  3202   00011C                     _saveIndex:
  3203                           	callstack 27
  3204                           
  3205                           ;EEPROM.c: 213:     state = 10;
  3206                           
  3207                           ;incstack = 0
  3208   00011C  0E0A               	movlw	10
  3209   00011E  6E28               	movwf	_state@EEPROM$F1455^0,c
  3210   000120  0012               	return		;funcret
  3211   000122                     __end_of_saveIndex:
  3212                           	callstack 0
  3213                           
  3214 ;; *************** function _refreshDisplay *****************
  3215 ;; Defined at:
  3216 ;;		line 497 in file "Menu.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1
  3230 ;;      Params:         0       0       0
  3231 ;;      Locals:         0       0       0
  3232 ;;      Temps:          0       0       0
  3233 ;;      Totals:         0       0       0
  3234 ;;Total ram usage:        0 bytes
  3235 ;; Hardware stack levels used: 1
  3236 ;; Hardware stack levels required when called: 6
  3237 ;; This function calls:
  3238 ;;		_resetDisplay
  3239 ;; This function is called by:
  3240 ;;		_menuLoop
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text8
  3245   001C2E                     __ptext8:
  3246                           	callstack 0
  3247   001C2E                     _refreshDisplay:
  3248                           	callstack 23
  3249                           
  3250                           ;Menu.c: 498:     if(tmpPortChar){
  3251                           
  3252                           ;incstack = 0
  3253   001C2E  5034               	movf	_tmpPortChar^0,w,c
  3254   001C30  B4D8               	btfsc	status,2,c
  3255   001C32  D002               	goto	l3542
  3256                           
  3257                           ;Menu.c: 499:         state = 5;
  3258   001C34  0E05               	movlw	5
  3259   001C36  D001               	goto	L2
  3260   001C38                     l3542:
  3261                           
  3262                           ;Menu.c: 501:         state = 61;
  3263   001C38  0E3D               	movlw	61
  3264   001C3A                     L2:
  3265   001C3A  6E35               	movwf	_state@Menu$F707^0,c
  3266                           
  3267                           ;Menu.c: 503:     scroll = 0;
  3268                           
  3269                           ;Menu.c: 502:     }
  3270   001C3C  0E00               	movlw	0
  3271   001C3E  6E20               	movwf	(_scroll+1)^0,c
  3272   001C40  0E00               	movlw	0
  3273   001C42  6E1F               	movwf	_scroll^0,c
  3274                           
  3275                           ;Menu.c: 504:     skipState = 0;
  3276   001C44  0E00               	movlw	0
  3277   001C46  6E36               	movwf	_skipState^0,c
  3278                           
  3279                           ;Menu.c: 505:     index = 0;
  3280   001C48  0E00               	movlw	0
  3281   001C4A  6E37               	movwf	_index^0,c
  3282                           
  3283                           ;Menu.c: 506:     resetDisplay();
  3284   001C4C  EC0B  F000         	call	_resetDisplay	;wreg free
  3285   001C50  0012               	return		;funcret
  3286   001C52                     __end_of_refreshDisplay:
  3287                           	callstack 0
  3288                           
  3289 ;; *************** function _resetDisplay *****************
  3290 ;; Defined at:
  3291 ;;		line 459 in file "Menu.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1
  3305 ;;      Params:         0       0       0
  3306 ;;      Locals:         0       0       0
  3307 ;;      Temps:          0       0       0
  3308 ;;      Totals:         0       0       0
  3309 ;;Total ram usage:        0 bytes
  3310 ;; Hardware stack levels used: 1
  3311 ;; Hardware stack levels required when called: 5
  3312 ;; This function calls:
  3313 ;;		_LcClear
  3314 ;; This function is called by:
  3315 ;;		_menuLoop
  3316 ;;		_refreshDisplay
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text9
  3321   000016                     __ptext9:
  3322                           	callstack 0
  3323   000016                     _resetDisplay:
  3324                           	callstack 24
  3325                           
  3326                           ;Menu.c: 460:     LcClear();
  3327                           
  3328                           ;incstack = 0
  3329   000016  EC4B  F00E         	call	_LcClear	;wreg free
  3330                           
  3331                           ;Menu.c: 461:     colIndex = rowIndex = 0;
  3332   00001A  0E00               	movlw	0
  3333   00001C  6E3A               	movwf	_rowIndex^0,c
  3334   00001E  C03A  F039         	movff	_rowIndex,_colIndex
  3335                           
  3336                           ;Menu.c: 462:     scrollIndex = 0;
  3337   000022  0E00               	movlw	0
  3338   000024  6E1E               	movwf	(_scrollIndex+1)^0,c
  3339   000026  0E00               	movlw	0
  3340   000028  6E1D               	movwf	_scrollIndex^0,c
  3341   00002A  0012               	return		;funcret
  3342   00002C                     __end_of_resetDisplay:
  3343                           	callstack 0
  3344                           
  3345 ;; *************** function _LcClear *****************
  3346 ;; Defined at:
  3347 ;;		line 113 in file "LcTLCD.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1
  3361 ;;      Params:         0       0       0
  3362 ;;      Locals:         0       0       0
  3363 ;;      Temps:          0       0       0
  3364 ;;      Totals:         0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used: 1
  3367 ;; Hardware stack levels required when called: 4
  3368 ;; This function calls:
  3369 ;;		_CantaIR
  3370 ;;		_Espera
  3371 ;;		_WaitForBusy
  3372 ;; This function is called by:
  3373 ;;		_resetDisplay
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text10
  3378   001C96                     __ptext10:
  3379                           	callstack 0
  3380   001C96                     _LcClear:
  3381                           	callstack 24
  3382                           
  3383                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  3384                           
  3385                           ;incstack = 0
  3386   001C96  ECDC  F00C         	call	_WaitForBusy	;wreg free
  3387   001C9A  0E01               	movlw	1
  3388   001C9C  EC6A  F00D         	call	_CantaIR
  3389                           
  3390                           ;LcTLCD.c: 117:  Espera(Timer, 6);
  3391   001CA0  0E00               	movlw	0
  3392   001CA2  6E59               	movwf	(Espera@Timer+1)^0,c
  3393   001CA4  0E00               	movlw	0
  3394   001CA6  6E58               	movwf	Espera@Timer^0,c
  3395   001CA8  0E00               	movlw	0
  3396   001CAA  6E5B               	movwf	(Espera@ms+1)^0,c
  3397   001CAC  0E06               	movlw	6
  3398   001CAE  6E5A               	movwf	Espera@ms^0,c
  3399   001CB0  EC37  F00D         	call	_Espera	;wreg free
  3400   001CB4  0012               	return		;funcret
  3401   001CB6                     __end_of_LcClear:
  3402                           	callstack 0
  3403                           
  3404 ;; *************** function _lcdAddString *****************
  3405 ;; Defined at:
  3406 ;;		line 465 in file "Menu.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  string          2   23[COMRAM] PTR unsigned char 
  3409 ;;		 -> ERRORMESSAGES(20), ENDCOMMUNICATION(11), PLAYRECORDINGS(12), STARTRECORDING(14), 
  3410 ;;		 -> CURRENTTIME(14), MODIFYTIME(13), PORTNAMEMENU(12), 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1
  3422 ;;      Params:         2       0       0
  3423 ;;      Locals:         0       0       0
  3424 ;;      Temps:          0       0       0
  3425 ;;      Totals:         2       0       0
  3426 ;;Total ram usage:        2 bytes
  3427 ;; Hardware stack levels used: 1
  3428 ;; Hardware stack levels required when called: 6
  3429 ;; This function calls:
  3430 ;;		_LcPutChar
  3431 ;;		_moveOneRow
  3432 ;; This function is called by:
  3433 ;;		_menuLoop
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text11
  3438   001B36                     __ptext11:
  3439                           	callstack 0
  3440   001B36                     _lcdAddString:
  3441                           	callstack 23
  3442                           
  3443                           ;Menu.c: 466:     if(string[colIndex] != '\0'){
  3444                           
  3445                           ;incstack = 0
  3446   001B36  5039               	movf	_colIndex^0,w,c
  3447   001B38  2462               	addwf	lcdAddString@string^0,w,c
  3448   001B3A  6ED9               	movwf	fsr2l,c
  3449   001B3C  0E00               	movlw	0
  3450   001B3E  2063               	addwfc	(lcdAddString@string+1)^0,w,c
  3451   001B40  6EDA               	movwf	fsr2h,c
  3452   001B42  50DF               	movf	indf2,w,c
  3453   001B44  B4D8               	btfsc	status,2,c
  3454   001B46  D00B               	goto	l4724
  3455                           
  3456                           ;Menu.c: 467:         LcPutChar(string[colIndex]);
  3457   001B48  5039               	movf	_colIndex^0,w,c
  3458   001B4A  2462               	addwf	lcdAddString@string^0,w,c
  3459   001B4C  6ED9               	movwf	fsr2l,c
  3460   001B4E  0E00               	movlw	0
  3461   001B50  2063               	addwfc	(lcdAddString@string+1)^0,w,c
  3462   001B52  6EDA               	movwf	fsr2h,c
  3463   001B54  50DF               	movf	indf2,w,c
  3464   001B56  ECEA  F00A         	call	_LcPutChar
  3465                           
  3466                           ;Menu.c: 468:         colIndex++;
  3467   001B5A  2A39               	incf	_colIndex^0,f,c
  3468                           
  3469                           ;Menu.c: 469:     }else{
  3470   001B5C  0012               	return	
  3471   001B5E                     l4724:
  3472                           
  3473                           ;Menu.c: 470:         moveOneRow();
  3474   001B5E  EC88  F00E         	call	_moveOneRow	;wreg free
  3475   001B62  0012               	return		;funcret
  3476   001B64                     __end_of_lcdAddString:
  3477                           	callstack 0
  3478                           
  3479 ;; *************** function _isPressed *****************
  3480 ;; Defined at:
  3481 ;;		line 164 in file "Keypad.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;		None
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      unsigned char 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1
  3495 ;;      Params:         0       0       0
  3496 ;;      Locals:         1       0       0
  3497 ;;      Temps:          0       0       0
  3498 ;;      Totals:         1       0       0
  3499 ;;Total ram usage:        1 bytes
  3500 ;; Hardware stack levels used: 1
  3501 ;; Hardware stack levels required when called: 2
  3502 ;; This function calls:
  3503 ;;		Nothing
  3504 ;; This function is called by:
  3505 ;;		_menuLoop
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text12
  3510   001D2A                     __ptext12:
  3511                           	callstack 0
  3512   001D2A                     _isPressed:
  3513                           	callstack 27
  3514                           
  3515                           ;Keypad.c: 166:  return pressed && (stateSMS == 1);
  3516                           
  3517                           ;incstack = 0
  3518   001D2A  0E00               	movlw	0
  3519   001D2C  6E4B               	movwf	_isPressed$1105^0,c
  3520   001D2E  502D               	movf	_pressed^0,w,c
  3521   001D30  B4D8               	btfsc	status,2,c
  3522   001D32  D005               	goto	l728
  3523   001D34  0429               	decf	_stateSMS^0,w,c
  3524   001D36  A4D8               	btfss	status,2,c
  3525   001D38  D002               	goto	l728
  3526   001D3A  0E01               	movlw	1
  3527   001D3C  6E4B               	movwf	_isPressed$1105^0,c
  3528   001D3E                     l728:
  3529   001D3E  504B               	movf	_isPressed$1105^0,w,c
  3530   001D40  0012               	return		;funcret
  3531   001D42                     __end_of_isPressed:
  3532                           	callstack 0
  3533                           
  3534 ;; *************** function _isIdle *****************
  3535 ;; Defined at:
  3536 ;;		line 204 in file "EEPROM.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1
  3550 ;;      Params:         0       0       0
  3551 ;;      Locals:         0       0       0
  3552 ;;      Temps:          0       0       0
  3553 ;;      Totals:         0       0       0
  3554 ;;Total ram usage:        0 bytes
  3555 ;; Hardware stack levels used: 1
  3556 ;; Hardware stack levels required when called: 2
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_menuLoop
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text13
  3565   00009C                     __ptext13:
  3566                           	callstack 0
  3567   00009C                     _isIdle:
  3568                           	callstack 27
  3569                           
  3570                           ;EEPROM.c: 205:     return state == 0;
  3571                           
  3572                           ;incstack = 0
  3573   00009C  5028               	movf	_state@EEPROM$F1455^0,w,c
  3574   00009E  A4D8               	btfss	status,2,c
  3575   0000A0  D002               	goto	u2790
  3576   0000A2  0E01               	movlw	1
  3577   0000A4  0012               	return	
  3578   0000A6                     u2790:
  3579   0000A6  0E00               	movlw	0
  3580   0000A8  0012               	return		;funcret
  3581   0000AA                     __end_of_isIdle:
  3582                           	callstack 0
  3583                           
  3584 ;; *************** function _getNumRecordings *****************
  3585 ;; Defined at:
  3586 ;;		line 221 in file "EEPROM.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      unsigned char 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1
  3600 ;;      Params:         0       0       0
  3601 ;;      Locals:         4       0       0
  3602 ;;      Temps:          0       0       0
  3603 ;;      Totals:         4       0       0
  3604 ;;Total ram usage:        4 bytes
  3605 ;; Hardware stack levels used: 1
  3606 ;; Hardware stack levels required when called: 2
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_menuLoop
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text14
  3615   001A36                     __ptext14:
  3616                           	callstack 0
  3617   001A36                     _getNumRecordings:
  3618                           	callstack 27
  3619                           
  3620                           ;EEPROM.c: 222:     return (indexEEPROM > 8? 7 : (indexEEPROM == 0? 0: indexEEPROM-1));
  3621                           
  3622                           ;incstack = 0
  3623   001A36  0E09               	movlw	9
  3624   001A38  6026               	cpfslt	_indexEEPROM^0,c
  3625   001A3A  D013               	goto	l3574
  3626   001A3C  5026               	movf	_indexEEPROM^0,w,c
  3627   001A3E  B4D8               	btfsc	status,2,c
  3628   001A40  D007               	goto	l3570
  3629   001A42  0EFF               	movlw	255
  3630   001A44  2426               	addwf	_indexEEPROM^0,w,c
  3631   001A46  6E4D               	movwf	_getNumRecordings$1493^0,c
  3632   001A48  6A4E               	clrf	(_getNumRecordings$1493+1)^0,c
  3633   001A4A  0EFF               	movlw	255
  3634   001A4C  224E               	addwfc	(_getNumRecordings$1493+1)^0,f,c
  3635   001A4E  D004               	goto	l3572
  3636   001A50                     l3570:
  3637   001A50  0E00               	movlw	0
  3638   001A52  6E4E               	movwf	(_getNumRecordings$1493+1)^0,c
  3639   001A54  0E00               	movlw	0
  3640   001A56  6E4D               	movwf	_getNumRecordings$1493^0,c
  3641   001A58                     l3572:
  3642   001A58  C04D  F04B         	movff	_getNumRecordings$1493,_getNumRecordings$1492
  3643   001A5C  C04E  F04C         	movff	_getNumRecordings$1493+1,_getNumRecordings$1492+1
  3644   001A60  D004               	goto	l937
  3645   001A62                     l3574:
  3646   001A62  0E00               	movlw	0
  3647   001A64  6E4C               	movwf	(_getNumRecordings$1492+1)^0,c
  3648   001A66  0E07               	movlw	7
  3649   001A68  6E4B               	movwf	_getNumRecordings$1492^0,c
  3650   001A6A                     l937:
  3651   001A6A  504B               	movf	_getNumRecordings$1492^0,w,c
  3652   001A6C  0012               	return		;funcret
  3653   001A6E                     __end_of_getNumRecordings:
  3654                           	callstack 0
  3655                           
  3656 ;; *************** function _getJoystickUp *****************
  3657 ;; Defined at:
  3658 ;;		line 73 in file "Joystick.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      unsigned char 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         1       0       0
  3674 ;;      Temps:          0       0       0
  3675 ;;      Totals:         1       0       0
  3676 ;;Total ram usage:        1 bytes
  3677 ;; Hardware stack levels used: 1
  3678 ;; Hardware stack levels required when called: 2
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_menuLoop
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text15
  3687   001D42                     __ptext15:
  3688                           	callstack 0
  3689   001D42                     _getJoystickUp:
  3690                           	callstack 27
  3691                           
  3692                           ;Joystick.c: 74:     return hasMoved && direction == 0;
  3693                           
  3694                           ;incstack = 0
  3695   001D42  0E00               	movlw	0
  3696   001D44  6E4B               	movwf	_getJoystickUp$243^0,c
  3697   001D46  5041               	movf	_hasMoved^0,w,c
  3698   001D48  B4D8               	btfsc	status,2,c
  3699   001D4A  D005               	goto	l101
  3700   001D4C  5042               	movf	_direction^0,w,c
  3701   001D4E  A4D8               	btfss	status,2,c
  3702   001D50  D002               	goto	l101
  3703   001D52  0E01               	movlw	1
  3704   001D54  6E4B               	movwf	_getJoystickUp$243^0,c
  3705   001D56                     l101:
  3706   001D56  504B               	movf	_getJoystickUp$243^0,w,c
  3707   001D58  0012               	return		;funcret
  3708   001D5A                     __end_of_getJoystickUp:
  3709                           	callstack 0
  3710                           
  3711 ;; *************** function _getJoystickDown *****************
  3712 ;; Defined at:
  3713 ;;		line 69 in file "Joystick.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      unsigned char 
  3720 ;; Registers used:
  3721 ;;		wreg, status,2, status,0
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1
  3727 ;;      Params:         0       0       0
  3728 ;;      Locals:         1       0       0
  3729 ;;      Temps:          0       0       0
  3730 ;;      Totals:         1       0       0
  3731 ;;Total ram usage:        1 bytes
  3732 ;; Hardware stack levels used: 1
  3733 ;; Hardware stack levels required when called: 2
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_menuLoop
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text16
  3742   001D5A                     __ptext16:
  3743                           	callstack 0
  3744   001D5A                     _getJoystickDown:
  3745                           	callstack 27
  3746                           
  3747                           ;Joystick.c: 70:     return hasMoved && direction == 1;
  3748                           
  3749                           ;incstack = 0
  3750   001D5A  0E00               	movlw	0
  3751   001D5C  6E4B               	movwf	_getJoystickDown$241^0,c
  3752   001D5E  5041               	movf	_hasMoved^0,w,c
  3753   001D60  B4D8               	btfsc	status,2,c
  3754   001D62  D005               	goto	l96
  3755   001D64  0442               	decf	_direction^0,w,c
  3756   001D66  A4D8               	btfss	status,2,c
  3757   001D68  D002               	goto	l96
  3758   001D6A  0E01               	movlw	1
  3759   001D6C  6E4B               	movwf	_getJoystickDown$241^0,c
  3760   001D6E                     l96:
  3761   001D6E  504B               	movf	_getJoystickDown$241^0,w,c
  3762   001D70  0012               	return		;funcret
  3763   001D72                     __end_of_getJoystickDown:
  3764                           	callstack 0
  3765                           
  3766 ;; *************** function _getColumnAct *****************
  3767 ;; Defined at:
  3768 ;;		line 290 in file "LcTLCD.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      unsigned char 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1
  3782 ;;      Params:         0       0       0
  3783 ;;      Locals:         0       0       0
  3784 ;;      Temps:          0       0       0
  3785 ;;      Totals:         0       0       0
  3786 ;;Total ram usage:        0 bytes
  3787 ;; Hardware stack levels used: 1
  3788 ;; Hardware stack levels required when called: 2
  3789 ;; This function calls:
  3790 ;;		Nothing
  3791 ;; This function is called by:
  3792 ;;		_menuLoop
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text17
  3797   00012E                     __ptext17:
  3798                           	callstack 0
  3799   00012E                     _getColumnAct:
  3800                           	callstack 27
  3801                           
  3802                           ;LcTLCD.c: 291:     return ColumnAct;
  3803                           
  3804                           ;incstack = 0
  3805   00012E  503B               	movf	_ColumnAct^0,w,c
  3806   000130  0012               	return		;funcret
  3807   000132                     __end_of_getColumnAct:
  3808                           	callstack 0
  3809                           
  3810 ;; *************** function _getAvailable *****************
  3811 ;; Defined at:
  3812 ;;		line 211 in file "Keypad.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      unsigned char 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1
  3826 ;;      Params:         0       0       0
  3827 ;;      Locals:         0       0       0
  3828 ;;      Temps:          0       0       0
  3829 ;;      Totals:         0       0       0
  3830 ;;Total ram usage:        0 bytes
  3831 ;; Hardware stack levels used: 1
  3832 ;; Hardware stack levels required when called: 2
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_menuLoop
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text18
  3841   000132                     __ptext18:
  3842                           	callstack 0
  3843   000132                     _getAvailable:
  3844                           	callstack 27
  3845                           
  3846                           ;Keypad.c: 212:     return available;
  3847                           
  3848                           ;incstack = 0
  3849   000132  502B               	movf	_available^0,w,c
  3850   000134  0012               	return		;funcret
  3851   000136                     __end_of_getAvailable:
  3852                           	callstack 0
  3853                           
  3854 ;; *************** function _displayRecordings *****************
  3855 ;; Defined at:
  3856 ;;		line 198 in file "EEPROM.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  indexPositio    1    wreg     unsigned char 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  indexPositio    1    0[COMRAM] unsigned char 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      void 
  3863 ;; Registers used:
  3864 ;;		wreg, status,2
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1
  3870 ;;      Params:         0       0       0
  3871 ;;      Locals:         1       0       0
  3872 ;;      Temps:          0       0       0
  3873 ;;      Totals:         1       0       0
  3874 ;;Total ram usage:        1 bytes
  3875 ;; Hardware stack levels used: 1
  3876 ;; Hardware stack levels required when called: 2
  3877 ;; This function calls:
  3878 ;;		Nothing
  3879 ;; This function is called by:
  3880 ;;		_menuLoop
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text19
  3885   00007C                     __ptext19:
  3886                           	callstack 0
  3887   00007C                     _displayRecordings:
  3888                           	callstack 27
  3889                           
  3890                           ;incstack = 0
  3891                           ;displayRecordings@indexPosition stored from wreg
  3892   00007C  6E4B               	movwf	displayRecordings@indexPosition^0,c
  3893                           
  3894                           ;EEPROM.c: 199:     indexTemp = indexPosition;
  3895   00007E  C04B  F027         	movff	displayRecordings@indexPosition,_indexTemp
  3896                           
  3897                           ;EEPROM.c: 200:     data = 0;
  3898   000082  0E00               	movlw	0
  3899   000084  6E25               	movwf	_data^0,c
  3900                           
  3901                           ;EEPROM.c: 201:     state = 50;
  3902   000086  0E32               	movlw	50
  3903   000088  6E28               	movwf	_state@EEPROM$F1455^0,c
  3904   00008A  0012               	return		;funcret
  3905   00008C                     __end_of_displayRecordings:
  3906                           	callstack 0
  3907                           
  3908 ;; *************** function _displayMenu *****************
  3909 ;; Defined at:
  3910 ;;		line 475 in file "Menu.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  string          1   23[COMRAM] PTR unsigned char 
  3913 ;;		 -> MAINMENU(138), 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1
  3925 ;;      Params:         1       0       0
  3926 ;;      Locals:         0       0       0
  3927 ;;      Temps:          2       0       0
  3928 ;;      Totals:         3       0       0
  3929 ;;Total ram usage:        3 bytes
  3930 ;; Hardware stack levels used: 1
  3931 ;; Hardware stack levels required when called: 6
  3932 ;; This function calls:
  3933 ;;		_LcPutChar
  3934 ;;		_moveOneRow
  3935 ;; This function is called by:
  3936 ;;		_menuLoop
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text20
  3941   0016CC                     __ptext20:
  3942                           	callstack 0
  3943   0016CC                     _displayMenu:
  3944                           	callstack 23
  3945                           
  3946                           ;Menu.c: 476:     if(scrollIndex < 16){
  3947                           
  3948                           ;incstack = 0
  3949   0016CC  BE1E               	btfsc	(_scrollIndex+1)^0,7,c
  3950   0016CE  D006               	goto	u2740
  3951   0016D0  501E               	movf	(_scrollIndex+1)^0,w,c
  3952   0016D2  E131               	bnz	l3516
  3953   0016D4  0E10               	movlw	16
  3954   0016D6  5C1D               	subwf	_scrollIndex^0,w,c
  3955   0016D8  B0D8               	btfsc	status,0,c
  3956   0016DA  D02D               	goto	l3516
  3957   0016DC                     u2740:
  3958                           
  3959                           ;Menu.c: 477:         if((scrollIndex + scroll) >= 22) {
  3960   0016DC  501F               	movf	_scroll^0,w,c
  3961   0016DE  241D               	addwf	_scrollIndex^0,w,c
  3962   0016E0  6E63               	movwf	??_displayMenu^0,c
  3963   0016E2  5020               	movf	(_scroll+1)^0,w,c
  3964   0016E4  201E               	addwfc	(_scrollIndex+1)^0,w,c
  3965   0016E6  6E64               	movwf	(??_displayMenu+1)^0,c
  3966   0016E8  BE64               	btfsc	(??_displayMenu+1)^0,7,c
  3967   0016EA  D015               	goto	l3510
  3968   0016EC  5064               	movf	(??_displayMenu+1)^0,w,c
  3969   0016EE  E104               	bnz	u2750
  3970   0016F0  0E16               	movlw	22
  3971   0016F2  5C63               	subwf	??_displayMenu^0,w,c
  3972   0016F4  A0D8               	btfss	status,0,c
  3973   0016F6  D00F               	goto	l3510
  3974   0016F8                     u2750:
  3975                           
  3976                           ;Menu.c: 478:             LcPutChar(string[(scrollIndex + scroll) - 22]);
  3977   0016F8  5062               	movf	displayMenu@string^0,w,c
  3978   0016FA  241D               	addwf	_scrollIndex^0,w,c
  3979   0016FC  241F               	addwf	_scroll^0,w,c
  3980   0016FE  6E63               	movwf	??_displayMenu^0,c
  3981   001700  0EEA               	movlw	234
  3982   001702  2663               	addwf	??_displayMenu^0,f,c
  3983   001704  C063  FFF6         	movff	??_displayMenu,tblptrl
  3984   001708                     	if	1	;There is more than 1 active tblptr byte
  3985   001708  0E02               	movlw	high __smallconst
  3986   00170A  6EF7               	movwf	tblptrh,c
  3987   00170C                     	endif
  3988   00170C                     	if	0	;tblptru may be non-zero
  3989   00170C                     	endif
  3990   00170C                     	if	0	;tblptru may be non-zero
  3991   00170C                     	endif
  3992   00170C  0008               	tblrd		*
  3993   00170E  50F5               	movf	tablat,w,c
  3994   001710  ECEA  F00A         	call	_LcPutChar
  3995                           
  3996                           ;Menu.c: 479:         } else {
  3997   001714  D00C               	goto	l3512
  3998   001716                     l3510:
  3999                           
  4000                           ;Menu.c: 480:             LcPutChar(string[(scrollIndex + scroll)]);
  4001   001716  5062               	movf	displayMenu@string^0,w,c
  4002   001718  241D               	addwf	_scrollIndex^0,w,c
  4003   00171A  241F               	addwf	_scroll^0,w,c
  4004   00171C  6E63               	movwf	??_displayMenu^0,c
  4005   00171E  C063  FFF6         	movff	??_displayMenu,tblptrl
  4006   001722                     	if	1	;There is more than 1 active tblptr byte
  4007   001722  0E02               	movlw	high __smallconst
  4008   001724  6EF7               	movwf	tblptrh,c
  4009   001726                     	endif
  4010   001726                     	if	0	;tblptru may be non-zero
  4011   001726                     	endif
  4012   001726                     	if	0	;tblptru may be non-zero
  4013   001726                     	endif
  4014   001726  0008               	tblrd		*
  4015   001728  50F5               	movf	tablat,w,c
  4016   00172A  ECEA  F00A         	call	_LcPutChar
  4017   00172E                     l3512:
  4018                           
  4019                           ;Menu.c: 482:         colIndex++;
  4020   00172E  2A39               	incf	_colIndex^0,f,c
  4021                           
  4022                           ;Menu.c: 483:         scrollIndex++;
  4023   001730  4A1D               	infsnz	_scrollIndex^0,f,c
  4024   001732  2A1E               	incf	(_scrollIndex+1)^0,f,c
  4025                           
  4026                           ;Menu.c: 484:     }else{
  4027   001734  0012               	return	
  4028   001736                     l3516:
  4029                           
  4030                           ;Menu.c: 485:         moveOneRow();
  4031   001736  EC88  F00E         	call	_moveOneRow	;wreg free
  4032   00173A  0012               	return		;funcret
  4033   00173C                     __end_of_displayMenu:
  4034                           	callstack 0
  4035                           
  4036 ;; *************** function _moveOneRow *****************
  4037 ;; Defined at:
  4038 ;;		line 489 in file "Menu.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;		None
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1
  4052 ;;      Params:         0       0       0
  4053 ;;      Locals:         0       0       0
  4054 ;;      Temps:          0       0       0
  4055 ;;      Totals:         0       0       0
  4056 ;;Total ram usage:        0 bytes
  4057 ;; Hardware stack levels used: 1
  4058 ;; Hardware stack levels required when called: 5
  4059 ;; This function calls:
  4060 ;;		_LcGotoXY
  4061 ;; This function is called by:
  4062 ;;		_lcdAddString
  4063 ;;		_displayMenu
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text21
  4068   001D10                     __ptext21:
  4069                           	callstack 0
  4070   001D10                     _moveOneRow:
  4071                           	callstack 23
  4072                           
  4073                           ;Menu.c: 490:     rowIndex++;
  4074                           
  4075                           ;incstack = 0
  4076   001D10  2A3A               	incf	_rowIndex^0,f,c
  4077                           
  4078                           ;Menu.c: 491:     LcGotoXY(0,1);
  4079   001D12  0E01               	movlw	1
  4080   001D14  6E59               	movwf	LcGotoXY@Row^0,c
  4081   001D16  0E00               	movlw	0
  4082   001D18  ECB2  F009         	call	_LcGotoXY
  4083                           
  4084                           ;Menu.c: 492:     colIndex = 0;
  4085   001D1C  0E00               	movlw	0
  4086   001D1E  6E39               	movwf	_colIndex^0,c
  4087                           
  4088                           ;Menu.c: 493:     scrollIndex = 0;
  4089   001D20  0E00               	movlw	0
  4090   001D22  6E1E               	movwf	(_scrollIndex+1)^0,c
  4091   001D24  0E00               	movlw	0
  4092   001D26  6E1D               	movwf	_scrollIndex^0,c
  4093   001D28  0012               	return		;funcret
  4094   001D2A                     __end_of_moveOneRow:
  4095                           	callstack 0
  4096                           
  4097 ;; *************** function ___awmod *****************
  4098 ;; Defined at:
  4099 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awmod.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  dividend        2    0[COMRAM] int 
  4102 ;;  divisor         2    2[COMRAM] int 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  sign            1    5[COMRAM] unsigned char 
  4105 ;;  counter         1    4[COMRAM] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  2    0[COMRAM] int 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1
  4115 ;;      Params:         4       0       0
  4116 ;;      Locals:         2       0       0
  4117 ;;      Temps:          0       0       0
  4118 ;;      Totals:         6       0       0
  4119 ;;Total ram usage:        6 bytes
  4120 ;; Hardware stack levels used: 1
  4121 ;; Hardware stack levels required when called: 2
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_menuLoop
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text22
  4130   00173C                     __ptext22:
  4131                           	callstack 0
  4132   00173C                     ___awmod:
  4133                           	callstack 27
  4134                           
  4135                           ;incstack = 0
  4136   00173C  0E00               	movlw	0
  4137   00173E  6E50               	movwf	___awmod@sign^0,c
  4138   001740  AE4C               	btfss	(___awmod@dividend+1)^0,7,c
  4139   001742  D006               	goto	l3636
  4140   001744  6C4B               	negf	___awmod@dividend^0,c
  4141   001746  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  4142   001748  B0D8               	btfsc	status,0,c
  4143   00174A  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  4144   00174C  0E01               	movlw	1
  4145   00174E  6E50               	movwf	___awmod@sign^0,c
  4146   001750                     l3636:
  4147   001750  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  4148   001752  D004               	goto	l3640
  4149   001754  6C4D               	negf	___awmod@divisor^0,c
  4150   001756  1E4E               	comf	(___awmod@divisor+1)^0,f,c
  4151   001758  B0D8               	btfsc	status,0,c
  4152   00175A  2A4E               	incf	(___awmod@divisor+1)^0,f,c
  4153   00175C                     l3640:
  4154   00175C  504D               	movf	___awmod@divisor^0,w,c
  4155   00175E  104E               	iorwf	(___awmod@divisor+1)^0,w,c
  4156   001760  B4D8               	btfsc	status,2,c
  4157   001762  D018               	goto	l3656
  4158   001764  0E01               	movlw	1
  4159   001766  6E4F               	movwf	___awmod@counter^0,c
  4160   001768  D004               	goto	l3646
  4161   00176A                     l3644:
  4162   00176A  90D8               	bcf	status,0,c
  4163   00176C  364D               	rlcf	___awmod@divisor^0,f,c
  4164   00176E  364E               	rlcf	(___awmod@divisor+1)^0,f,c
  4165   001770  2A4F               	incf	___awmod@counter^0,f,c
  4166   001772                     l3646:
  4167   001772  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  4168   001774  D7FA               	goto	l3644
  4169   001776                     u2880:
  4170   001776  504D               	movf	___awmod@divisor^0,w,c
  4171   001778  5C4B               	subwf	___awmod@dividend^0,w,c
  4172   00177A  504E               	movf	(___awmod@divisor+1)^0,w,c
  4173   00177C  584C               	subwfb	(___awmod@dividend+1)^0,w,c
  4174   00177E  A0D8               	btfss	status,0,c
  4175   001780  D004               	goto	l3652
  4176   001782  504D               	movf	___awmod@divisor^0,w,c
  4177   001784  5E4B               	subwf	___awmod@dividend^0,f,c
  4178   001786  504E               	movf	(___awmod@divisor+1)^0,w,c
  4179   001788  5A4C               	subwfb	(___awmod@dividend+1)^0,f,c
  4180   00178A                     l3652:
  4181   00178A  90D8               	bcf	status,0,c
  4182   00178C  324E               	rrcf	(___awmod@divisor+1)^0,f,c
  4183   00178E  324D               	rrcf	___awmod@divisor^0,f,c
  4184   001790  2E4F               	decfsz	___awmod@counter^0,f,c
  4185   001792  D7F1               	goto	u2880
  4186   001794                     l3656:
  4187   001794  5050               	movf	___awmod@sign^0,w,c
  4188   001796  B4D8               	btfsc	status,2,c
  4189   001798  D004               	goto	l3660
  4190   00179A  6C4B               	negf	___awmod@dividend^0,c
  4191   00179C  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  4192   00179E  B0D8               	btfsc	status,0,c
  4193   0017A0  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  4194   0017A2                     l3660:
  4195   0017A2  C04B  F04B         	movff	___awmod@dividend,?___awmod
  4196   0017A6  C04C  F04C         	movff	___awmod@dividend+1,?___awmod+1
  4197   0017AA  0012               	return		;funcret
  4198   0017AC                     __end_of___awmod:
  4199                           	callstack 0
  4200                           
  4201 ;; *************** function _KeGetCharValue *****************
  4202 ;; Defined at:
  4203 ;;		line 186 in file "Keypad.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  generic         1    5[COMRAM] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      unsigned char 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1
  4217 ;;      Params:         0       0       0
  4218 ;;      Locals:         1       0       0
  4219 ;;      Temps:          2       0       0
  4220 ;;      Totals:         3       0       0
  4221 ;;Total ram usage:        3 bytes
  4222 ;; Hardware stack levels used: 1
  4223 ;; Hardware stack levels required when called: 4
  4224 ;; This function calls:
  4225 ;;		_KeGetGenericValue
  4226 ;; This function is called by:
  4227 ;;		_menuLoop
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text23
  4232   0011EC                     __ptext23:
  4233                           	callstack 0
  4234   0011EC                     _KeGetCharValue:
  4235                           	callstack 25
  4236                           
  4237                           ;Keypad.c: 187:     char generic = KeGetGenericValue();
  4238                           
  4239                           ;incstack = 0
  4240   0011EC  EC6B  F00E         	call	_KeGetGenericValue	;wreg free
  4241   0011F0  6E50               	movwf	KeGetCharValue@generic^0,c
  4242                           
  4243                           ;Keypad.c: 188:     if ((generic - '0' >= 2 && generic - '0' <= 9) || (generic - '0' == 
      +                          0)){
  4244   0011F2  0ED0               	movlw	208
  4245   0011F4  2450               	addwf	KeGetCharValue@generic^0,w,c
  4246   0011F6  6E4E               	movwf	??_KeGetCharValue^0,c
  4247   0011F8  6A4F               	clrf	(??_KeGetCharValue+1)^0,c
  4248   0011FA  0EFF               	movlw	255
  4249   0011FC  224F               	addwfc	(??_KeGetCharValue+1)^0,f,c
  4250   0011FE  504F               	movf	(??_KeGetCharValue+1)^0,w,c
  4251   001200  E104               	bnz	u2660
  4252   001202  0E02               	movlw	2
  4253   001204  5C4E               	subwf	??_KeGetCharValue^0,w,c
  4254   001206  A0D8               	btfss	status,0,c
  4255   001208  D00C               	goto	u2670
  4256   00120A                     u2660:
  4257   00120A  0ED0               	movlw	208
  4258   00120C  2450               	addwf	KeGetCharValue@generic^0,w,c
  4259   00120E  6E4E               	movwf	??_KeGetCharValue^0,c
  4260   001210  6A4F               	clrf	(??_KeGetCharValue+1)^0,c
  4261   001212  0EFF               	movlw	255
  4262   001214  224F               	addwfc	(??_KeGetCharValue+1)^0,f,c
  4263   001216  504F               	movf	(??_KeGetCharValue+1)^0,w,c
  4264   001218  E104               	bnz	u2670
  4265   00121A  0E0A               	movlw	10
  4266   00121C  5C4E               	subwf	??_KeGetCharValue^0,w,c
  4267   00121E  A0D8               	btfss	status,0,c
  4268   001220  D00A               	goto	u2680
  4269   001222                     u2670:
  4270   001222  0ED0               	movlw	208
  4271   001224  2450               	addwf	KeGetCharValue@generic^0,w,c
  4272   001226  6E4E               	movwf	??_KeGetCharValue^0,c
  4273   001228  6A4F               	clrf	(??_KeGetCharValue+1)^0,c
  4274   00122A  0EFF               	movlw	255
  4275   00122C  224F               	addwfc	(??_KeGetCharValue+1)^0,f,c
  4276   00122E  504E               	movf	??_KeGetCharValue^0,w,c
  4277   001230  104F               	iorwf	(??_KeGetCharValue+1)^0,w,c
  4278   001232  A4D8               	btfss	status,2,c
  4279   001234  D03C               	goto	l3500
  4280   001236                     u2680:
  4281                           
  4282                           ;Keypad.c: 189:         if(generic - '0' == 0){
  4283   001236  0ED0               	movlw	208
  4284   001238  2450               	addwf	KeGetCharValue@generic^0,w,c
  4285   00123A  6E4E               	movwf	??_KeGetCharValue^0,c
  4286   00123C  6A4F               	clrf	(??_KeGetCharValue+1)^0,c
  4287   00123E  0EFF               	movlw	255
  4288   001240  224F               	addwfc	(??_KeGetCharValue+1)^0,f,c
  4289   001242  504E               	movf	??_KeGetCharValue^0,w,c
  4290   001244  104F               	iorwf	(??_KeGetCharValue+1)^0,w,c
  4291   001246  A4D8               	btfss	status,2,c
  4292   001248  D010               	goto	l3492
  4293                           
  4294                           ;Keypad.c: 190:             if(numPresses > 2){
  4295   00124A  0E02               	movlw	2
  4296   00124C  642C               	cpfsgt	_numPresses^0,c
  4297   00124E  D002               	goto	l3478
  4298                           
  4299                           ;Keypad.c: 191:                 numPresses = 1;
  4300   001250  0E01               	movlw	1
  4301   001252  6E2C               	movwf	_numPresses^0,c
  4302   001254                     l3478:
  4303                           
  4304                           ;Keypad.c: 193:             if(numPresses == 1){
  4305   001254  042C               	decf	_numPresses^0,w,c
  4306   001256  A4D8               	btfss	status,2,c
  4307   001258  D002               	goto	l3486
  4308                           
  4309                           ;Keypad.c: 194:                 return ' ';
  4310   00125A  0E20               	movlw	32
  4311   00125C  0012               	return	
  4312   00125E                     l3486:
  4313   00125E  0E02               	movlw	2
  4314   001260  182C               	xorwf	_numPresses^0,w,c
  4315   001262  A4D8               	btfss	status,2,c
  4316   001264  D015               	goto	l3496
  4317                           
  4318                           ;Keypad.c: 196:                 return '0';
  4319   001266  0E30               	movlw	48
  4320   001268  0012               	return	
  4321   00126A                     l3492:
  4322   00126A  5050               	movf	KeGetCharValue@generic^0,w,c
  4323   00126C  0D06               	mullw	6
  4324   00126E  50F3               	movf	243,w,c
  4325   001270  0F97               	addlw	low _SMSTABLE
  4326   001272  242C               	addwf	_numPresses^0,w,c
  4327   001274  6E4E               	movwf	??_KeGetCharValue^0,c
  4328   001276  0ED9               	movlw	217
  4329   001278  264E               	addwf	??_KeGetCharValue^0,f,c
  4330   00127A  C04E  FFF6         	movff	??_KeGetCharValue,tblptrl
  4331   00127E                     	if	1	;There is more than 1 active tblptr byte
  4332   00127E  0E02               	movlw	high __smallconst
  4333   001280  6EF7               	movwf	tblptrh,c
  4334   001282                     	endif
  4335   001282                     	if	0	;tblptru may be non-zero
  4336   001282                     	endif
  4337   001282                     	if	0	;tblptru may be non-zero
  4338   001282                     	endif
  4339   001282  0008               	tblrd		*
  4340   001284  50F5               	movf	tablat,w,c
  4341   001286  0900               	iorlw	0
  4342   001288  A4D8               	btfss	status,2,c
  4343   00128A  D002               	goto	l3496
  4344                           
  4345                           ;Keypad.c: 199:             numPresses = 1;
  4346   00128C  0E01               	movlw	1
  4347   00128E  6E2C               	movwf	_numPresses^0,c
  4348   001290                     l3496:
  4349                           
  4350                           ;Keypad.c: 201:         return SMSTABLE[generic - '0' - 1][(numPresses-1)];
  4351   001290  5050               	movf	KeGetCharValue@generic^0,w,c
  4352   001292  0D06               	mullw	6
  4353   001294  50F3               	movf	243,w,c
  4354   001296  0F97               	addlw	low _SMSTABLE
  4355   001298  242C               	addwf	_numPresses^0,w,c
  4356   00129A  6E4E               	movwf	??_KeGetCharValue^0,c
  4357   00129C  0ED9               	movlw	217
  4358   00129E  264E               	addwf	??_KeGetCharValue^0,f,c
  4359   0012A0  C04E  FFF6         	movff	??_KeGetCharValue,tblptrl
  4360   0012A4                     	if	1	;There is more than 1 active tblptr byte
  4361   0012A4  0E02               	movlw	high __smallconst
  4362   0012A6  6EF7               	movwf	tblptrh,c
  4363   0012A8                     	endif
  4364   0012A8                     	if	0	;tblptru may be non-zero
  4365   0012A8                     	endif
  4366   0012A8                     	if	0	;tblptru may be non-zero
  4367   0012A8                     	endif
  4368   0012A8  0008               	tblrd		*
  4369   0012AA  50F5               	movf	tablat,w,c
  4370   0012AC  0012               	return	
  4371   0012AE                     l3500:
  4372                           
  4373                           ;Keypad.c: 203:     return generic;
  4374   0012AE  5050               	movf	KeGetCharValue@generic^0,w,c
  4375   0012B0  0012               	return		;funcret
  4376   0012B2                     __end_of_KeGetCharValue:
  4377                           	callstack 0
  4378                           
  4379 ;; *************** function _KeGetGenericValue *****************
  4380 ;; Defined at:
  4381 ;;		line 206 in file "Keypad.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1
  4395 ;;      Params:         0       0       0
  4396 ;;      Locals:         0       0       0
  4397 ;;      Temps:          1       0       0
  4398 ;;      Totals:         1       0       0
  4399 ;;Total ram usage:        1 bytes
  4400 ;; Hardware stack levels used: 1
  4401 ;; Hardware stack levels required when called: 3
  4402 ;; This function calls:
  4403 ;;		_getColumn
  4404 ;; This function is called by:
  4405 ;;		_menuLoop
  4406 ;;		_smsLoop
  4407 ;;		_KeGetCharValue
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text24
  4412   001CD6                     __ptext24:
  4413                           	callstack 0
  4414   001CD6                     _KeGetGenericValue:
  4415                           	callstack 26
  4416                           
  4417                           ;Keypad.c: 207:     return TABLE[(row*3)+getColumn()];
  4418                           
  4419                           ;incstack = 0
  4420   001CD6  ECF1  F00D         	call	_getColumn	;wreg free
  4421   001CDA  501B               	movf	_row^0,w,c
  4422   001CDC  0D03               	mullw	3
  4423   001CDE  50F3               	movf	243,w,c
  4424   001CE0  0F01               	addlw	low _TABLE
  4425   001CE2  244B               	addwf	?_getColumn^0,w,c
  4426   001CE4  6E4D               	movwf	??_KeGetGenericValue^0,c
  4427   001CE6  C04D  FFF6         	movff	??_KeGetGenericValue,tblptrl
  4428   001CEA                     	if	1	;There is more than 1 active tblptr byte
  4429   001CEA  0E02               	movlw	high __smallconst
  4430   001CEC  6EF7               	movwf	tblptrh,c
  4431   001CEE                     	endif
  4432   001CEE                     	if	0	;tblptru may be non-zero
  4433   001CEE                     	endif
  4434   001CEE                     	if	0	;tblptru may be non-zero
  4435   001CEE                     	endif
  4436   001CEE  0008               	tblrd		*
  4437   001CF0  50F5               	movf	tablat,w,c
  4438   001CF2  0012               	return		;funcret
  4439   001CF4                     __end_of_KeGetGenericValue:
  4440                           	callstack 0
  4441                           
  4442 ;; *************** function _getColumn *****************
  4443 ;; Defined at:
  4444 ;;		line 169 in file "Keypad.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  2    0[COMRAM] int 
  4451 ;; Registers used:
  4452 ;;		wreg, status,2
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1
  4458 ;;      Params:         2       0       0
  4459 ;;      Locals:         0       0       0
  4460 ;;      Temps:          0       0       0
  4461 ;;      Totals:         2       0       0
  4462 ;;Total ram usage:        2 bytes
  4463 ;; Hardware stack levels used: 1
  4464 ;; Hardware stack levels required when called: 2
  4465 ;; This function calls:
  4466 ;;		Nothing
  4467 ;; This function is called by:
  4468 ;;		_KeGetGenericValue
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text25
  4473   001BE2                     __ptext25:
  4474                           	callstack 0
  4475   001BE2                     _getColumn:
  4476                           	callstack 26
  4477                           
  4478                           ;Keypad.c: 170:     if (!PORTBbits.RB3){ return 0;}
  4479                           
  4480                           ;incstack = 0
  4481   001BE2  B681               	btfsc	129,3,c	;volatile
  4482   001BE4  D005               	goto	l732
  4483   001BE6  0E00               	movlw	0
  4484   001BE8  6E4C               	movwf	(?_getColumn+1)^0,c
  4485   001BEA  0E00               	movlw	0
  4486   001BEC  6E4B               	movwf	?_getColumn^0,c
  4487   001BEE  0012               	return	
  4488   001BF0                     l732:
  4489                           
  4490                           ;Keypad.c: 171:     if (!PORTBbits.RB1){ return 1;}
  4491   001BF0  B281               	btfsc	129,1,c	;volatile
  4492   001BF2  D005               	goto	l3342
  4493   001BF4  0E00               	movlw	0
  4494   001BF6  6E4C               	movwf	(?_getColumn+1)^0,c
  4495   001BF8  0E01               	movlw	1
  4496   001BFA  6E4B               	movwf	?_getColumn^0,c
  4497   001BFC  0012               	return	
  4498   001BFE                     l3342:
  4499                           
  4500                           ;Keypad.c: 172:     return 2;
  4501   001BFE  0E00               	movlw	0
  4502   001C00  6E4C               	movwf	(?_getColumn+1)^0,c
  4503   001C02  0E02               	movlw	2
  4504   001C04  6E4B               	movwf	?_getColumn^0,c
  4505   001C06  0012               	return		;funcret
  4506   001C08                     __end_of_getColumn:
  4507                           	callstack 0
  4508                           
  4509 ;; *************** function _memoryLoop *****************
  4510 ;; Defined at:
  4511 ;;		line 19 in file "EEPROM.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1
  4525 ;;      Params:         0       0       0
  4526 ;;      Locals:         6       0       0
  4527 ;;      Temps:          2       0       0
  4528 ;;      Totals:         8       0       0
  4529 ;;Total ram usage:        8 bytes
  4530 ;; Hardware stack levels used: 1
  4531 ;; Hardware stack levels required when called: 6
  4532 ;; This function calls:
  4533 ;;		_LcCursorOff
  4534 ;;		_LcCursorOn
  4535 ;;		_LcGotoXY
  4536 ;;		_LcPutChar
  4537 ;;		___lbdiv
  4538 ;;		___lbmod
  4539 ;;		_checkRX
  4540 ;;		_checkTX
  4541 ;;		_displayTimestamp
  4542 ;;		_finishedDisplay
  4543 ;;		_getRX
  4544 ;;		_getSysTimestamp
  4545 ;;		_readData
  4546 ;;		_saveData
  4547 ;;		_setTX
  4548 ;;		_updateSysTimestamp
  4549 ;; This function is called by:
  4550 ;;		_main
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text26
  4555   000AD6                     __ptext26:
  4556                           	callstack 0
  4557   000AD6                     _memoryLoop:
  4558                           	callstack 24
  4559                           
  4560                           ;EEPROM.c: 20:     switch(state){
  4561                           
  4562                           ;incstack = 0
  4563   000AD6  D189               	goto	l4194
  4564   000AD8                     l4040:
  4565                           
  4566                           ;EEPROM.c: 27:             recordings[indexEEPROM%8].timestamp = getSysTimestamp();
  4567   000AD8  EC81  F000         	call	_getSysTimestamp	;wreg free
  4568   000ADC  5026               	movf	_indexEEPROM^0,w,c
  4569   000ADE  0B07               	andlw	7
  4570   000AE0  0D03               	mullw	3
  4571   000AE2  50F3               	movf	243,w,c
  4572   000AE4  0FDD               	addlw	low (_recordings+1)
  4573   000AE6  6ED9               	movwf	fsr2l,c
  4574   000AE8  6ADA               	clrf	fsr2h,c
  4575   000AEA  C04B  FFDE         	movff	?_getSysTimestamp,postinc2
  4576   000AEE  C04C  FFDD         	movff	?_getSysTimestamp+1,postdec2
  4577                           
  4578                           ;EEPROM.c: 28:             if(EECON1bits.WR == 0){
  4579   000AF2  B2A6               	btfsc	166,1,c	;volsfr
  4580   000AF4  0012               	return	
  4581                           
  4582                           ;EEPROM.c: 29:                 saveData(0x20 + indexEEPROM%8, recordings[indexEEPROM%8].
      +                          timestamp.minutes);
  4583   000AF6  5026               	movf	_indexEEPROM^0,w,c
  4584   000AF8  0B07               	andlw	7
  4585   000AFA  0D03               	mullw	3
  4586   000AFC  50F3               	movf	243,w,c
  4587   000AFE  0FDD               	addlw	low (_recordings+1)
  4588   000B00  6ED9               	movwf	fsr2l,c
  4589   000B02  6ADA               	clrf	fsr2h,c
  4590   000B04  50DF               	movf	indf2,w,c
  4591   000B06  6E4B               	movwf	saveData@data^0,c
  4592   000B08  5026               	movf	_indexEEPROM^0,w,c
  4593   000B0A  0B07               	andlw	7
  4594   000B0C  0F20               	addlw	32
  4595   000B0E  EC29  F00E         	call	_saveData
  4596                           
  4597                           ;EEPROM.c: 30:                 state = 3;
  4598   000B12  0E03               	movlw	3
  4599   000B14  6E28               	movwf	_state@EEPROM$F1455^0,c
  4600   000B16  0012               	return	
  4601   000B18                     l857:
  4602                           
  4603                           ;EEPROM.c: 34:             if(EECON1bits.WR == 0){
  4604   000B18  B2A6               	btfsc	166,1,c	;volsfr
  4605   000B1A  0012               	return	
  4606                           
  4607                           ;EEPROM.c: 35:                 saveData(0x30 + indexEEPROM%8, recordings[indexEEPROM%8].
      +                          timestamp.seconds);
  4608   000B1C  5026               	movf	_indexEEPROM^0,w,c
  4609   000B1E  0B07               	andlw	7
  4610   000B20  0D03               	mullw	3
  4611   000B22  50F3               	movf	243,w,c
  4612   000B24  0FDE               	addlw	low (_recordings+2)
  4613   000B26  6ED9               	movwf	fsr2l,c
  4614   000B28  6ADA               	clrf	fsr2h,c
  4615   000B2A  50DF               	movf	indf2,w,c
  4616   000B2C  6E4B               	movwf	saveData@data^0,c
  4617   000B2E  5026               	movf	_indexEEPROM^0,w,c
  4618   000B30  0B07               	andlw	7
  4619   000B32  0F30               	addlw	48
  4620   000B34  EC29  F00E         	call	_saveData
  4621                           
  4622                           ;EEPROM.c: 36:                 state = 4;
  4623   000B38  0E04               	movlw	4
  4624   000B3A  6E28               	movwf	_state@EEPROM$F1455^0,c
  4625   000B3C  0012               	return	
  4626   000B3E                     l4052:
  4627                           
  4628                           ;EEPROM.c: 40:             if(checkTX( )){
  4629   000B3E  EC69  F000         	call	_checkTX	;wreg free
  4630   000B42  0900               	iorlw	0
  4631   000B44  B4D8               	btfsc	status,2,c
  4632   000B46  0012               	return	
  4633                           
  4634                           ;EEPROM.c: 41:                 setTX(recordings[indexEEPROM%8].timestamp.minutes);
  4635   000B48  5026               	movf	_indexEEPROM^0,w,c
  4636   000B4A  0B07               	andlw	7
  4637   000B4C  0D03               	mullw	3
  4638   000B4E  50F3               	movf	243,w,c
  4639   000B50  0FDD               	addlw	low (_recordings+1)
  4640   000B52  6ED9               	movwf	fsr2l,c
  4641   000B54  6ADA               	clrf	fsr2h,c
  4642   000B56  50DF               	movf	indf2,w,c
  4643   000B58  EC8A  F000         	call	_setTX
  4644                           
  4645                           ;EEPROM.c: 42:                 state = 5;
  4646   000B5C  0E05               	movlw	5
  4647   000B5E  6E28               	movwf	_state@EEPROM$F1455^0,c
  4648   000B60  0012               	return	
  4649   000B62                     l4058:
  4650                           
  4651                           ;EEPROM.c: 46:             if(checkTX()){
  4652   000B62  EC69  F000         	call	_checkTX	;wreg free
  4653   000B66  0900               	iorlw	0
  4654   000B68  B4D8               	btfsc	status,2,c
  4655   000B6A  0012               	return	
  4656                           
  4657                           ;EEPROM.c: 47:                 setTX(recordings[indexEEPROM%8].timestamp.seconds);
  4658   000B6C  5026               	movf	_indexEEPROM^0,w,c
  4659   000B6E  0B07               	andlw	7
  4660   000B70  0D03               	mullw	3
  4661   000B72  50F3               	movf	243,w,c
  4662   000B74  0FDE               	addlw	low (_recordings+2)
  4663   000B76  6ED9               	movwf	fsr2l,c
  4664   000B78  6ADA               	clrf	fsr2h,c
  4665   000B7A  50DF               	movf	indf2,w,c
  4666   000B7C  EC8A  F000         	call	_setTX
  4667   000B80                     l4062:
  4668                           
  4669                           ;EEPROM.c: 48:                 state = 0;
  4670   000B80  0E00               	movlw	0
  4671   000B82  6E28               	movwf	_state@EEPROM$F1455^0,c
  4672   000B84  0012               	return	
  4673   000B86                     l4064:
  4674                           
  4675                           ;EEPROM.c: 54:             if(checkRX()){
  4676   000B86  EC6F  F000         	call	_checkRX	;wreg free
  4677   000B8A  0900               	iorlw	0
  4678   000B8C  B4D8               	btfsc	status,2,c
  4679   000B8E  0012               	return	
  4680                           
  4681                           ;EEPROM.c: 55:                 recordings[indexEEPROM%8].index = getRX();
  4682   000B90  5026               	movf	_indexEEPROM^0,w,c
  4683   000B92  0B07               	andlw	7
  4684   000B94  0D03               	mullw	3
  4685   000B96  50F3               	movf	243,w,c
  4686   000B98  0FDC               	addlw	low _recordings
  4687   000B9A  6ED9               	movwf	fsr2l,c
  4688   000B9C  6ADA               	clrf	fsr2h,c
  4689   000B9E  EC9B  F000         	call	_getRX	;wreg free
  4690   000BA2  6EDF               	movwf	indf2,c
  4691                           
  4692                           ;EEPROM.c: 56:                 state = 11;
  4693   000BA4  0E0B               	movlw	11
  4694   000BA6  6E28               	movwf	_state@EEPROM$F1455^0,c
  4695   000BA8  0012               	return	
  4696   000BAA                     l865:
  4697                           
  4698                           ;EEPROM.c: 60:             if(EECON1bits.WR == 0){
  4699   000BAA  B2A6               	btfsc	166,1,c	;volsfr
  4700   000BAC  0012               	return	
  4701                           
  4702                           ;EEPROM.c: 61:                 saveData(0x10 + indexEEPROM%8, recordings[indexEEPROM%8].
      +                          index);
  4703   000BAE  5026               	movf	_indexEEPROM^0,w,c
  4704   000BB0  0B07               	andlw	7
  4705   000BB2  0D03               	mullw	3
  4706   000BB4  50F3               	movf	243,w,c
  4707   000BB6  0FDC               	addlw	low _recordings
  4708   000BB8  6ED9               	movwf	fsr2l,c
  4709   000BBA  6ADA               	clrf	fsr2h,c
  4710   000BBC  50DF               	movf	indf2,w,c
  4711   000BBE  6E4B               	movwf	saveData@data^0,c
  4712   000BC0  5026               	movf	_indexEEPROM^0,w,c
  4713   000BC2  0B07               	andlw	7
  4714   000BC4  0F10               	addlw	16
  4715   000BC6  EC29  F00E         	call	_saveData
  4716                           
  4717                           ;EEPROM.c: 62:                 indexEEPROM++;
  4718   000BCA  2A26               	incf	_indexEEPROM^0,f,c
  4719                           
  4720                           ;EEPROM.c: 63:                 state = 12;
  4721   000BCC  0E0C               	movlw	12
  4722   000BCE  6E28               	movwf	_state@EEPROM$F1455^0,c
  4723   000BD0  0012               	return	
  4724   000BD2                     l867:
  4725                           
  4726                           ;EEPROM.c: 67:             if(EECON1bits.WR == 0){
  4727   000BD2  B2A6               	btfsc	166,1,c	;volsfr
  4728   000BD4  0012               	return	
  4729                           
  4730                           ;EEPROM.c: 68:                 saveData(0, (indexEEPROM > 8? 8 : indexEEPROM));
  4731   000BD6  0E09               	movlw	9
  4732   000BD8  6026               	cpfslt	_indexEEPROM^0,c
  4733   000BDA  D004               	goto	l4080
  4734   000BDC  C026  F064         	movff	_indexEEPROM,_memoryLoop$1475
  4735   000BE0  6A65               	clrf	(_memoryLoop$1475+1)^0,c
  4736   000BE2  D004               	goto	l4082
  4737   000BE4                     l4080:
  4738   000BE4  0E00               	movlw	0
  4739   000BE6  6E65               	movwf	(_memoryLoop$1475+1)^0,c
  4740   000BE8  0E08               	movlw	8
  4741   000BEA  6E64               	movwf	_memoryLoop$1475^0,c
  4742   000BEC                     l4082:
  4743   000BEC  C064  F04B         	movff	_memoryLoop$1475,saveData@data
  4744   000BF0  0E00               	movlw	0
  4745   000BF2  EC29  F00E         	call	_saveData
  4746   000BF6  D7C4               	goto	l4062
  4747   000BF8                     l4086:
  4748                           
  4749                           ;EEPROM.c: 75:             if(checkTX()){
  4750   000BF8  EC69  F000         	call	_checkTX	;wreg free
  4751   000BFC  0900               	iorlw	0
  4752   000BFE  B4D8               	btfsc	status,2,c
  4753   000C00  0012               	return	
  4754                           
  4755                           ;EEPROM.c: 76:                 setTX(recordings[indexTemp].index);
  4756   000C02  5027               	movf	_indexTemp^0,w,c
  4757   000C04  0D03               	mullw	3
  4758   000C06  50F3               	movf	243,w,c
  4759   000C08  0FDC               	addlw	low _recordings
  4760   000C0A  6ED9               	movwf	fsr2l,c
  4761   000C0C  6ADA               	clrf	fsr2h,c
  4762   000C0E  50DF               	movf	indf2,w,c
  4763   000C10  EC8A  F000         	call	_setTX
  4764   000C14  D7B5               	goto	l4062
  4765   000C16                     l875:
  4766                           
  4767                           ;EEPROM.c: 83:             if(EECON1bits.WR == 0){
  4768   000C16  B2A6               	btfsc	166,1,c	;volsfr
  4769   000C18  D011               	goto	l4102
  4770                           
  4771                           ;EEPROM.c: 84:                 indexTemp = readData(0);
  4772   000C1A  0E00               	movlw	0
  4773   000C1C  EC46  F000         	call	_readData
  4774   000C20  6E27               	movwf	_indexTemp^0,c
  4775                           
  4776                           ;EEPROM.c: 85:                 state = indexTemp == 0xFF? 0:41;
  4777   000C22  2827               	incf	_indexTemp^0,w,c
  4778   000C24  B4D8               	btfsc	status,2,c
  4779   000C26  D004               	goto	l4098
  4780   000C28  0E00               	movlw	0
  4781   000C2A  6E67               	movwf	(_memoryLoop$1476+1)^0,c
  4782   000C2C  0E29               	movlw	41
  4783   000C2E  D003               	goto	L3
  4784   000C30                     l4098:
  4785   000C30  0E00               	movlw	0
  4786   000C32  6E67               	movwf	(_memoryLoop$1476+1)^0,c
  4787   000C34  0E00               	movlw	0
  4788   000C36                     L3:
  4789   000C36  6E66               	movwf	_memoryLoop$1476^0,c
  4790   000C38  C066  F028         	movff	_memoryLoop$1476,_state@EEPROM$F1455
  4791   000C3C                     l4102:
  4792                           
  4793                           ;EEPROM.c: 88:             if(EECON1bits.WR == 0){
  4794   000C3C  B2A6               	btfsc	166,1,c	;volsfr
  4795   000C3E  D00D               	goto	l4108
  4796                           
  4797                           ;EEPROM.c: 89:                 recordings[indexEEPROM].index = readData(0x10 + indexEEPR
      +                          OM);
  4798   000C40  5026               	movf	_indexEEPROM^0,w,c
  4799   000C42  0D03               	mullw	3
  4800   000C44  50F3               	movf	243,w,c
  4801   000C46  0FDC               	addlw	low _recordings
  4802   000C48  6ED9               	movwf	fsr2l,c
  4803   000C4A  6ADA               	clrf	fsr2h,c
  4804   000C4C  5026               	movf	_indexEEPROM^0,w,c
  4805   000C4E  0F10               	addlw	16
  4806   000C50  EC46  F000         	call	_readData
  4807   000C54  6EDF               	movwf	indf2,c
  4808                           
  4809                           ;EEPROM.c: 90:                 state = 42;
  4810   000C56  0E2A               	movlw	42
  4811   000C58  6E28               	movwf	_state@EEPROM$F1455^0,c
  4812   000C5A                     l4108:
  4813                           
  4814                           ;EEPROM.c: 93:             if(EECON1bits.WR == 0){
  4815   000C5A  B2A6               	btfsc	166,1,c	;volsfr
  4816   000C5C  0012               	return	
  4817                           
  4818                           ;EEPROM.c: 94:                 recordings[indexEEPROM].timestamp.minutes = readData(0x20
      +                           + indexEEPROM);
  4819   000C5E  5026               	movf	_indexEEPROM^0,w,c
  4820   000C60  0D03               	mullw	3
  4821   000C62  50F3               	movf	243,w,c
  4822   000C64  0FDD               	addlw	low (_recordings+1)
  4823   000C66  6ED9               	movwf	fsr2l,c
  4824   000C68  6ADA               	clrf	fsr2h,c
  4825   000C6A  5026               	movf	_indexEEPROM^0,w,c
  4826   000C6C  0F20               	addlw	32
  4827   000C6E  EC46  F000         	call	_readData
  4828   000C72  6EDF               	movwf	indf2,c
  4829                           
  4830                           ;EEPROM.c: 95:                 state = 43;
  4831   000C74  0E2B               	movlw	43
  4832   000C76  6E28               	movwf	_state@EEPROM$F1455^0,c
  4833   000C78  0012               	return	
  4834   000C7A                     l885:
  4835                           
  4836                           ;EEPROM.c: 99:             if(EECON1bits.WR == 0){
  4837   000C7A  B2A6               	btfsc	166,1,c	;volsfr
  4838   000C7C  0012               	return	
  4839                           
  4840                           ;EEPROM.c: 100:                 recordings[indexEEPROM].timestamp.seconds = readData(0x3
      +                          0 + indexEEPROM);
  4841   000C7E  5026               	movf	_indexEEPROM^0,w,c
  4842   000C80  0D03               	mullw	3
  4843   000C82  50F3               	movf	243,w,c
  4844   000C84  0FDE               	addlw	low (_recordings+2)
  4845   000C86  6ED9               	movwf	fsr2l,c
  4846   000C88  6ADA               	clrf	fsr2h,c
  4847   000C8A  5026               	movf	_indexEEPROM^0,w,c
  4848   000C8C  0F30               	addlw	48
  4849   000C8E  EC46  F000         	call	_readData
  4850   000C92  6EDF               	movwf	indf2,c
  4851                           
  4852                           ;EEPROM.c: 101:                 indexEEPROM++;
  4853   000C94  2A26               	incf	_indexEEPROM^0,f,c
  4854                           
  4855                           ;EEPROM.c: 102:                 state = 44;
  4856   000C96  0E2C               	movlw	44
  4857   000C98  6E28               	movwf	_state@EEPROM$F1455^0,c
  4858   000C9A  0012               	return	
  4859   000C9C                     l4120:
  4860                           
  4861                           ;EEPROM.c: 106:             if(indexEEPROM == indexTemp){
  4862   000C9C  5027               	movf	_indexTemp^0,w,c
  4863   000C9E  1826               	xorwf	_indexEEPROM^0,w,c
  4864   000CA0  B4D8               	btfsc	status,2,c
  4865   000CA2  D76E               	goto	l4062
  4866                           
  4867                           ;EEPROM.c: 109:                 state = 41;
  4868   000CA4  0E29               	movlw	41
  4869   000CA6  6E28               	movwf	_state@EEPROM$F1455^0,c
  4870   000CA8  0012               	return	
  4871   000CAA                     l4126:
  4872                           
  4873                           ;EEPROM.c: 116:             LcPutChar('I');
  4874   000CAA  0E49               	movlw	73
  4875   000CAC  ECEA  F00A         	call	_LcPutChar
  4876                           
  4877                           ;EEPROM.c: 117:             if(recordings[indexTemp].index/10 == 0){
  4878   000CB0  0E0A               	movlw	10
  4879   000CB2  6E4B               	movwf	___lbdiv@divisor^0,c
  4880   000CB4  5027               	movf	_indexTemp^0,w,c
  4881   000CB6  0D03               	mullw	3
  4882   000CB8  50F3               	movf	243,w,c
  4883   000CBA  0FDC               	addlw	low _recordings
  4884   000CBC  6ED9               	movwf	fsr2l,c
  4885   000CBE  6ADA               	clrf	fsr2h,c
  4886   000CC0  50DF               	movf	indf2,w,c
  4887   000CC2  ECFE  F00C         	call	___lbdiv
  4888   000CC6  0900               	iorlw	0
  4889   000CC8  A4D8               	btfss	status,2,c
  4890   000CCA  D003               	goto	l4130
  4891   000CCC                     u3540:
  4892                           
  4893                           ;EEPROM.c: 118:                 state = 52;
  4894   000CCC  0E34               	movlw	52
  4895   000CCE  6E28               	movwf	_state@EEPROM$F1455^0,c
  4896                           
  4897                           ;EEPROM.c: 119:             }else{
  4898   000CD0  0012               	return	
  4899   000CD2                     l4130:
  4900                           
  4901                           ;EEPROM.c: 120:                 state = 51;
  4902   000CD2  0E33               	movlw	51
  4903   000CD4  6E28               	movwf	_state@EEPROM$F1455^0,c
  4904   000CD6  0012               	return	
  4905   000CD8                     l4132:
  4906                           
  4907                           ;EEPROM.c: 124:             LcPutChar((recordings[indexTemp].index/10) + '0');
  4908   000CD8  0E0A               	movlw	10
  4909   000CDA  6E4B               	movwf	___lbdiv@divisor^0,c
  4910   000CDC  5027               	movf	_indexTemp^0,w,c
  4911   000CDE  0D03               	mullw	3
  4912   000CE0  50F3               	movf	243,w,c
  4913   000CE2  0FDC               	addlw	low _recordings
  4914   000CE4  6ED9               	movwf	fsr2l,c
  4915   000CE6  6ADA               	clrf	fsr2h,c
  4916   000CE8  50DF               	movf	indf2,w,c
  4917   000CEA  ECFE  F00C         	call	___lbdiv
  4918   000CEE  0F30               	addlw	48
  4919   000CF0  ECEA  F00A         	call	_LcPutChar
  4920   000CF4  D7EB               	goto	u3540
  4921   000CF6                     l4136:
  4922                           
  4923                           ;EEPROM.c: 128:             LcPutChar((recordings[indexTemp].index%10) + '0');
  4924   000CF6  0E0A               	movlw	10
  4925   000CF8  6E4B               	movwf	___lbmod@divisor^0,c
  4926   000CFA  5027               	movf	_indexTemp^0,w,c
  4927   000CFC  0D03               	mullw	3
  4928   000CFE  50F3               	movf	243,w,c
  4929   000D00  0FDC               	addlw	low _recordings
  4930   000D02  6ED9               	movwf	fsr2l,c
  4931   000D04  6ADA               	clrf	fsr2h,c
  4932   000D06  50DF               	movf	indf2,w,c
  4933   000D08  ECC8  F00D         	call	___lbmod
  4934   000D0C  0F30               	addlw	48
  4935   000D0E  ECEA  F00A         	call	_LcPutChar
  4936                           
  4937                           ;EEPROM.c: 129:             state = 53;
  4938   000D12  0E35               	movlw	53
  4939   000D14  6E28               	movwf	_state@EEPROM$F1455^0,c
  4940                           
  4941                           ;EEPROM.c: 130:             break;
  4942   000D16  0012               	return	
  4943   000D18                     l4140:
  4944                           
  4945                           ;EEPROM.c: 132:             LcPutChar(' ');
  4946   000D18  0E20               	movlw	32
  4947   000D1A  ECEA  F00A         	call	_LcPutChar
  4948                           
  4949                           ;EEPROM.c: 133:             updateSysTimestamp(recordings[indexTemp].timestamp,indexTemp
      +                           + 1);
  4950   000D1E  5027               	movf	_indexTemp^0,w,c
  4951   000D20  0D03               	mullw	3
  4952   000D22  50F3               	movf	243,w,c
  4953   000D24  0FDD               	addlw	low (_recordings+1)
  4954   000D26  6ED9               	movwf	fsr2l,c
  4955   000D28  6ADA               	clrf	fsr2h,c
  4956   000D2A  CFDE F04C          	movff	postinc2,updateSysTimestamp@time
  4957   000D2E  CFDD F04D          	movff	postdec2,updateSysTimestamp@time+1
  4958   000D32  2827               	incf	_indexTemp^0,w,c
  4959   000D34  6E4E               	movwf	updateSysTimestamp@i^0,c
  4960   000D36  ECB2  F00D         	call	_updateSysTimestamp	;wreg free
  4961                           
  4962                           ;EEPROM.c: 134:             state = 54;
  4963   000D3A  0E36               	movlw	54
  4964   000D3C  6E28               	movwf	_state@EEPROM$F1455^0,c
  4965                           
  4966                           ;EEPROM.c: 135:             break;
  4967   000D3E  0012               	return	
  4968   000D40                     l4144:
  4969                           
  4970                           ;EEPROM.c: 137:             LcPutChar('-');
  4971   000D40  0E2D               	movlw	45
  4972   000D42  ECEA  F00A         	call	_LcPutChar
  4973                           
  4974                           ;EEPROM.c: 138:             state = 55;
  4975   000D46  0E37               	movlw	55
  4976   000D48  6E28               	movwf	_state@EEPROM$F1455^0,c
  4977                           
  4978                           ;EEPROM.c: 139:             break;
  4979   000D4A  0012               	return	
  4980   000D4C                     l4148:
  4981                           
  4982                           ;EEPROM.c: 141:             LcPutChar(' ');
  4983   000D4C  0E20               	movlw	32
  4984   000D4E  ECEA  F00A         	call	_LcPutChar
  4985                           
  4986                           ;EEPROM.c: 142:             state = 56;
  4987   000D52  0E38               	movlw	56
  4988   000D54  6E28               	movwf	_state@EEPROM$F1455^0,c
  4989                           
  4990                           ;EEPROM.c: 143:             break;
  4991   000D56  0012               	return	
  4992   000D58                     l4152:
  4993                           
  4994                           ;EEPROM.c: 145:             displayTimestamp();
  4995   000D58  EC91  F000         	call	_displayTimestamp	;wreg free
  4996                           
  4997                           ;EEPROM.c: 146:             state = 57;
  4998   000D5C  0E39               	movlw	57
  4999   000D5E  6E28               	movwf	_state@EEPROM$F1455^0,c
  5000                           
  5001                           ;EEPROM.c: 147:             break;
  5002   000D60  0012               	return	
  5003   000D62                     l4156:
  5004                           
  5005                           ;EEPROM.c: 149:             if(finishedDisplay() && !data && indexTemp != (indexEEPROM >
      +                           8? 7 : indexEEPROM - 1)){
  5006   000D62  EC55  F000         	call	_finishedDisplay	;wreg free
  5007   000D66  0900               	iorlw	0
  5008   000D68  B4D8               	btfsc	status,2,c
  5009   000D6A  D023               	goto	l4176
  5010   000D6C  5025               	movf	_data^0,w,c
  5011   000D6E  A4D8               	btfss	status,2,c
  5012   000D70  D020               	goto	l4176
  5013   000D72  0E09               	movlw	9
  5014   000D74  6026               	cpfslt	_indexEEPROM^0,c
  5015   000D76  D007               	goto	l4164
  5016   000D78  0EFF               	movlw	255
  5017   000D7A  2426               	addwf	_indexEEPROM^0,w,c
  5018   000D7C  6E68               	movwf	_memoryLoop$1478^0,c
  5019   000D7E  6A69               	clrf	(_memoryLoop$1478+1)^0,c
  5020   000D80  0EFF               	movlw	255
  5021   000D82  2269               	addwfc	(_memoryLoop$1478+1)^0,f,c
  5022   000D84  D004               	goto	l4166
  5023   000D86                     l4164:
  5024   000D86  0E00               	movlw	0
  5025   000D88  6E69               	movwf	(_memoryLoop$1478+1)^0,c
  5026   000D8A  0E07               	movlw	7
  5027   000D8C  6E68               	movwf	_memoryLoop$1478^0,c
  5028   000D8E                     l4166:
  5029   000D8E  5027               	movf	_indexTemp^0,w,c
  5030   000D90  6E62               	movwf	??_memoryLoop^0,c
  5031   000D92  6A63               	clrf	(??_memoryLoop+1)^0,c
  5032   000D94  5068               	movf	_memoryLoop$1478^0,w,c
  5033   000D96  1862               	xorwf	??_memoryLoop^0,w,c
  5034   000D98  E104               	bnz	u3580
  5035   000D9A  5069               	movf	(_memoryLoop$1478+1)^0,w,c
  5036   000D9C  1863               	xorwf	(??_memoryLoop+1)^0,w,c
  5037   000D9E  B4D8               	btfsc	status,2,c
  5038   000DA0  D008               	goto	l4176
  5039   000DA2                     u3580:
  5040                           
  5041                           ;EEPROM.c: 150:                 LcCursorOn();
  5042   000DA2  EC75  F000         	call	_LcCursorOn	;wreg free
  5043                           
  5044                           ;EEPROM.c: 151:                 data = 1;
  5045   000DA6  0E01               	movlw	1
  5046   000DA8  6E25               	movwf	_data^0,c
  5047                           
  5048                           ;EEPROM.c: 152:                 state = 58;
  5049   000DAA  0E3A               	movlw	58
  5050   000DAC  6E28               	movwf	_state@EEPROM$F1455^0,c
  5051                           
  5052                           ;EEPROM.c: 153:                 indexTemp++;
  5053   000DAE  2A27               	incf	_indexTemp^0,f,c
  5054                           
  5055                           ;EEPROM.c: 154:             }else if(finishedDisplay()){
  5056   000DB0  0012               	return	
  5057   000DB2                     l4176:
  5058   000DB2  EC55  F000         	call	_finishedDisplay	;wreg free
  5059   000DB6  0900               	iorlw	0
  5060   000DB8  B4D8               	btfsc	status,2,c
  5061   000DBA  0012               	return	
  5062                           
  5063                           ;EEPROM.c: 155:                 data = 0;
  5064   000DBC  0E00               	movlw	0
  5065   000DBE  6E25               	movwf	_data^0,c
  5066                           
  5067                           ;EEPROM.c: 156:                 state = 0;
  5068   000DC0  0E00               	movlw	0
  5069   000DC2  6E28               	movwf	_state@EEPROM$F1455^0,c
  5070   000DC4  0012               	return	
  5071   000DC6                     l4180:
  5072                           
  5073                           ;EEPROM.c: 160:             LcCursorOn();
  5074   000DC6  EC75  F000         	call	_LcCursorOn	;wreg free
  5075                           
  5076                           ;EEPROM.c: 161:             state = 59;
  5077   000DCA  0E3B               	movlw	59
  5078   000DCC  6E28               	movwf	_state@EEPROM$F1455^0,c
  5079                           
  5080                           ;EEPROM.c: 162:             break;
  5081   000DCE  0012               	return	
  5082   000DD0                     l4184:
  5083                           
  5084                           ;EEPROM.c: 164:             LcGotoXY(0,1);
  5085   000DD0  0E01               	movlw	1
  5086   000DD2  6E59               	movwf	LcGotoXY@Row^0,c
  5087   000DD4  0E00               	movlw	0
  5088   000DD6  ECB2  F009         	call	_LcGotoXY
  5089                           
  5090                           ;EEPROM.c: 165:             state = 60;
  5091   000DDA  0E3C               	movlw	60
  5092   000DDC  6E28               	movwf	_state@EEPROM$F1455^0,c
  5093                           
  5094                           ;EEPROM.c: 166:             break;
  5095   000DDE  0012               	return	
  5096   000DE0                     l4188:
  5097                           
  5098                           ;EEPROM.c: 168:             LcCursorOff();
  5099   000DE0  EC7B  F000         	call	_LcCursorOff	;wreg free
  5100                           
  5101                           ;EEPROM.c: 169:             state = 50;
  5102   000DE4  0E32               	movlw	50
  5103   000DE6  6E28               	movwf	_state@EEPROM$F1455^0,c
  5104                           
  5105                           ;EEPROM.c: 170:             break;
  5106   000DE8  0012               	return	
  5107   000DEA                     l4194:
  5108   000DEA  5028               	movf	_state@EEPROM$F1455^0,w,c
  5109   000DEC  6E62               	movwf	??_memoryLoop^0,c
  5110   000DEE  6A63               	clrf	(??_memoryLoop+1)^0,c
  5111                           
  5112                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5113                           ; Switch size 1, requested type "simple"
  5114                           ; Number of cases is 1, Range of values is 0 to 0
  5115                           ; switch strategies available:
  5116                           ; Name         Instructions Cycles
  5117                           ; simple_byte            4     3 (average)
  5118                           ;	Chosen strategy is simple_byte
  5119   000DF0  5063               	movf	(??_memoryLoop+1)^0,w,c
  5120   000DF2  0A00               	xorlw	0	; case 0
  5121   000DF4  A4D8               	btfss	status,2,c
  5122   000DF6  0012               	return	
  5123                           
  5124                           ; Switch size 1, requested type "simple"
  5125                           ; Number of cases is 25, Range of values is 0 to 60
  5126                           ; switch strategies available:
  5127                           ; Name         Instructions Cycles
  5128                           ; simple_byte           76    39 (average)
  5129                           ;	Chosen strategy is simple_byte
  5130   000DF8  5062               	movf	??_memoryLoop^0,w,c
  5131   000DFA  0A00               	xorlw	0	; case 0
  5132   000DFC  B4D8               	btfsc	status,2,c
  5133   000DFE  0012               	return	
  5134   000E00  0A02               	xorlw	2	; case 2
  5135   000E02  B4D8               	btfsc	status,2,c
  5136   000E04  D669               	goto	l4040
  5137   000E06  0A01               	xorlw	1	; case 3
  5138   000E08  B4D8               	btfsc	status,2,c
  5139   000E0A  D686               	goto	l857
  5140   000E0C  0A07               	xorlw	7	; case 4
  5141   000E0E  B4D8               	btfsc	status,2,c
  5142   000E10  D696               	goto	l4052
  5143   000E12  0A01               	xorlw	1	; case 5
  5144   000E14  B4D8               	btfsc	status,2,c
  5145   000E16  D6A5               	goto	l4058
  5146   000E18  0A0F               	xorlw	15	; case 10
  5147   000E1A  B4D8               	btfsc	status,2,c
  5148   000E1C  D6B4               	goto	l4064
  5149   000E1E  0A01               	xorlw	1	; case 11
  5150   000E20  B4D8               	btfsc	status,2,c
  5151   000E22  D6C3               	goto	l865
  5152   000E24  0A07               	xorlw	7	; case 12
  5153   000E26  B4D8               	btfsc	status,2,c
  5154   000E28  D6D4               	goto	l867
  5155   000E2A  0A12               	xorlw	18	; case 30
  5156   000E2C  B4D8               	btfsc	status,2,c
  5157   000E2E  D6E4               	goto	l4086
  5158   000E30  0A36               	xorlw	54	; case 40
  5159   000E32  B4D8               	btfsc	status,2,c
  5160   000E34  D6F0               	goto	l875
  5161   000E36  0A01               	xorlw	1	; case 41
  5162   000E38  B4D8               	btfsc	status,2,c
  5163   000E3A  D700               	goto	l4102
  5164   000E3C  0A03               	xorlw	3	; case 42
  5165   000E3E  B4D8               	btfsc	status,2,c
  5166   000E40  D70C               	goto	l4108
  5167   000E42  0A01               	xorlw	1	; case 43
  5168   000E44  B4D8               	btfsc	status,2,c
  5169   000E46  D719               	goto	l885
  5170   000E48  0A07               	xorlw	7	; case 44
  5171   000E4A  B4D8               	btfsc	status,2,c
  5172   000E4C  D727               	goto	l4120
  5173   000E4E  0A1E               	xorlw	30	; case 50
  5174   000E50  B4D8               	btfsc	status,2,c
  5175   000E52  D72B               	goto	l4126
  5176   000E54  0A01               	xorlw	1	; case 51
  5177   000E56  B4D8               	btfsc	status,2,c
  5178   000E58  D73F               	goto	l4132
  5179   000E5A  0A07               	xorlw	7	; case 52
  5180   000E5C  B4D8               	btfsc	status,2,c
  5181   000E5E  D74B               	goto	l4136
  5182   000E60  0A01               	xorlw	1	; case 53
  5183   000E62  B4D8               	btfsc	status,2,c
  5184   000E64  D759               	goto	l4140
  5185   000E66  0A03               	xorlw	3	; case 54
  5186   000E68  B4D8               	btfsc	status,2,c
  5187   000E6A  D76A               	goto	l4144
  5188   000E6C  0A01               	xorlw	1	; case 55
  5189   000E6E  B4D8               	btfsc	status,2,c
  5190   000E70  D76D               	goto	l4148
  5191   000E72  0A0F               	xorlw	15	; case 56
  5192   000E74  B4D8               	btfsc	status,2,c
  5193   000E76  D770               	goto	l4152
  5194   000E78  0A01               	xorlw	1	; case 57
  5195   000E7A  B4D8               	btfsc	status,2,c
  5196   000E7C  D772               	goto	l4156
  5197   000E7E  0A03               	xorlw	3	; case 58
  5198   000E80  B4D8               	btfsc	status,2,c
  5199   000E82  D7A1               	goto	l4180
  5200   000E84  0A01               	xorlw	1	; case 59
  5201   000E86  B4D8               	btfsc	status,2,c
  5202   000E88  D7A3               	goto	l4184
  5203   000E8A  0A07               	xorlw	7	; case 60
  5204   000E8C  A4D8               	btfss	status,2,c
  5205   000E8E  0012               	return	
  5206   000E90  D7A7               	goto	l4188
  5207   000E92                     __end_of_memoryLoop:
  5208                           	callstack 0
  5209                           
  5210 ;; *************** function _updateSysTimestamp *****************
  5211 ;; Defined at:
  5212 ;;		line 59 in file "SystemTimer.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  time            2    1[COMRAM] struct .
  5215 ;;  i               1    3[COMRAM] unsigned char 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1
  5227 ;;      Params:         3       0       0
  5228 ;;      Locals:         0       0       0
  5229 ;;      Temps:          0       0       0
  5230 ;;      Totals:         3       0       0
  5231 ;;Total ram usage:        3 bytes
  5232 ;; Hardware stack levels used: 1
  5233 ;; Hardware stack levels required when called: 3
  5234 ;; This function calls:
  5235 ;;		_TI_ResetTics
  5236 ;; This function is called by:
  5237 ;;		_menuLoop
  5238 ;;		_memoryLoop
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text27
  5243   001B64                     __ptext27:
  5244                           	callstack 0
  5245   001B64                     _updateSysTimestamp:
  5246                           	callstack 26
  5247                           
  5248                           ;SystemTimer.c: 60:     index = i;
  5249                           
  5250                           ;incstack = 0
  5251   001B64  C04E  F030         	movff	updateSysTimestamp@i,_index@SystemTimer$F848
  5252                           
  5253                           ;SystemTimer.c: 61:     timestamp[index].minutes = time.minutes;
  5254   001B68  5030               	movf	_index@SystemTimer$F848^0,w,c
  5255   001B6A  0D02               	mullw	2
  5256   001B6C  50F3               	movf	243,w,c
  5257   001B6E  0F01               	addlw	low _timestamp
  5258   001B70  6ED9               	movwf	fsr2l,c
  5259   001B72  6ADA               	clrf	fsr2h,c
  5260   001B74  C04C  FFDF         	movff	updateSysTimestamp@time,indf2
  5261                           
  5262                           ;SystemTimer.c: 62:     timestamp[index].seconds = time.seconds;
  5263   001B78  5030               	movf	_index@SystemTimer$F848^0,w,c
  5264   001B7A  0D02               	mullw	2
  5265   001B7C  50F3               	movf	243,w,c
  5266   001B7E  0F02               	addlw	low (_timestamp+1)
  5267   001B80  6ED9               	movwf	fsr2l,c
  5268   001B82  6ADA               	clrf	fsr2h,c
  5269   001B84  C04D  FFDF         	movff	updateSysTimestamp@time+1,indf2
  5270                           
  5271                           ;SystemTimer.c: 63:     TI_ResetTics(sysTmr);
  5272   001B88  5046               	movf	_sysTmr^0,w,c
  5273   001B8A  ECDD  F00D         	call	_TI_ResetTics
  5274   001B8E  0012               	return		;funcret
  5275   001B90                     __end_of_updateSysTimestamp:
  5276                           	callstack 0
  5277                           
  5278 ;; *************** function _setTX *****************
  5279 ;; Defined at:
  5280 ;;		line 18 in file "SIO.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  letter          1    wreg     unsigned char 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  letter          1    0[COMRAM] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1
  5294 ;;      Params:         0       0       0
  5295 ;;      Locals:         1       0       0
  5296 ;;      Temps:          0       0       0
  5297 ;;      Totals:         1       0       0
  5298 ;;Total ram usage:        1 bytes
  5299 ;; Hardware stack levels used: 1
  5300 ;; Hardware stack levels required when called: 2
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_menuLoop
  5305 ;;		_memoryLoop
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text28
  5310   000114                     __ptext28:
  5311                           	callstack 0
  5312   000114                     _setTX:
  5313                           	callstack 27
  5314                           
  5315                           ;incstack = 0
  5316                           ;setTX@letter stored from wreg
  5317   000114  6E4B               	movwf	setTX@letter^0,c
  5318                           
  5319                           ;SIO.c: 19:     TXREG = letter;
  5320   000116  C04B  FFAD         	movff	setTX@letter,4013	;volatile
  5321   00011A  0012               	return		;funcret
  5322   00011C                     __end_of_setTX:
  5323                           	callstack 0
  5324                           
  5325 ;; *************** function _saveData *****************
  5326 ;; Defined at:
  5327 ;;		line 175 in file "EEPROM.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  address         1    wreg     unsigned char 
  5330 ;;  data            1    0[COMRAM] unsigned char 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  address         1    1[COMRAM] unsigned char 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1
  5342 ;;      Params:         1       0       0
  5343 ;;      Locals:         1       0       0
  5344 ;;      Temps:          0       0       0
  5345 ;;      Totals:         2       0       0
  5346 ;;Total ram usage:        2 bytes
  5347 ;; Hardware stack levels used: 1
  5348 ;; Hardware stack levels required when called: 2
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_memoryLoop
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text29
  5357   001C52                     __ptext29:
  5358                           	callstack 0
  5359   001C52                     _saveData:
  5360                           	callstack 27
  5361                           
  5362                           ;incstack = 0
  5363                           ;saveData@address stored from wreg
  5364   001C52  6E4C               	movwf	saveData@address^0,c
  5365                           
  5366                           ;EEPROM.c: 176:     EEADR = address;
  5367   001C54  C04C  FFA9         	movff	saveData@address,4009	;volatile
  5368                           
  5369                           ;EEPROM.c: 177:     EEDATA = data;
  5370   001C58  C04B  FFA8         	movff	saveData@data,4008	;volatile
  5371                           
  5372                           ;EEPROM.c: 178:     EECON1bits.EEPGD = 0;
  5373   001C5C  9EA6               	bcf	166,7,c	;volsfr
  5374                           
  5375                           ;EEPROM.c: 179:     EECON1bits.CFGS = 0;
  5376   001C5E  9CA6               	bcf	166,6,c	;volsfr
  5377                           
  5378                           ;EEPROM.c: 180:     EECON1bits.WREN = 1;
  5379   001C60  84A6               	bsf	166,2,c	;volsfr
  5380                           
  5381                           ;EEPROM.c: 181:     INTCONbits.GIE = 0;
  5382   001C62  9EF2               	bcf	242,7,c	;volatile
  5383                           
  5384                           ;EEPROM.c: 182:     EECON2 = 0x55;
  5385   001C64  0E55               	movlw	85
  5386   001C66  6EA7               	movwf	167,c	;volsfr
  5387                           
  5388                           ;EEPROM.c: 183:     EECON2 = 0xAA;
  5389   001C68  0EAA               	movlw	170
  5390   001C6A  6EA7               	movwf	167,c	;volsfr
  5391                           
  5392                           ;EEPROM.c: 184:     EECON1bits.WR = 1;
  5393   001C6C  82A6               	bsf	166,1,c	;volsfr
  5394                           
  5395                           ;EEPROM.c: 185:     INTCONbits.GIE = 1;
  5396   001C6E  8EF2               	bsf	242,7,c	;volatile
  5397                           
  5398                           ;EEPROM.c: 186:     EECON1bits.WREN = 0;
  5399   001C70  94A6               	bcf	166,2,c	;volsfr
  5400   001C72  0012               	return		;funcret
  5401   001C74                     __end_of_saveData:
  5402                           	callstack 0
  5403                           
  5404 ;; *************** function _readData *****************
  5405 ;; Defined at:
  5406 ;;		line 190 in file "EEPROM.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  address         1    wreg     unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  address         1    0[COMRAM] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      unsigned char 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1
  5420 ;;      Params:         0       0       0
  5421 ;;      Locals:         1       0       0
  5422 ;;      Temps:          0       0       0
  5423 ;;      Totals:         1       0       0
  5424 ;;Total ram usage:        1 bytes
  5425 ;; Hardware stack levels used: 1
  5426 ;; Hardware stack levels required when called: 2
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_memoryLoop
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text30
  5435   00008C                     __ptext30:
  5436                           	callstack 0
  5437   00008C                     _readData:
  5438                           	callstack 27
  5439                           
  5440                           ;incstack = 0
  5441                           ;readData@address stored from wreg
  5442   00008C  6E4B               	movwf	readData@address^0,c
  5443                           
  5444                           ;EEPROM.c: 191:     EEADR = address;
  5445   00008E  C04B  FFA9         	movff	readData@address,4009	;volatile
  5446                           
  5447                           ;EEPROM.c: 192:     EECON1bits.EEPGD = 0;
  5448   000092  9EA6               	bcf	166,7,c	;volsfr
  5449                           
  5450                           ;EEPROM.c: 193:     EECON1bits.CFGS = 0;
  5451   000094  9CA6               	bcf	166,6,c	;volsfr
  5452                           
  5453                           ;EEPROM.c: 194:     EECON1bits.RD = 1;
  5454   000096  80A6               	bsf	166,0,c	;volsfr
  5455                           
  5456                           ;EEPROM.c: 195:     return EEDATA;
  5457   000098  50A8               	movf	168,w,c	;volatile
  5458   00009A  0012               	return		;funcret
  5459   00009C                     __end_of_readData:
  5460                           	callstack 0
  5461                           
  5462 ;; *************** function _getSysTimestamp *****************
  5463 ;; Defined at:
  5464 ;;		line 79 in file "SystemTimer.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  2    0[COMRAM] struct .
  5471 ;; Registers used:
  5472 ;;		None
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1
  5478 ;;      Params:         2       0       0
  5479 ;;      Locals:         0       0       0
  5480 ;;      Temps:          0       0       0
  5481 ;;      Totals:         2       0       0
  5482 ;;Total ram usage:        2 bytes
  5483 ;; Hardware stack levels used: 1
  5484 ;; Hardware stack levels required when called: 2
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_memoryLoop
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text31
  5493   000102                     __ptext31:
  5494                           	callstack 0
  5495   000102                     _getSysTimestamp:
  5496                           	callstack 27
  5497                           
  5498                           ;SystemTimer.c: 80:     return timestamp[0];
  5499                           
  5500                           ;incstack = 0
  5501   000102  C001  F04B         	movff	_timestamp,?_getSysTimestamp
  5502   000106  C002  F04C         	movff	_timestamp+1,?_getSysTimestamp+1
  5503   00010A  0012               	return		;funcret
  5504   00010C                     __end_of_getSysTimestamp:
  5505                           	callstack 0
  5506                           
  5507 ;; *************** function _getRX *****************
  5508 ;; Defined at:
  5509 ;;		line 30 in file "SIO.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;		None
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;		None
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      unsigned char 
  5516 ;; Registers used:
  5517 ;;		wreg, status,2
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1
  5523 ;;      Params:         0       0       0
  5524 ;;      Locals:         0       0       0
  5525 ;;      Temps:          0       0       0
  5526 ;;      Totals:         0       0       0
  5527 ;;Total ram usage:        0 bytes
  5528 ;; Hardware stack levels used: 1
  5529 ;; Hardware stack levels required when called: 2
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_menuLoop
  5534 ;;		_memoryLoop
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text32
  5539   000136                     __ptext32:
  5540                           	callstack 0
  5541   000136                     _getRX:
  5542                           	callstack 27
  5543                           
  5544                           ;SIO.c: 31:     return RCREG;
  5545                           
  5546                           ;incstack = 0
  5547   000136  50AE               	movf	174,w,c	;volatile
  5548   000138  0012               	return		;funcret
  5549   00013A                     __end_of_getRX:
  5550                           	callstack 0
  5551                           
  5552 ;; *************** function _finishedDisplay *****************
  5553 ;; Defined at:
  5554 ;;		line 88 in file "SystemTimer.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;		None
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;		None
  5559 ;; Return value:  Size  Location     Type
  5560 ;;                  1    wreg      unsigned char 
  5561 ;; Registers used:
  5562 ;;		wreg, status,2
  5563 ;; Tracked objects:
  5564 ;;		On entry : 0/0
  5565 ;;		On exit  : 0/0
  5566 ;;		Unchanged: 0/0
  5567 ;; Data sizes:     COMRAM   BANK0   BANK1
  5568 ;;      Params:         0       0       0
  5569 ;;      Locals:         0       0       0
  5570 ;;      Temps:          0       0       0
  5571 ;;      Totals:         0       0       0
  5572 ;;Total ram usage:        0 bytes
  5573 ;; Hardware stack levels used: 1
  5574 ;; Hardware stack levels required when called: 2
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		_memoryLoop
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text33
  5583   0000AA                     __ptext33:
  5584                           	callstack 0
  5585   0000AA                     _finishedDisplay:
  5586                           	callstack 27
  5587                           
  5588                           ;SystemTimer.c: 89:     return state == 0;
  5589                           
  5590                           ;incstack = 0
  5591   0000AA  5031               	movf	_state@SystemTimer$F847^0,w,c
  5592   0000AC  A4D8               	btfss	status,2,c
  5593   0000AE  D002               	goto	u2830
  5594   0000B0  0E01               	movlw	1
  5595   0000B2  0012               	return	
  5596   0000B4                     u2830:
  5597   0000B4  0E00               	movlw	0
  5598   0000B6  0012               	return		;funcret
  5599   0000B8                     __end_of_finishedDisplay:
  5600                           	callstack 0
  5601                           
  5602 ;; *************** function _displayTimestamp *****************
  5603 ;; Defined at:
  5604 ;;		line 75 in file "SystemTimer.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;		None
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;		None
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1
  5618 ;;      Params:         0       0       0
  5619 ;;      Locals:         0       0       0
  5620 ;;      Temps:          0       0       0
  5621 ;;      Totals:         0       0       0
  5622 ;;Total ram usage:        0 bytes
  5623 ;; Hardware stack levels used: 1
  5624 ;; Hardware stack levels required when called: 2
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_menuLoop
  5629 ;;		_memoryLoop
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text34
  5634   000122                     __ptext34:
  5635                           	callstack 0
  5636   000122                     _displayTimestamp:
  5637                           	callstack 27
  5638                           
  5639                           ;SystemTimer.c: 76:     state = 8;
  5640                           
  5641                           ;incstack = 0
  5642   000122  0E08               	movlw	8
  5643   000124  6E31               	movwf	_state@SystemTimer$F847^0,c
  5644   000126  0012               	return		;funcret
  5645   000128                     __end_of_displayTimestamp:
  5646                           	callstack 0
  5647                           
  5648 ;; *************** function _checkTX *****************
  5649 ;; Defined at:
  5650 ;;		line 22 in file "SIO.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      unsigned char 
  5657 ;; Registers used:
  5658 ;;		wreg
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1
  5664 ;;      Params:         0       0       0
  5665 ;;      Locals:         0       0       0
  5666 ;;      Temps:          0       0       0
  5667 ;;      Totals:         0       0       0
  5668 ;;Total ram usage:        0 bytes
  5669 ;; Hardware stack levels used: 1
  5670 ;; Hardware stack levels required when called: 2
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_menuLoop
  5675 ;;		_memoryLoop
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text35
  5680   0000D2                     __ptext35:
  5681                           	callstack 0
  5682   0000D2                     _checkTX:
  5683                           	callstack 27
  5684                           
  5685                           ;SIO.c: 23:     return TXSTAbits.TRMT;
  5686                           
  5687                           ;incstack = 0
  5688   0000D2  A2AC               	btfss	172,1,c	;volatile
  5689   0000D4  D002               	goto	u2760
  5690   0000D6  0E01               	movlw	1
  5691   0000D8  0012               	return	
  5692   0000DA                     u2760:
  5693   0000DA  0E00               	movlw	0
  5694   0000DC  0012               	return		;funcret
  5695   0000DE                     __end_of_checkTX:
  5696                           	callstack 0
  5697                           
  5698 ;; *************** function _checkRX *****************
  5699 ;; Defined at:
  5700 ;;		line 26 in file "SIO.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;                  1    wreg      unsigned char 
  5707 ;; Registers used:
  5708 ;;		wreg
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1
  5714 ;;      Params:         0       0       0
  5715 ;;      Locals:         0       0       0
  5716 ;;      Temps:          0       0       0
  5717 ;;      Totals:         0       0       0
  5718 ;;Total ram usage:        0 bytes
  5719 ;; Hardware stack levels used: 1
  5720 ;; Hardware stack levels required when called: 2
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_menuLoop
  5725 ;;		_memoryLoop
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text36
  5730   0000DE                     __ptext36:
  5731                           	callstack 0
  5732   0000DE                     _checkRX:
  5733                           	callstack 27
  5734                           
  5735                           ;SIO.c: 27:     return PIR1bits.RCIF;
  5736                           
  5737                           ;incstack = 0
  5738   0000DE  AA9E               	btfss	158,5,c	;volatile
  5739   0000E0  D002               	goto	u2770
  5740   0000E2  0E01               	movlw	1
  5741   0000E4  0012               	return	
  5742   0000E6                     u2770:
  5743   0000E6  0E00               	movlw	0
  5744   0000E8  0012               	return		;funcret
  5745   0000EA                     __end_of_checkRX:
  5746                           	callstack 0
  5747                           
  5748 ;; *************** function ___lbmod *****************
  5749 ;; Defined at:
  5750 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lbmod.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  dividend        1    wreg     unsigned char 
  5753 ;;  divisor         1    0[COMRAM] unsigned char 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  dividend        1    1[COMRAM] unsigned char 
  5756 ;;  rem             1    3[COMRAM] unsigned char 
  5757 ;;  counter         1    2[COMRAM] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      unsigned char 
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1
  5767 ;;      Params:         1       0       0
  5768 ;;      Locals:         3       0       0
  5769 ;;      Temps:          0       0       0
  5770 ;;      Totals:         4       0       0
  5771 ;;Total ram usage:        4 bytes
  5772 ;; Hardware stack levels used: 1
  5773 ;; Hardware stack levels required when called: 2
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_sysTimerLoop
  5778 ;;		_memoryLoop
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text37
  5783   001B90                     __ptext37:
  5784                           	callstack 0
  5785   001B90                     ___lbmod:
  5786                           	callstack 27
  5787                           
  5788                           ;incstack = 0
  5789                           ;___lbmod@dividend stored from wreg
  5790   001B90  6E4C               	movwf	___lbmod@dividend^0,c
  5791   001B92  0E08               	movlw	8
  5792   001B94  6E4D               	movwf	___lbmod@counter^0,c
  5793   001B96  0E00               	movlw	0
  5794   001B98  6E4E               	movwf	___lbmod@rem^0,c
  5795   001B9A                     l3692:
  5796   001B9A  90D8               	bcf	status,0,c
  5797   001B9C  344C               	rlcf	___lbmod@dividend^0,w,c
  5798   001B9E  344E               	rlcf	___lbmod@rem^0,w,c
  5799   001BA0  6E4E               	movwf	___lbmod@rem^0,c
  5800   001BA2  90D8               	bcf	status,0,c
  5801   001BA4  364C               	rlcf	___lbmod@dividend^0,f,c
  5802   001BA6  504B               	movf	___lbmod@divisor^0,w,c
  5803   001BA8  5C4E               	subwf	___lbmod@rem^0,w,c
  5804   001BAA  A0D8               	btfss	status,0,c
  5805   001BAC  D002               	goto	l3700
  5806   001BAE  504B               	movf	___lbmod@divisor^0,w,c
  5807   001BB0  5E4E               	subwf	___lbmod@rem^0,f,c
  5808   001BB2                     l3700:
  5809   001BB2  2E4D               	decfsz	___lbmod@counter^0,f,c
  5810   001BB4  D7F2               	goto	l3692
  5811   001BB6  504E               	movf	___lbmod@rem^0,w,c
  5812   001BB8  0012               	return		;funcret
  5813   001BBA                     __end_of___lbmod:
  5814                           	callstack 0
  5815                           
  5816 ;; *************** function ___lbdiv *****************
  5817 ;; Defined at:
  5818 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lbdiv.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;  dividend        1    wreg     unsigned char 
  5821 ;;  divisor         1    0[COMRAM] unsigned char 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  dividend        1    1[COMRAM] unsigned char 
  5824 ;;  quotient        1    3[COMRAM] unsigned char 
  5825 ;;  counter         1    2[COMRAM] unsigned char 
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      unsigned char 
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1
  5835 ;;      Params:         1       0       0
  5836 ;;      Locals:         3       0       0
  5837 ;;      Temps:          0       0       0
  5838 ;;      Totals:         4       0       0
  5839 ;;Total ram usage:        4 bytes
  5840 ;; Hardware stack levels used: 1
  5841 ;; Hardware stack levels required when called: 2
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_sysTimerLoop
  5846 ;;		_memoryLoop
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text38
  5851   0019FC                     __ptext38:
  5852                           	callstack 0
  5853   0019FC                     ___lbdiv:
  5854                           	callstack 27
  5855                           
  5856                           ;incstack = 0
  5857                           ;___lbdiv@dividend stored from wreg
  5858   0019FC  6E4C               	movwf	___lbdiv@dividend^0,c
  5859   0019FE  0E00               	movlw	0
  5860   001A00  6E4E               	movwf	___lbdiv@quotient^0,c
  5861   001A02  504B               	movf	___lbdiv@divisor^0,w,c
  5862   001A04  B4D8               	btfsc	status,2,c
  5863   001A06  D015               	goto	l3686
  5864   001A08  0E01               	movlw	1
  5865   001A0A  6E4D               	movwf	___lbdiv@counter^0,c
  5866   001A0C  D003               	goto	l3674
  5867   001A0E                     l3670:
  5868   001A0E  90D8               	bcf	status,0,c
  5869   001A10  364B               	rlcf	___lbdiv@divisor^0,f,c
  5870   001A12  2A4D               	incf	___lbdiv@counter^0,f,c
  5871   001A14                     l3674:
  5872   001A14  AE4B               	btfss	___lbdiv@divisor^0,7,c
  5873   001A16  D7FB               	goto	l3670
  5874   001A18                     u2920:
  5875   001A18  90D8               	bcf	status,0,c
  5876   001A1A  364E               	rlcf	___lbdiv@quotient^0,f,c
  5877   001A1C  504B               	movf	___lbdiv@divisor^0,w,c
  5878   001A1E  5C4C               	subwf	___lbdiv@dividend^0,w,c
  5879   001A20  A0D8               	btfss	status,0,c
  5880   001A22  D003               	goto	l3682
  5881   001A24  504B               	movf	___lbdiv@divisor^0,w,c
  5882   001A26  5E4C               	subwf	___lbdiv@dividend^0,f,c
  5883   001A28  804E               	bsf	___lbdiv@quotient^0,0,c
  5884   001A2A                     l3682:
  5885   001A2A  90D8               	bcf	status,0,c
  5886   001A2C  324B               	rrcf	___lbdiv@divisor^0,f,c
  5887   001A2E  2E4D               	decfsz	___lbdiv@counter^0,f,c
  5888   001A30  D7F3               	goto	u2920
  5889   001A32                     l3686:
  5890   001A32  504E               	movf	___lbdiv@quotient^0,w,c
  5891   001A34  0012               	return		;funcret
  5892   001A36                     __end_of___lbdiv:
  5893                           	callstack 0
  5894                           
  5895 ;; *************** function _LcPutChar *****************
  5896 ;; Defined at:
  5897 ;;		line 161 in file "LcTLCD.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  c               1    wreg     unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  c               1   22[COMRAM] unsigned char 
  5902 ;; Return value:  Size  Location     Type
  5903 ;;                  1    wreg      void 
  5904 ;; Registers used:
  5905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1
  5911 ;;      Params:         0       0       0
  5912 ;;      Locals:         1       0       0
  5913 ;;      Temps:          0       0       0
  5914 ;;      Totals:         1       0       0
  5915 ;;Total ram usage:        1 bytes
  5916 ;; Hardware stack levels used: 1
  5917 ;; Hardware stack levels required when called: 5
  5918 ;; This function calls:
  5919 ;;		_CantaData
  5920 ;;		_LcGotoXY
  5921 ;;		_WaitForBusy
  5922 ;; This function is called by:
  5923 ;;		_menuLoop
  5924 ;;		_lcdAddString
  5925 ;;		_displayMenu
  5926 ;;		_sysTimerLoop
  5927 ;;		_memoryLoop
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           	psect	text39
  5932   0015D4                     __ptext39:
  5933                           	callstack 0
  5934   0015D4                     _LcPutChar:
  5935                           	callstack 24
  5936                           
  5937                           ;incstack = 0
  5938                           ;LcPutChar@c stored from wreg
  5939   0015D4  6E61               	movwf	LcPutChar@c^0,c
  5940                           
  5941                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  5942   0015D6  ECDC  F00C         	call	_WaitForBusy	;wreg free
  5943   0015DA  5061               	movf	LcPutChar@c^0,w,c
  5944   0015DC  EC51  F00D         	call	_CantaData
  5945                           
  5946                           ;LcTLCD.c: 173:  ++ColumnAct;
  5947   0015E0  2A3B               	incf	_ColumnAct^0,f,c
  5948                           
  5949                           ;LcTLCD.c: 174:  if (Rows == 3) {
  5950   0015E2  0E03               	movlw	3
  5951   0015E4  183E               	xorwf	_Rows^0,w,c
  5952   0015E6  A4D8               	btfss	status,2,c
  5953   0015E8  D011               	goto	l3364
  5954                           
  5955                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  5956   0015EA  0E13               	movlw	19
  5957   0015EC  643B               	cpfsgt	_ColumnAct^0,c
  5958   0015EE  0012               	return	
  5959                           
  5960                           ;LcTLCD.c: 176:    ColumnAct = 0;
  5961   0015F0  0E00               	movlw	0
  5962   0015F2  6E3B               	movwf	_ColumnAct^0,c
  5963                           
  5964                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  5965   0015F4  2A3C               	incf	_RowAct^0,f,c
  5966   0015F6  0E03               	movlw	3
  5967   0015F8  643C               	cpfsgt	_RowAct^0,c
  5968   0015FA  D002               	goto	l3362
  5969   0015FC  0E00               	movlw	0
  5970   0015FE  6E3C               	movwf	_RowAct^0,c
  5971   001600                     l3362:
  5972                           
  5973                           ;LcTLCD.c: 178:    LcGotoXY(ColumnAct, RowAct);
  5974   001600  C03C  F059         	movff	_RowAct,LcGotoXY@Row
  5975   001604  503B               	movf	_ColumnAct^0,w,c
  5976   001606  ECB2  F009         	call	_LcGotoXY
  5977   00160A  0012               	return	
  5978   00160C                     l3364:
  5979                           
  5980                           ;LcTLCD.c: 181:  if (Rows == 2) {
  5981   00160C  0E02               	movlw	2
  5982   00160E  183E               	xorwf	_Rows^0,w,c
  5983   001610  A4D8               	btfss	status,2,c
  5984   001612  D011               	goto	l3376
  5985                           
  5986                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  5987   001614  0E27               	movlw	39
  5988   001616  643B               	cpfsgt	_ColumnAct^0,c
  5989   001618  0012               	return	
  5990                           
  5991                           ;LcTLCD.c: 183:    ColumnAct = 0;
  5992   00161A  0E00               	movlw	0
  5993   00161C  6E3B               	movwf	_ColumnAct^0,c
  5994                           
  5995                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  5996   00161E  2A3C               	incf	_RowAct^0,f,c
  5997   001620  0E01               	movlw	1
  5998   001622  643C               	cpfsgt	_RowAct^0,c
  5999   001624  D002               	goto	l3374
  6000   001626  0E00               	movlw	0
  6001   001628  6E3C               	movwf	_RowAct^0,c
  6002   00162A                     l3374:
  6003                           
  6004                           ;LcTLCD.c: 185:    LcGotoXY(ColumnAct, RowAct);
  6005   00162A  C03C  F059         	movff	_RowAct,LcGotoXY@Row
  6006   00162E  503B               	movf	_ColumnAct^0,w,c
  6007   001630  ECB2  F009         	call	_LcGotoXY
  6008   001634  0012               	return	
  6009   001636                     l3376:
  6010                           
  6011                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  6012   001636  043C               	decf	_RowAct^0,w,c
  6013   001638  A4D8               	btfss	status,2,c
  6014   00163A  0012               	return	
  6015                           
  6016                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  6017   00163C  0E27               	movlw	39
  6018   00163E  643B               	cpfsgt	_ColumnAct^0,c
  6019   001640  D002               	goto	l3382
  6020   001642  0E00               	movlw	0
  6021   001644  6E3B               	movwf	_ColumnAct^0,c
  6022   001646                     l3382:
  6023                           
  6024                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  6025   001646  C03C  F059         	movff	_RowAct,LcGotoXY@Row
  6026   00164A  503B               	movf	_ColumnAct^0,w,c
  6027   00164C  ECB2  F009         	call	_LcGotoXY
  6028   001650  0012               	return		;funcret
  6029   001652                     __end_of_LcPutChar:
  6030                           	callstack 0
  6031                           
  6032 ;; *************** function _LcGotoXY *****************
  6033 ;; Defined at:
  6034 ;;		line 134 in file "LcTLCD.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  Column          1    wreg     unsigned char 
  6037 ;;  Row             1   14[COMRAM] unsigned char 
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  Column          1   21[COMRAM] unsigned char 
  6040 ;;  Fisics          2   19[COMRAM] int 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  1    wreg      void 
  6043 ;; Registers used:
  6044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1
  6050 ;;      Params:         1       0       0
  6051 ;;      Locals:         5       0       0
  6052 ;;      Temps:          2       0       0
  6053 ;;      Totals:         8       0       0
  6054 ;;Total ram usage:        8 bytes
  6055 ;; Hardware stack levels used: 1
  6056 ;; Hardware stack levels required when called: 4
  6057 ;; This function calls:
  6058 ;;		_CantaIR
  6059 ;;		_WaitForBusy
  6060 ;; This function is called by:
  6061 ;;		_LcPutChar
  6062 ;;		_menuLoop
  6063 ;;		_moveOneRow
  6064 ;;		_memoryLoop
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text40
  6069   001364                     __ptext40:
  6070                           	callstack 0
  6071   001364                     _LcGotoXY:
  6072                           	callstack 24
  6073                           
  6074                           ;incstack = 0
  6075                           ;LcGotoXY@Column stored from wreg
  6076   001364  6E60               	movwf	LcGotoXY@Column^0,c
  6077                           
  6078                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  6079   001366  D036               	goto	l3300
  6080   001368                     l3278:
  6081                           
  6082                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  6083   001368  5059               	movf	LcGotoXY@Row^0,w,c
  6084   00136A  B4D8               	btfsc	status,2,c
  6085   00136C  D004               	goto	l3282
  6086   00136E  0E00               	movlw	0
  6087   001370  6E5D               	movwf	(_LcGotoXY$528+1)^0,c
  6088   001372  0E40               	movlw	64
  6089   001374  D003               	goto	L4
  6090   001376                     l3282:
  6091   001376  0E00               	movlw	0
  6092   001378  6E5D               	movwf	(_LcGotoXY$528+1)^0,c
  6093   00137A  0E00               	movlw	0
  6094   00137C                     L4:
  6095   00137C  6E5C               	movwf	_LcGotoXY$528^0,c
  6096   00137E  5060               	movf	LcGotoXY@Column^0,w,c
  6097   001380  245C               	addwf	_LcGotoXY$528^0,w,c
  6098   001382  6E5E               	movwf	LcGotoXY@Fisics^0,c
  6099   001384  0E00               	movlw	0
  6100   001386  205D               	addwfc	(_LcGotoXY$528+1)^0,w,c
  6101   001388  6E5F               	movwf	(LcGotoXY@Fisics+1)^0,c
  6102   00138A  D036               	goto	l3302
  6103   00138C                     l202:
  6104                           
  6105                           ;LcTLCD.c: 144:    Fisics = Column;
  6106   00138C  C060  F05E         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6107   001390  6A5F               	clrf	(LcGotoXY@Fisics+1)^0,c
  6108                           
  6109                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  6110   001392  0459               	decf	LcGotoXY@Row^0,w,c
  6111   001394  A4D8               	btfss	status,2,c
  6112   001396  D002               	goto	l3290
  6113   001398  0E40               	movlw	64
  6114   00139A  D005               	goto	L5
  6115   00139C                     l3290:
  6116                           
  6117                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  6118   00139C  0E02               	movlw	2
  6119   00139E  1859               	xorwf	LcGotoXY@Row^0,w,c
  6120   0013A0  A4D8               	btfss	status,2,c
  6121   0013A2  D004               	goto	l3294
  6122   0013A4  503D               	movf	_Columns^0,w,c
  6123   0013A6                     L5:
  6124   0013A6  265E               	addwf	LcGotoXY@Fisics^0,f,c
  6125   0013A8  0E00               	movlw	0
  6126   0013AA  D00E               	goto	L6
  6127   0013AC                     l3294:
  6128                           
  6129                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  6130   0013AC  0E03               	movlw	3
  6131   0013AE  1859               	xorwf	LcGotoXY@Row^0,w,c
  6132   0013B0  A4D8               	btfss	status,2,c
  6133   0013B2  D022               	goto	l3302
  6134   0013B4  503D               	movf	_Columns^0,w,c
  6135   0013B6  6E5A               	movwf	??_LcGotoXY^0,c
  6136   0013B8  6A5B               	clrf	(??_LcGotoXY+1)^0,c
  6137   0013BA  0E40               	movlw	64
  6138   0013BC  265A               	addwf	??_LcGotoXY^0,f,c
  6139   0013BE  0E00               	movlw	0
  6140   0013C0  225B               	addwfc	(??_LcGotoXY+1)^0,f,c
  6141   0013C2  505A               	movf	??_LcGotoXY^0,w,c
  6142   0013C4  265E               	addwf	LcGotoXY@Fisics^0,f,c
  6143   0013C6  505B               	movf	(??_LcGotoXY+1)^0,w,c
  6144   0013C8                     L6:
  6145   0013C8  225F               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6146                           
  6147                           ;LcTLCD.c: 148:    break;
  6148   0013CA  D016               	goto	l3302
  6149   0013CC                     l209:
  6150                           
  6151                           ;LcTLCD.c: 151:    Fisics = Column; break;
  6152   0013CC  C060  F05E         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6153   0013D0  6A5F               	clrf	(LcGotoXY@Fisics+1)^0,c
  6154   0013D2  D012               	goto	l3302
  6155   0013D4                     l3300:
  6156   0013D4  503E               	movf	_Rows^0,w,c
  6157   0013D6  6E5A               	movwf	??_LcGotoXY^0,c
  6158   0013D8  6A5B               	clrf	(??_LcGotoXY+1)^0,c
  6159                           
  6160                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6161                           ; Switch size 1, requested type "simple"
  6162                           ; Number of cases is 1, Range of values is 0 to 0
  6163                           ; switch strategies available:
  6164                           ; Name         Instructions Cycles
  6165                           ; simple_byte            4     3 (average)
  6166                           ;	Chosen strategy is simple_byte
  6167   0013DA  505B               	movf	(??_LcGotoXY+1)^0,w,c
  6168   0013DC  0A00               	xorlw	0	; case 0
  6169   0013DE  A4D8               	btfss	status,2,c
  6170   0013E0  D7F5               	goto	l209
  6171                           
  6172                           ; Switch size 1, requested type "simple"
  6173                           ; Number of cases is 3, Range of values is 1 to 4
  6174                           ; switch strategies available:
  6175                           ; Name         Instructions Cycles
  6176                           ; simple_byte           10     6 (average)
  6177                           ;	Chosen strategy is simple_byte
  6178   0013E2  505A               	movf	??_LcGotoXY^0,w,c
  6179   0013E4  0A01               	xorlw	1	; case 1
  6180   0013E6  B4D8               	btfsc	status,2,c
  6181   0013E8  D7F1               	goto	l209
  6182   0013EA  0A03               	xorlw	3	; case 2
  6183   0013EC  B4D8               	btfsc	status,2,c
  6184   0013EE  D7BC               	goto	l3278
  6185   0013F0  0A06               	xorlw	6	; case 4
  6186   0013F2  B4D8               	btfsc	status,2,c
  6187   0013F4  D7CB               	goto	l202
  6188   0013F6  D7EA               	goto	l209
  6189   0013F8                     l3302:
  6190                           
  6191                           ;LcTLCD.c: 154:  WaitForBusy();
  6192   0013F8  ECDC  F00C         	call	_WaitForBusy	;wreg free
  6193                           
  6194                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  6195   0013FC  505E               	movf	LcGotoXY@Fisics^0,w,c
  6196   0013FE  0980               	iorlw	128
  6197   001400  EC6A  F00D         	call	_CantaIR
  6198                           
  6199                           ;LcTLCD.c: 157:  RowAct = Row;
  6200   001404  C059  F03C         	movff	LcGotoXY@Row,_RowAct
  6201                           
  6202                           ;LcTLCD.c: 158:  ColumnAct = Column;
  6203   001408  C060  F03B         	movff	LcGotoXY@Column,_ColumnAct
  6204   00140C  0012               	return		;funcret
  6205   00140E                     __end_of_LcGotoXY:
  6206                           	callstack 0
  6207                           
  6208 ;; *************** function _CantaData *****************
  6209 ;; Defined at:
  6210 ;;		line 245 in file "LcTLCD.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;  Data            1    wreg     unsigned char 
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;  Data            1    2[COMRAM] unsigned char 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  1    wreg      void 
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMRAM   BANK0   BANK1
  6224 ;;      Params:         0       0       0
  6225 ;;      Locals:         1       0       0
  6226 ;;      Temps:          0       0       0
  6227 ;;      Totals:         1       0       0
  6228 ;;Total ram usage:        1 bytes
  6229 ;; Hardware stack levels used: 1
  6230 ;; Hardware stack levels required when called: 3
  6231 ;; This function calls:
  6232 ;;		_CantaPartAlta
  6233 ;;		_CantaPartBaixa
  6234 ;; This function is called by:
  6235 ;;		_LcPutChar
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           	psect	text41
  6240   001AA2                     __ptext41:
  6241                           	callstack 0
  6242   001AA2                     _CantaData:
  6243                           	callstack 25
  6244                           
  6245                           ;incstack = 0
  6246                           ;CantaData@Data stored from wreg
  6247   001AA2  6E4D               	movwf	CantaData@Data^0,c
  6248                           
  6249                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  6250   001AA4  9695               	bcf	149,3,c	;volatile
  6251   001AA6  9495               	bcf	149,2,c	;volatile
  6252   001AA8  9295               	bcf	149,1,c	;volatile
  6253   001AAA  9095               	bcf	149,0,c	;volatile
  6254                           
  6255                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  6256   001AAC  888C               	bsf	140,4,c	;volatile
  6257                           
  6258                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  6259   001AAE  9A8C               	bcf	140,5,c	;volatile
  6260                           
  6261                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  6262   001AB0  8C8C               	bsf	140,6,c	;volatile
  6263                           
  6264                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  6265   001AB2  504D               	movf	CantaData@Data^0,w,c
  6266   001AB4  EC0A  F00C         	call	_CantaPartAlta
  6267                           
  6268                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  6269   001AB8  8C8C               	bsf	140,6,c	;volatile
  6270                           
  6271                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  6272   001ABA  9C8C               	bcf	140,6,c	;volatile
  6273                           
  6274                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  6275   001ABC  9C8C               	bcf	140,6,c	;volatile
  6276                           
  6277                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  6278   001ABE  8C8C               	bsf	140,6,c	;volatile
  6279                           
  6280                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  6281   001AC0  504D               	movf	CantaData@Data^0,w,c
  6282   001AC2  ECD6  F00B         	call	_CantaPartBaixa
  6283                           
  6284                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  6285   001AC6  8C8C               	bsf	140,6,c	;volatile
  6286                           
  6287                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  6288   001AC8  9C8C               	bcf	140,6,c	;volatile
  6289                           
  6290                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  6291   001ACA  8695               	bsf	149,3,c	;volatile
  6292   001ACC  8495               	bsf	149,2,c	;volatile
  6293   001ACE  8295               	bsf	149,1,c	;volatile
  6294   001AD0  8095               	bsf	149,0,c	;volatile
  6295   001AD2  0012               	return		;funcret
  6296   001AD4                     __end_of_CantaData:
  6297                           	callstack 0
  6298                           
  6299 ;; *************** function _LcCursorOn *****************
  6300 ;; Defined at:
  6301 ;;		line 120 in file "LcTLCD.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;		None
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;		None
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      void 
  6308 ;; Registers used:
  6309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1
  6315 ;;      Params:         0       0       0
  6316 ;;      Locals:         0       0       0
  6317 ;;      Temps:          0       0       0
  6318 ;;      Totals:         0       0       0
  6319 ;;Total ram usage:        0 bytes
  6320 ;; Hardware stack levels used: 1
  6321 ;; Hardware stack levels required when called: 4
  6322 ;; This function calls:
  6323 ;;		_CantaIR
  6324 ;;		_WaitForBusy
  6325 ;; This function is called by:
  6326 ;;		_menuLoop
  6327 ;;		_memoryLoop
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text42
  6332   0000EA                     __ptext42:
  6333                           	callstack 0
  6334   0000EA                     _LcCursorOn:
  6335                           	callstack 25
  6336                           
  6337                           ;LcTLCD.c: 123:  WaitForBusy();
  6338                           
  6339                           ;incstack = 0
  6340   0000EA  ECDC  F00C         	call	_WaitForBusy	;wreg free
  6341                           
  6342                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  6343   0000EE  0E0E               	movlw	14
  6344   0000F0  EC6A  F00D         	call	_CantaIR
  6345   0000F4  0012               	return		;funcret
  6346   0000F6                     __end_of_LcCursorOn:
  6347                           	callstack 0
  6348                           
  6349 ;; *************** function _LcCursorOff *****************
  6350 ;; Defined at:
  6351 ;;		line 127 in file "LcTLCD.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1
  6365 ;;      Params:         0       0       0
  6366 ;;      Locals:         0       0       0
  6367 ;;      Temps:          0       0       0
  6368 ;;      Totals:         0       0       0
  6369 ;;Total ram usage:        0 bytes
  6370 ;; Hardware stack levels used: 1
  6371 ;; Hardware stack levels required when called: 4
  6372 ;; This function calls:
  6373 ;;		_CantaIR
  6374 ;;		_WaitForBusy
  6375 ;; This function is called by:
  6376 ;;		_menuLoop
  6377 ;;		_memoryLoop
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text43
  6382   0000F6                     __ptext43:
  6383                           	callstack 0
  6384   0000F6                     _LcCursorOff:
  6385                           	callstack 25
  6386                           
  6387                           ;LcTLCD.c: 130:  WaitForBusy();
  6388                           
  6389                           ;incstack = 0
  6390   0000F6  ECDC  F00C         	call	_WaitForBusy	;wreg free
  6391                           
  6392                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  6393   0000FA  0E0C               	movlw	12
  6394   0000FC  EC6A  F00D         	call	_CantaIR
  6395   000100  0012               	return		;funcret
  6396   000102                     __end_of_LcCursorOff:
  6397                           	callstack 0
  6398                           
  6399 ;; *************** function _keypadLoop *****************
  6400 ;; Defined at:
  6401 ;;		line 38 in file "Keypad.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;		None
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;                  1    wreg      void 
  6408 ;; Registers used:
  6409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1
  6415 ;;      Params:         0       0       0
  6416 ;;      Locals:         0       0       0
  6417 ;;      Temps:          2       0       0
  6418 ;;      Totals:         2       0       0
  6419 ;;Total ram usage:        2 bytes
  6420 ;; Hardware stack levels used: 1
  6421 ;; Hardware stack levels required when called: 4
  6422 ;; This function calls:
  6423 ;;		_TI_GetTics
  6424 ;;		_TI_ResetTics
  6425 ;;		_getDigit
  6426 ;;		_playMusic
  6427 ;;		_stopMusic
  6428 ;; This function is called by:
  6429 ;;		_main
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text44
  6434   000E92                     __ptext44:
  6435                           	callstack 0
  6436   000E92                     _keypadLoop:
  6437                           	callstack 26
  6438                           
  6439                           ;Keypad.c: 40:     switch (state){
  6440                           
  6441                           ;incstack = 0
  6442   000E92  D086               	goto	l3954
  6443   000E94                     l686:
  6444                           
  6445                           ;Keypad.c: 43:             if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5)){
  6446   000E94  B681               	btfsc	129,3,c	;volatile
  6447   000E96  A281               	btfss	129,1,c	;volatile
  6448   000E98  D00D               	goto	l3876
  6449   000E9A  AA81               	btfss	129,5,c	;volatile
  6450   000E9C  D00B               	goto	l3876
  6451                           
  6452                           ;Keypad.c: 44:                 LATBbits.LATB2=0;
  6453   000E9E  948A               	bcf	138,2,c	;volatile
  6454                           
  6455                           ;Keypad.c: 45:                 LATBbits.LATB7=1;
  6456   000EA0  8E8A               	bsf	138,7,c	;volatile
  6457                           
  6458                           ;Keypad.c: 46:                 LATBbits.LATB6=1;
  6459   000EA2  8C8A               	bsf	138,6,c	;volatile
  6460                           
  6461                           ;Keypad.c: 47:                 LATBbits.LATB4=1;
  6462   000EA4  888A               	bsf	138,4,c	;volatile
  6463                           
  6464                           ;Keypad.c: 48:                 state=1;
  6465   000EA6  0E01               	movlw	1
  6466   000EA8  6E2A               	movwf	_state@Keypad$F1073^0,c
  6467                           
  6468                           ;Keypad.c: 49:                 row=0;
  6469   000EAA  0E00               	movlw	0
  6470   000EAC  6E1C               	movwf	(_row+1)^0,c
  6471   000EAE  0E00               	movlw	0
  6472   000EB0  6E1B               	movwf	_row^0,c
  6473                           
  6474                           ;Keypad.c: 50:             }else{
  6475   000EB2  0012               	return	
  6476   000EB4                     l3876:
  6477                           
  6478                           ;Keypad.c: 51:                 state=4;
  6479   000EB4  0E04               	movlw	4
  6480   000EB6  6E2A               	movwf	_state@Keypad$F1073^0,c
  6481   000EB8  0012               	return	
  6482   000EBA                     l690:
  6483                           
  6484                           ;Keypad.c: 55:            if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5)){
  6485   000EBA  B681               	btfsc	129,3,c	;volatile
  6486   000EBC  A281               	btfss	129,1,c	;volatile
  6487   000EBE  D7FA               	goto	l3876
  6488   000EC0  AA81               	btfss	129,5,c	;volatile
  6489   000EC2  D7F8               	goto	l3876
  6490                           
  6491                           ;Keypad.c: 56:                 LATBbits.LATB2=1;
  6492   000EC4  848A               	bsf	138,2,c	;volatile
  6493                           
  6494                           ;Keypad.c: 57:                 LATBbits.LATB7=0;
  6495   000EC6  9E8A               	bcf	138,7,c	;volatile
  6496                           
  6497                           ;Keypad.c: 58:                 LATBbits.LATB6=1;
  6498   000EC8  8C8A               	bsf	138,6,c	;volatile
  6499                           
  6500                           ;Keypad.c: 59:                 LATBbits.LATB4=1;
  6501   000ECA  888A               	bsf	138,4,c	;volatile
  6502                           
  6503                           ;Keypad.c: 60:                 state=2;
  6504   000ECC  0E02               	movlw	2
  6505   000ECE  6E2A               	movwf	_state@Keypad$F1073^0,c
  6506                           
  6507                           ;Keypad.c: 61:                 row=1;
  6508   000ED0  0E00               	movlw	0
  6509   000ED2  6E1C               	movwf	(_row+1)^0,c
  6510   000ED4  0E01               	movlw	1
  6511   000ED6  6E1B               	movwf	_row^0,c
  6512                           
  6513                           ;Keypad.c: 63:             }else{
  6514   000ED8  0012               	return	
  6515   000EDA                     l693:
  6516                           
  6517                           ;Keypad.c: 68:             if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5)){
  6518   000EDA  B681               	btfsc	129,3,c	;volatile
  6519   000EDC  A281               	btfss	129,1,c	;volatile
  6520   000EDE  D7EA               	goto	l3876
  6521   000EE0  AA81               	btfss	129,5,c	;volatile
  6522   000EE2  D7E8               	goto	l3876
  6523                           
  6524                           ;Keypad.c: 69:                 LATBbits.LATB2=1;
  6525   000EE4  848A               	bsf	138,2,c	;volatile
  6526                           
  6527                           ;Keypad.c: 70:                 LATBbits.LATB7=1;
  6528   000EE6  8E8A               	bsf	138,7,c	;volatile
  6529                           
  6530                           ;Keypad.c: 71:                 LATBbits.LATB6=0;
  6531   000EE8  9C8A               	bcf	138,6,c	;volatile
  6532                           
  6533                           ;Keypad.c: 72:                 LATBbits.LATB4=1;
  6534   000EEA  888A               	bsf	138,4,c	;volatile
  6535                           
  6536                           ;Keypad.c: 73:                 state=3;
  6537   000EEC  0E03               	movlw	3
  6538   000EEE  6E2A               	movwf	_state@Keypad$F1073^0,c
  6539                           
  6540                           ;Keypad.c: 74:                 row=2;
  6541   000EF0  0E00               	movlw	0
  6542   000EF2  6E1C               	movwf	(_row+1)^0,c
  6543   000EF4  0E02               	movlw	2
  6544   000EF6  6E1B               	movwf	_row^0,c
  6545                           
  6546                           ;Keypad.c: 75:             }else{
  6547   000EF8  0012               	return	
  6548   000EFA                     l696:
  6549                           
  6550                           ;Keypad.c: 80:             if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5)){
  6551   000EFA  B681               	btfsc	129,3,c	;volatile
  6552   000EFC  A281               	btfss	129,1,c	;volatile
  6553   000EFE  D7DA               	goto	l3876
  6554   000F00  AA81               	btfss	129,5,c	;volatile
  6555   000F02  D7D8               	goto	l3876
  6556                           
  6557                           ;Keypad.c: 81:                 LATBbits.LATB2=1;
  6558   000F04  848A               	bsf	138,2,c	;volatile
  6559                           
  6560                           ;Keypad.c: 82:                 LATBbits.LATB7=1;
  6561   000F06  8E8A               	bsf	138,7,c	;volatile
  6562                           
  6563                           ;Keypad.c: 83:                 LATBbits.LATB6=1;
  6564   000F08  8C8A               	bsf	138,6,c	;volatile
  6565                           
  6566                           ;Keypad.c: 84:                 LATBbits.LATB4=0;
  6567   000F0A  988A               	bcf	138,4,c	;volatile
  6568                           
  6569                           ;Keypad.c: 85:                 row=3;
  6570   000F0C  0E00               	movlw	0
  6571   000F0E  6E1C               	movwf	(_row+1)^0,c
  6572   000F10  0E03               	movlw	3
  6573   000F12  6E1B               	movwf	_row^0,c
  6574                           
  6575                           ;Keypad.c: 86:                 state=0;
  6576   000F14  0E00               	movlw	0
  6577   000F16  6E2A               	movwf	_state@Keypad$F1073^0,c
  6578                           
  6579                           ;Keypad.c: 87:             }else{
  6580   000F18  0012               	return	
  6581   000F1A                     l3908:
  6582                           
  6583                           ;Keypad.c: 92:             state=5;
  6584   000F1A  0E05               	movlw	5
  6585   000F1C  6E2A               	movwf	_state@Keypad$F1073^0,c
  6586                           
  6587                           ;Keypad.c: 93:             TI_ResetTics(timerBounces);
  6588   000F1E  5045               	movf	_timerBounces^0,w,c
  6589   000F20  ECDD  F00D         	call	_TI_ResetTics
  6590                           
  6591                           ;Keypad.c: 94:             break;
  6592   000F24  0012               	return	
  6593   000F26                     l3912:
  6594                           
  6595                           ;Keypad.c: 96:             if (TI_GetTics(timerBounces) >= 32){
  6596   000F26  5045               	movf	_timerBounces^0,w,c
  6597   000F28  EC6C  F00C         	call	_TI_GetTics
  6598   000F2C  504E               	movf	(?_TI_GetTics+3)^0,w,c
  6599   000F2E  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  6600   000F30  104C               	iorwf	(?_TI_GetTics+1)^0,w,c
  6601   000F32  E104               	bnz	u3220
  6602   000F34  0E20               	movlw	32
  6603   000F36  5C4B               	subwf	?_TI_GetTics^0,w,c
  6604   000F38  A0D8               	btfss	status,0,c
  6605   000F3A  0012               	return	
  6606   000F3C                     u3220:
  6607                           
  6608                           ;Keypad.c: 97:                 if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5)){
  6609   000F3C  B681               	btfsc	129,3,c	;volatile
  6610   000F3E  A281               	btfss	129,1,c	;volatile
  6611   000F40  D005               	goto	l3922
  6612   000F42  AA81               	btfss	129,5,c	;volatile
  6613   000F44  D003               	goto	l3922
  6614   000F46                     u3250:
  6615                           
  6616                           ;Keypad.c: 98:                     state = 0;
  6617   000F46  0E00               	movlw	0
  6618   000F48  6E2A               	movwf	_state@Keypad$F1073^0,c
  6619                           
  6620                           ;Keypad.c: 99:                 } else{
  6621   000F4A  0012               	return	
  6622   000F4C                     l3922:
  6623                           
  6624                           ;Keypad.c: 100:                     pressed = 1;
  6625   000F4C  0E01               	movlw	1
  6626   000F4E  6E2D               	movwf	_pressed^0,c
  6627                           
  6628                           ;Keypad.c: 101:                     playMusic(getDigit());
  6629   000F50  EC3A  F00E         	call	_getDigit	;wreg free
  6630   000F54  EC35  F000         	call	_playMusic
  6631   000F58                     l3926:
  6632                           
  6633                           ;Keypad.c: 102:                     state = 6;
  6634   000F58  0E06               	movlw	6
  6635   000F5A  6E2A               	movwf	_state@Keypad$F1073^0,c
  6636   000F5C  0012               	return	
  6637   000F5E                     l704:
  6638                           
  6639                           ;Keypad.c: 107:             if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5)){
  6640   000F5E  A681               	btfss	129,3,c	;volatile
  6641   000F60  0012               	return	
  6642   000F62  A281               	btfss	129,1,c	;volatile
  6643   000F64  0012               	return	
  6644   000F66  AA81               	btfss	129,5,c	;volatile
  6645   000F68  0012               	return	
  6646                           
  6647                           ;Keypad.c: 108:                 TI_ResetTics(timerBounces);
  6648   000F6A  5045               	movf	_timerBounces^0,w,c
  6649   000F6C  ECDD  F00D         	call	_TI_ResetTics
  6650                           
  6651                           ;Keypad.c: 109:                 state = 7;
  6652   000F70  0E07               	movlw	7
  6653   000F72  6E2A               	movwf	_state@Keypad$F1073^0,c
  6654   000F74  0012               	return	
  6655   000F76                     l3936:
  6656                           
  6657                           ;Keypad.c: 113:             if (TI_GetTics(timerBounces) >= 32){
  6658   000F76  5045               	movf	_timerBounces^0,w,c
  6659   000F78  EC6C  F00C         	call	_TI_GetTics
  6660   000F7C  504E               	movf	(?_TI_GetTics+3)^0,w,c
  6661   000F7E  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  6662   000F80  104C               	iorwf	(?_TI_GetTics+1)^0,w,c
  6663   000F82  E104               	bnz	u3290
  6664   000F84  0E20               	movlw	32
  6665   000F86  5C4B               	subwf	?_TI_GetTics^0,w,c
  6666   000F88  A0D8               	btfss	status,0,c
  6667   000F8A  0012               	return	
  6668   000F8C                     u3290:
  6669                           
  6670                           ;Keypad.c: 114:                 if (!!(PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5))
      +                          {
  6671   000F8C  B681               	btfsc	129,3,c	;volatile
  6672   000F8E  A281               	btfss	129,1,c	;volatile
  6673   000F90  D7E3               	goto	l3926
  6674   000F92  AA81               	btfss	129,5,c	;volatile
  6675   000F94  D7E1               	goto	l3926
  6676                           
  6677                           ;Keypad.c: 115:                     stopMusic();
  6678   000F96  EC94  F000         	call	_stopMusic	;wreg free
  6679                           
  6680                           ;Keypad.c: 116:                     pressed = 0;
  6681   000F9A  0E00               	movlw	0
  6682   000F9C  6E2D               	movwf	_pressed^0,c
  6683   000F9E  D7D3               	goto	u3250
  6684   000FA0                     l3954:
  6685   000FA0  502A               	movf	_state@Keypad$F1073^0,w,c
  6686   000FA2  6E58               	movwf	??_keypadLoop^0,c
  6687   000FA4  6A59               	clrf	(??_keypadLoop+1)^0,c
  6688                           
  6689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6690                           ; Switch size 1, requested type "simple"
  6691                           ; Number of cases is 1, Range of values is 0 to 0
  6692                           ; switch strategies available:
  6693                           ; Name         Instructions Cycles
  6694                           ; simple_byte            4     3 (average)
  6695                           ;	Chosen strategy is simple_byte
  6696   000FA6  5059               	movf	(??_keypadLoop+1)^0,w,c
  6697   000FA8  0A00               	xorlw	0	; case 0
  6698   000FAA  A4D8               	btfss	status,2,c
  6699   000FAC  0012               	return	
  6700                           
  6701                           ; Switch size 1, requested type "simple"
  6702                           ; Number of cases is 8, Range of values is 0 to 7
  6703                           ; switch strategies available:
  6704                           ; Name         Instructions Cycles
  6705                           ; simple_byte           25    13 (average)
  6706                           ;	Chosen strategy is simple_byte
  6707   000FAE  5058               	movf	??_keypadLoop^0,w,c
  6708   000FB0  0A00               	xorlw	0	; case 0
  6709   000FB2  B4D8               	btfsc	status,2,c
  6710   000FB4  D76F               	goto	l686
  6711   000FB6  0A01               	xorlw	1	; case 1
  6712   000FB8  B4D8               	btfsc	status,2,c
  6713   000FBA  D77F               	goto	l690
  6714   000FBC  0A03               	xorlw	3	; case 2
  6715   000FBE  B4D8               	btfsc	status,2,c
  6716   000FC0  D78C               	goto	l693
  6717   000FC2  0A01               	xorlw	1	; case 3
  6718   000FC4  B4D8               	btfsc	status,2,c
  6719   000FC6  D799               	goto	l696
  6720   000FC8  0A07               	xorlw	7	; case 4
  6721   000FCA  B4D8               	btfsc	status,2,c
  6722   000FCC  D7A6               	goto	l3908
  6723   000FCE  0A01               	xorlw	1	; case 5
  6724   000FD0  B4D8               	btfsc	status,2,c
  6725   000FD2  D7A9               	goto	l3912
  6726   000FD4  0A03               	xorlw	3	; case 6
  6727   000FD6  B4D8               	btfsc	status,2,c
  6728   000FD8  D7C2               	goto	l704
  6729   000FDA  0A01               	xorlw	1	; case 7
  6730   000FDC  A4D8               	btfss	status,2,c
  6731   000FDE  0012               	return	
  6732   000FE0  D7CA               	goto	l3936
  6733   000FE2                     __end_of_keypadLoop:
  6734                           	callstack 0
  6735                           
  6736 ;; *************** function _stopMusic *****************
  6737 ;; Defined at:
  6738 ;;		line 42 in file "Audio.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;		None
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;		None
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, status,2
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMRAM   BANK0   BANK1
  6752 ;;      Params:         0       0       0
  6753 ;;      Locals:         0       0       0
  6754 ;;      Temps:          0       0       0
  6755 ;;      Totals:         0       0       0
  6756 ;;Total ram usage:        0 bytes
  6757 ;; Hardware stack levels used: 1
  6758 ;; Hardware stack levels required when called: 2
  6759 ;; This function calls:
  6760 ;;		Nothing
  6761 ;; This function is called by:
  6762 ;;		_menuLoop
  6763 ;;		_keypadLoop
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           	psect	text45
  6768   000128                     __ptext45:
  6769                           	callstack 0
  6770   000128                     _stopMusic:
  6771                           	callstack 27
  6772                           
  6773                           ;Audio.c: 43:     state = 0;
  6774                           
  6775                           ;incstack = 0
  6776   000128  0E00               	movlw	0
  6777   00012A  6E33               	movwf	_state@Audio$F811^0,c
  6778   00012C  0012               	return		;funcret
  6779   00012E                     __end_of_stopMusic:
  6780                           	callstack 0
  6781                           
  6782 ;; *************** function _playMusic *****************
  6783 ;; Defined at:
  6784 ;;		line 46 in file "Audio.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  aux             1    wreg     unsigned char 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  aux             1    1[COMRAM] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      void 
  6791 ;; Registers used:
  6792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1
  6798 ;;      Params:         0       0       0
  6799 ;;      Locals:         1       0       0
  6800 ;;      Temps:          0       0       0
  6801 ;;      Totals:         1       0       0
  6802 ;;Total ram usage:        1 bytes
  6803 ;; Hardware stack levels used: 1
  6804 ;; Hardware stack levels required when called: 3
  6805 ;; This function calls:
  6806 ;;		_TI_ResetTics
  6807 ;; This function is called by:
  6808 ;;		_menuLoop
  6809 ;;		_keypadLoop
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text46
  6814   00006A                     __ptext46:
  6815                           	callstack 0
  6816   00006A                     _playMusic:
  6817                           	callstack 26
  6818                           
  6819                           ;incstack = 0
  6820                           ;playMusic@aux stored from wreg
  6821   00006A  6E4C               	movwf	playMusic@aux^0,c
  6822                           
  6823                           ;Audio.c: 47:     TI_ResetTics(pTime);
  6824   00006C  5048               	movf	_pTime^0,w,c
  6825   00006E  ECDD  F00D         	call	_TI_ResetTics
  6826                           
  6827                           ;Audio.c: 48:     period = aux;
  6828   000072  C04C  F032         	movff	playMusic@aux,_period
  6829                           
  6830                           ;Audio.c: 49:     state = 1;
  6831   000076  0E01               	movlw	1
  6832   000078  6E33               	movwf	_state@Audio$F811^0,c
  6833   00007A  0012               	return		;funcret
  6834   00007C                     __end_of_playMusic:
  6835                           	callstack 0
  6836                           
  6837 ;; *************** function _getDigit *****************
  6838 ;; Defined at:
  6839 ;;		line 175 in file "Keypad.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;		None
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;		None
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  1    wreg      unsigned char 
  6846 ;; Registers used:
  6847 ;;		wreg, status,2, status,0, prodl, prodh
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1
  6853 ;;      Params:         0       0       0
  6854 ;;      Locals:         0       0       0
  6855 ;;      Temps:          0       0       0
  6856 ;;      Totals:         0       0       0
  6857 ;;Total ram usage:        0 bytes
  6858 ;; Hardware stack levels used: 1
  6859 ;; Hardware stack levels required when called: 2
  6860 ;; This function calls:
  6861 ;;		Nothing
  6862 ;; This function is called by:
  6863 ;;		_keypadLoop
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text47
  6868   001C74                     __ptext47:
  6869                           	callstack 0
  6870   001C74                     _getDigit:
  6871                           	callstack 27
  6872                           
  6873                           ;Keypad.c: 176:    if (!PORTBbits.RB1) {
  6874                           
  6875                           ;incstack = 0
  6876   001C74  B281               	btfsc	129,1,c	;volatile
  6877   001C76  D004               	goto	l737
  6878                           
  6879                           ;Keypad.c: 177:         return row*3;
  6880   001C78  501B               	movf	_row^0,w,c
  6881   001C7A  0D03               	mullw	3
  6882   001C7C  50F3               	movf	243,w,c
  6883   001C7E  0012               	return	
  6884   001C80                     l737:
  6885   001C80  B681               	btfsc	129,3,c	;volatile
  6886   001C82  D004               	goto	l2036
  6887                           
  6888                           ;Keypad.c: 179:         return (row*3)+1;
  6889   001C84  501B               	movf	_row^0,w,c
  6890   001C86  0D03               	mullw	3
  6891   001C88  28F3               	incf	243,w,c
  6892   001C8A  0012               	return	
  6893   001C8C                     l2036:
  6894                           
  6895                           ;Keypad.c: 181:         return (row*3)+2;
  6896   001C8C  501B               	movf	_row^0,w,c
  6897   001C8E  0D03               	mullw	3
  6898   001C90  50F3               	movf	243,w,c
  6899   001C92  0F02               	addlw	2
  6900   001C94  0012               	return		;funcret
  6901   001C96                     __end_of_getDigit:
  6902                           	callstack 0
  6903                           
  6904 ;; *************** function _joystickLoop *****************
  6905 ;; Defined at:
  6906 ;;		line 25 in file "Joystick.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;		None
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;		None
  6911 ;; Return value:  Size  Location     Type
  6912 ;;                  1    wreg      void 
  6913 ;; Registers used:
  6914 ;;		wreg, status,2, status,0
  6915 ;; Tracked objects:
  6916 ;;		On entry : 0/0
  6917 ;;		On exit  : 0/0
  6918 ;;		Unchanged: 0/0
  6919 ;; Data sizes:     COMRAM   BANK0   BANK1
  6920 ;;      Params:         0       0       0
  6921 ;;      Locals:         1       0       0
  6922 ;;      Temps:          2       0       0
  6923 ;;      Totals:         3       0       0
  6924 ;;Total ram usage:        3 bytes
  6925 ;; Hardware stack levels used: 1
  6926 ;; Hardware stack levels required when called: 2
  6927 ;; This function calls:
  6928 ;;		Nothing
  6929 ;; This function is called by:
  6930 ;;		_main
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text48
  6935   0012B2                     __ptext48:
  6936                           	callstack 0
  6937   0012B2                     _joystickLoop:
  6938                           	callstack 28
  6939                           
  6940                           ;Joystick.c: 26:     switch (state){
  6941                           
  6942                           ;incstack = 0
  6943   0012B2  D043               	goto	l3860
  6944   0012B4                     l76:
  6945                           
  6946                           ;Joystick.c: 28:             if (ADCON0bits.GO_DONE == 0){
  6947   0012B4  B2C2               	btfsc	194,1,c	;volatile
  6948   0012B6  0012               	return	
  6949                           
  6950                           ;Joystick.c: 29:                 y = ADRESH;
  6951   0012B8  CFC4 F03F          	movff	4036,_y	;volatile
  6952                           
  6953                           ;Joystick.c: 30:                 ADCON0bits.CHS0=1;
  6954   0012BC  84C2               	bsf	194,2,c	;volatile
  6955                           
  6956                           ;Joystick.c: 31:                 ADCON0bits.CHS1=0;
  6957   0012BE  96C2               	bcf	194,3,c	;volatile
  6958                           
  6959                           ;Joystick.c: 32:                 ADCON0bits.GO_DONE=1;
  6960   0012C0  82C2               	bsf	194,1,c	;volatile
  6961                           
  6962                           ;Joystick.c: 33:                 state = 1;
  6963   0012C2  0E01               	movlw	1
  6964   0012C4  6E43               	movwf	_state^0,c
  6965   0012C6  0012               	return	
  6966   0012C8                     l79:
  6967                           
  6968                           ;Joystick.c: 37:             if (ADCON0bits.GO_DONE == 0){
  6969   0012C8  B2C2               	btfsc	194,1,c	;volatile
  6970   0012CA  0012               	return	
  6971                           
  6972                           ;Joystick.c: 38:                 x = ADRESH;
  6973   0012CC  CFC4 F040          	movff	4036,_x	;volatile
  6974                           
  6975                           ;Joystick.c: 39:                 ADCON0bits.CHS0=0;
  6976   0012D0  94C2               	bcf	194,2,c	;volatile
  6977                           
  6978                           ;Joystick.c: 40:                 ADCON0bits.CHS1=1;
  6979   0012D2  86C2               	bsf	194,3,c	;volatile
  6980                           
  6981                           ;Joystick.c: 41:                 state = 2;
  6982   0012D4  0E02               	movlw	2
  6983   0012D6  6E43               	movwf	_state^0,c
  6984   0012D8  0012               	return	
  6985   0012DA                     l3826:
  6986                           
  6987                           ;Joystick.c: 45:             state = 3;
  6988   0012DA  0E03               	movlw	3
  6989   0012DC  6E43               	movwf	_state^0,c
  6990                           
  6991                           ;Joystick.c: 46:             if (hasMoved) {
  6992   0012DE  5041               	movf	_hasMoved^0,w,c
  6993   0012E0  B4D8               	btfsc	status,2,c
  6994   0012E2  D009               	goto	l3834
  6995                           
  6996                           ;Joystick.c: 47:                 if (y >= 100 && y <= 150) {
  6997   0012E4  0E63               	movlw	99
  6998   0012E6  643F               	cpfsgt	_y^0,c
  6999   0012E8  0012               	return	
  7000   0012EA  0E97               	movlw	151
  7001   0012EC  603F               	cpfslt	_y^0,c
  7002   0012EE  0012               	return	
  7003                           
  7004                           ;Joystick.c: 48:                     hasMoved = 0;
  7005   0012F0  0E00               	movlw	0
  7006   0012F2  6E41               	movwf	_hasMoved^0,c
  7007   0012F4  0012               	return	
  7008   0012F6                     l3834:
  7009                           
  7010                           ;Joystick.c: 51:                 if (x <= 30 || x >= 220 || y <= 30 || y >= 220) {
  7011   0012F6  0E1E               	movlw	30
  7012   0012F8  6440               	cpfsgt	_x^0,c
  7013   0012FA  D009               	goto	u3070
  7014   0012FC  0EDC               	movlw	220
  7015   0012FE  6040               	cpfslt	_x^0,c
  7016   001300  D006               	goto	u3070
  7017   001302  0E1E               	movlw	30
  7018   001304  643F               	cpfsgt	_y^0,c
  7019   001306  D003               	goto	u3070
  7020   001308  0EDB               	movlw	219
  7021   00130A  643F               	cpfsgt	_y^0,c
  7022   00130C  0012               	return	
  7023   00130E                     u3070:
  7024                           
  7025                           ;Joystick.c: 52:                     direction = (x <= 30 || y <= 30) ? 0 : 1;
  7026   00130E  0E00               	movlw	0
  7027   001310  6E4D               	movwf	_joystickLoop$239^0,c
  7028   001312  0E1E               	movlw	30
  7029   001314  6440               	cpfsgt	_x^0,c
  7030   001316  D005               	goto	l3850
  7031   001318  0E1E               	movlw	30
  7032   00131A  643F               	cpfsgt	_y^0,c
  7033   00131C  D002               	goto	l3850
  7034   00131E  0E01               	movlw	1
  7035   001320  6E4D               	movwf	_joystickLoop$239^0,c
  7036   001322                     l3850:
  7037   001322  C04D  F042         	movff	_joystickLoop$239,_direction
  7038                           
  7039                           ;Joystick.c: 53:                     hasMoved = 1;
  7040   001326  0E01               	movlw	1
  7041   001328  6E41               	movwf	_hasMoved^0,c
  7042   00132A  0012               	return	
  7043   00132C                     l3852:
  7044                           
  7045                           ;Joystick.c: 58:             state = 0;
  7046   00132C  0E00               	movlw	0
  7047   00132E  6E43               	movwf	_state^0,c
  7048                           
  7049                           ;Joystick.c: 59:             ADCON0bits.GO_DONE=1;
  7050   001330  82C2               	bsf	194,1,c	;volatile
  7051                           
  7052                           ;Joystick.c: 60:             break;
  7053   001332  0012               	return	
  7054   001334                     l3856:
  7055                           
  7056                           ;Joystick.c: 62:             state = 0;
  7057   001334  0E00               	movlw	0
  7058   001336  6E43               	movwf	_state^0,c
  7059                           
  7060                           ;Joystick.c: 63:             break;
  7061   001338  0012               	return	
  7062   00133A                     l3860:
  7063   00133A  5043               	movf	_state^0,w,c
  7064   00133C  6E4B               	movwf	??_joystickLoop^0,c
  7065   00133E  6A4C               	clrf	(??_joystickLoop+1)^0,c
  7066                           
  7067                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7068                           ; Switch size 1, requested type "simple"
  7069                           ; Number of cases is 1, Range of values is 0 to 0
  7070                           ; switch strategies available:
  7071                           ; Name         Instructions Cycles
  7072                           ; simple_byte            4     3 (average)
  7073                           ;	Chosen strategy is simple_byte
  7074   001340  504C               	movf	(??_joystickLoop+1)^0,w,c
  7075   001342  0A00               	xorlw	0	; case 0
  7076   001344  A4D8               	btfss	status,2,c
  7077   001346  D7F6               	goto	l3856
  7078                           
  7079                           ; Switch size 1, requested type "simple"
  7080                           ; Number of cases is 4, Range of values is 0 to 3
  7081                           ; switch strategies available:
  7082                           ; Name         Instructions Cycles
  7083                           ; simple_byte           13     7 (average)
  7084                           ;	Chosen strategy is simple_byte
  7085   001348  504B               	movf	??_joystickLoop^0,w,c
  7086   00134A  0A00               	xorlw	0	; case 0
  7087   00134C  B4D8               	btfsc	status,2,c
  7088   00134E  D7B2               	goto	l76
  7089   001350  0A01               	xorlw	1	; case 1
  7090   001352  B4D8               	btfsc	status,2,c
  7091   001354  D7B9               	goto	l79
  7092   001356  0A03               	xorlw	3	; case 2
  7093   001358  B4D8               	btfsc	status,2,c
  7094   00135A  D7BF               	goto	l3826
  7095   00135C  0A01               	xorlw	1	; case 3
  7096   00135E  B4D8               	btfsc	status,2,c
  7097   001360  D7E5               	goto	l3852
  7098   001362  D7E8               	goto	l3856
  7099   001364                     __end_of_joystickLoop:
  7100                           	callstack 0
  7101                           
  7102 ;; *************** function _initSysTimer *****************
  7103 ;; Defined at:
  7104 ;;		line 12 in file "SystemTimer.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;		None
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;		None
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMRAM   BANK0   BANK1
  7118 ;;      Params:         0       0       0
  7119 ;;      Locals:         0       0       0
  7120 ;;      Temps:          0       0       0
  7121 ;;      Totals:         0       0       0
  7122 ;;Total ram usage:        0 bytes
  7123 ;; Hardware stack levels used: 1
  7124 ;; Hardware stack levels required when called: 3
  7125 ;; This function calls:
  7126 ;;		_TI_NewTimer
  7127 ;; This function is called by:
  7128 ;;		_main
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text49
  7133   001D72                     __ptext49:
  7134                           	callstack 0
  7135   001D72                     _initSysTimer:
  7136                           	callstack 27
  7137                           
  7138                           ;SystemTimer.c: 13:     TI_NewTimer(&sysTmr);
  7139                           
  7140                           ;incstack = 0
  7141   001D72  0E46               	movlw	low _sysTmr
  7142   001D74  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7143   001D76  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7144   001D78  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7145                           
  7146                           ;SystemTimer.c: 14:     timestamp[0].minutes = 0;
  7147   001D7C  0E00               	movlw	0
  7148   001D7E  6E01               	movwf	_timestamp^0,c
  7149                           
  7150                           ;SystemTimer.c: 15:     timestamp[0].seconds = 0;
  7151   001D80  0E00               	movlw	0
  7152   001D82  6E02               	movwf	(_timestamp+1)^0,c
  7153                           
  7154                           ;SystemTimer.c: 16:     state = 0;
  7155   001D84  0E00               	movlw	0
  7156   001D86  6E31               	movwf	_state@SystemTimer$F847^0,c
  7157   001D88  0012               	return		;funcret
  7158   001D8A                     __end_of_initSysTimer:
  7159                           	callstack 0
  7160                           
  7161 ;; *************** function _initSIO *****************
  7162 ;; Defined at:
  7163 ;;		line 3 in file "SIO.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, status,2
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1
  7177 ;;      Params:         0       0       0
  7178 ;;      Locals:         0       0       0
  7179 ;;      Temps:          0       0       0
  7180 ;;      Totals:         0       0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used: 1
  7183 ;; Hardware stack levels required when called: 2
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		_main
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text50
  7192   001CF4                     __ptext50:
  7193                           	callstack 0
  7194   001CF4                     _initSIO:
  7195                           	callstack 28
  7196                           
  7197                           ;SIO.c: 4:     SPBRGH = 0;
  7198                           
  7199                           ;incstack = 0
  7200   001CF4  0E00               	movlw	0
  7201   001CF6  6EB0               	movwf	176,c	;volatile
  7202                           
  7203                           ;SIO.c: 5:     SPBRG = 172;
  7204   001CF8  0EAC               	movlw	172
  7205   001CFA  6EAF               	movwf	175,c	;volatile
  7206                           
  7207                           ;SIO.c: 6:     BAUDCONbits.BRG16 = 1;
  7208   001CFC  86B8               	bsf	184,3,c	;volatile
  7209                           
  7210                           ;SIO.c: 7:     BAUDCONbits.ABDEN = 0;
  7211   001CFE  90B8               	bcf	184,0,c	;volatile
  7212                           
  7213                           ;SIO.c: 8:     TXSTAbits.BRGH = 1;
  7214   001D00  84AC               	bsf	172,2,c	;volatile
  7215                           
  7216                           ;SIO.c: 9:     TXSTAbits.SYNC = 0;
  7217   001D02  98AC               	bcf	172,4,c	;volatile
  7218                           
  7219                           ;SIO.c: 10:     TXSTAbits.TXEN = 1;
  7220   001D04  8AAC               	bsf	172,5,c	;volatile
  7221                           
  7222                           ;SIO.c: 11:     RCSTAbits.SPEN = 1;
  7223   001D06  8EAB               	bsf	171,7,c	;volatile
  7224                           
  7225                           ;SIO.c: 12:     RCSTAbits.CREN = 1;
  7226   001D08  88AB               	bsf	171,4,c	;volatile
  7227                           
  7228                           ;SIO.c: 14:     TRISCbits.RC6 = 1;
  7229   001D0A  8C94               	bsf	148,6,c	;volatile
  7230                           
  7231                           ;SIO.c: 15:     TRISCbits.RC7 = 1;
  7232   001D0C  8E94               	bsf	148,7,c	;volatile
  7233   001D0E  0012               	return		;funcret
  7234   001D10                     __end_of_initSIO:
  7235                           	callstack 0
  7236                           
  7237 ;; *************** function _initMenu *****************
  7238 ;; Defined at:
  7239 ;;		line 38 in file "Menu.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1
  7253 ;;      Params:         0       0       0
  7254 ;;      Locals:         0       0       0
  7255 ;;      Temps:          0       0       0
  7256 ;;      Totals:         0       0       0
  7257 ;;Total ram usage:        0 bytes
  7258 ;; Hardware stack levels used: 1
  7259 ;; Hardware stack levels required when called: 3
  7260 ;; This function calls:
  7261 ;;		_TI_NewTimer
  7262 ;; This function is called by:
  7263 ;;		_main
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text51
  7268   00002C                     __ptext51:
  7269                           	callstack 0
  7270   00002C                     _initMenu:
  7271                           	callstack 27
  7272                           
  7273                           ;Menu.c: 39:     TI_NewTimer(&timer);
  7274                           
  7275                           ;incstack = 0
  7276   00002C  0E4A               	movlw	low _timer
  7277   00002E  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7278   000030  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7279   000032  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7280                           
  7281                           ;Menu.c: 40:     TI_NewTimer(&songTimer);
  7282   000036  0E49               	movlw	low _songTimer
  7283   000038  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7284   00003A  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7285   00003C  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7286   000040  0012               	return		;funcret
  7287   000042                     __end_of_initMenu:
  7288                           	callstack 0
  7289                           
  7290 ;; *************** function _initMemory *****************
  7291 ;; Defined at:
  7292 ;;		line 13 in file "EEPROM.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;		None
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;		None
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  1    wreg      void 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1
  7306 ;;      Params:         0       0       0
  7307 ;;      Locals:         0       0       0
  7308 ;;      Temps:          0       0       0
  7309 ;;      Totals:         0       0       0
  7310 ;;Total ram usage:        0 bytes
  7311 ;; Hardware stack levels used: 1
  7312 ;; Hardware stack levels required when called: 2
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_main
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text52
  7321   0000B8                     __ptext52:
  7322                           	callstack 0
  7323   0000B8                     _initMemory:
  7324                           	callstack 28
  7325                           
  7326                           ;EEPROM.c: 14:     state = 40;
  7327                           
  7328                           ;incstack = 0
  7329   0000B8  0E28               	movlw	40
  7330   0000BA  6E28               	movwf	_state@EEPROM$F1455^0,c
  7331                           
  7332                           ;EEPROM.c: 15:     indexTemp = 0;
  7333   0000BC  0E00               	movlw	0
  7334   0000BE  6E27               	movwf	_indexTemp^0,c
  7335                           
  7336                           ;EEPROM.c: 16:     indexEEPROM = 0;
  7337   0000C0  0E00               	movlw	0
  7338   0000C2  6E26               	movwf	_indexEEPROM^0,c
  7339   0000C4  0012               	return		;funcret
  7340   0000C6                     __end_of_initMemory:
  7341                           	callstack 0
  7342                           
  7343 ;; *************** function _initKeypad *****************
  7344 ;; Defined at:
  7345 ;;		line 21 in file "Keypad.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;		None
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;		None
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      void 
  7352 ;; Registers used:
  7353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1
  7359 ;;      Params:         0       0       0
  7360 ;;      Locals:         0       0       0
  7361 ;;      Temps:          0       0       0
  7362 ;;      Totals:         0       0       0
  7363 ;;Total ram usage:        0 bytes
  7364 ;; Hardware stack levels used: 1
  7365 ;; Hardware stack levels required when called: 3
  7366 ;; This function calls:
  7367 ;;		_TI_NewTimer
  7368 ;; This function is called by:
  7369 ;;		_main
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text53
  7374   001C08                     __ptext53:
  7375                           	callstack 0
  7376   001C08                     _initKeypad:
  7377                           	callstack 27
  7378                           
  7379                           ;Keypad.c: 22:     INTCON2bits.RBPU = 0;
  7380                           
  7381                           ;incstack = 0
  7382   001C08  9EF1               	bcf	241,7,c	;volatile
  7383                           
  7384                           ;Keypad.c: 24:     TRISBbits.TRISB1 = 1;
  7385   001C0A  8293               	bsf	147,1,c	;volatile
  7386                           
  7387                           ;Keypad.c: 25:     TRISBbits.TRISB2 = 0;
  7388   001C0C  9493               	bcf	147,2,c	;volatile
  7389                           
  7390                           ;Keypad.c: 26:     TRISBbits.TRISB3 = 1;
  7391   001C0E  8693               	bsf	147,3,c	;volatile
  7392                           
  7393                           ;Keypad.c: 27:     TRISBbits.TRISB4 = 0;
  7394   001C10  9893               	bcf	147,4,c	;volatile
  7395                           
  7396                           ;Keypad.c: 28:     TRISBbits.TRISB5 = 1;
  7397   001C12  8A93               	bsf	147,5,c	;volatile
  7398                           
  7399                           ;Keypad.c: 29:     TRISBbits.TRISB6 = 0;
  7400   001C14  9C93               	bcf	147,6,c	;volatile
  7401                           
  7402                           ;Keypad.c: 30:     TRISBbits.TRISB7 = 0;
  7403   001C16  9E93               	bcf	147,7,c	;volatile
  7404                           
  7405                           ;Keypad.c: 31:     TI_NewTimer(&timerBounces);
  7406   001C18  0E45               	movlw	low _timerBounces
  7407   001C1A  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7408   001C1C  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7409   001C1E  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7410                           
  7411                           ;Keypad.c: 32:     TI_NewTimer(&timer_SMS);
  7412   001C22  0E44               	movlw	low _timer_SMS
  7413   001C24  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7414   001C26  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7415   001C28  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7416   001C2C  0012               	return		;funcret
  7417   001C2E                     __end_of_initKeypad:
  7418                           	callstack 0
  7419                           
  7420 ;; *************** function _initJoystick *****************
  7421 ;; Defined at:
  7422 ;;		line 10 in file "Joystick.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  1    wreg      void 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1
  7436 ;;      Params:         0       0       0
  7437 ;;      Locals:         0       0       0
  7438 ;;      Temps:          0       0       0
  7439 ;;      Totals:         0       0       0
  7440 ;;Total ram usage:        0 bytes
  7441 ;; Hardware stack levels used: 1
  7442 ;; Hardware stack levels required when called: 2
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_main
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           	psect	text54
  7451   001CB6                     __ptext54:
  7452                           	callstack 0
  7453   001CB6                     _initJoystick:
  7454                           	callstack 28
  7455                           
  7456                           ;Joystick.c: 11:     TRISAbits.TRISA0 = 1;
  7457                           
  7458                           ;incstack = 0
  7459   001CB6  8092               	bsf	146,0,c	;volatile
  7460                           
  7461                           ;Joystick.c: 12:     TRISAbits.TRISA1 = 1;
  7462   001CB8  8292               	bsf	146,1,c	;volatile
  7463                           
  7464                           ;Joystick.c: 13:     ADCON0 = 0x03;
  7465   001CBA  0E03               	movlw	3
  7466   001CBC  6EC2               	movwf	194,c	;volatile
  7467                           
  7468                           ;Joystick.c: 14:     ADCON1 = 0x0C;
  7469   001CBE  0E0C               	movlw	12
  7470   001CC0  6EC1               	movwf	193,c	;volatile
  7471                           
  7472                           ;Joystick.c: 15:     ADCON2 = 0x44;
  7473   001CC2  0E44               	movlw	68
  7474   001CC4  6EC0               	movwf	192,c	;volatile
  7475                           
  7476                           ;Joystick.c: 17:     hasMoved = 0;
  7477   001CC6  0E00               	movlw	0
  7478   001CC8  6E41               	movwf	_hasMoved^0,c
  7479                           
  7480                           ;Joystick.c: 18:     ADCON0bits.GO_DONE=1;
  7481   001CCA  82C2               	bsf	194,1,c	;volatile
  7482                           
  7483                           ;Joystick.c: 19:     ADCON0bits.CHS0=1;
  7484   001CCC  84C2               	bsf	194,2,c	;volatile
  7485                           
  7486                           ;Joystick.c: 20:     ADCON0bits.CHS1=0;
  7487   001CCE  96C2               	bcf	194,3,c	;volatile
  7488                           
  7489                           ;Joystick.c: 21:     state = 0;
  7490   001CD0  0E00               	movlw	0
  7491   001CD2  6E43               	movwf	_state^0,c
  7492   001CD4  0012               	return		;funcret
  7493   001CD6                     __end_of_initJoystick:
  7494                           	callstack 0
  7495                           
  7496 ;; *************** function _initAudio *****************
  7497 ;; Defined at:
  7498 ;;		line 11 in file "Audio.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;		None
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;		None
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMRAM   BANK0   BANK1
  7512 ;;      Params:         0       0       0
  7513 ;;      Locals:         0       0       0
  7514 ;;      Temps:          0       0       0
  7515 ;;      Totals:         0       0       0
  7516 ;;Total ram usage:        0 bytes
  7517 ;; Hardware stack levels used: 1
  7518 ;; Hardware stack levels required when called: 3
  7519 ;; This function calls:
  7520 ;;		_TI_NewTimer
  7521 ;; This function is called by:
  7522 ;;		_main
  7523 ;; This function uses a non-reentrant model
  7524 ;;
  7525                           
  7526                           	psect	text55
  7527   001D8A                     __ptext55:
  7528                           	callstack 0
  7529   001D8A                     _initAudio:
  7530                           	callstack 27
  7531                           
  7532                           ;Audio.c: 12:     TRISCbits.TRISC2 = 0;
  7533                           
  7534                           ;incstack = 0
  7535   001D8A  9494               	bcf	148,2,c	;volatile
  7536                           
  7537                           ;Audio.c: 14:     TI_NewTimer(&pTime);
  7538   001D8C  0E48               	movlw	low _pTime
  7539   001D8E  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7540   001D90  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7541   001D92  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7542                           
  7543                           ;Audio.c: 15:     TI_NewTimer(&songTime);
  7544   001D96  0E47               	movlw	low _songTime
  7545   001D98  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7546   001D9A  6A4C               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7547   001D9C  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7548   001DA0  0012               	return		;funcret
  7549   001DA2                     __end_of_initAudio:
  7550                           	callstack 0
  7551                           
  7552 ;; *************** function _audioLoop *****************
  7553 ;; Defined at:
  7554 ;;		line 18 in file "Audio.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1
  7568 ;;      Params:         0       0       0
  7569 ;;      Locals:         0       0       0
  7570 ;;      Temps:          4       0       0
  7571 ;;      Totals:         4       0       0
  7572 ;;Total ram usage:        4 bytes
  7573 ;; Hardware stack levels used: 1
  7574 ;; Hardware stack levels required when called: 3
  7575 ;; This function calls:
  7576 ;;		_TI_GetTics
  7577 ;;		_TI_ResetTics
  7578 ;; This function is called by:
  7579 ;;		_main
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text56
  7584   00140E                     __ptext56:
  7585                           	callstack 0
  7586   00140E                     _audioLoop:
  7587                           	callstack 27
  7588                           
  7589                           ;Audio.c: 19:     switch(state){
  7590                           
  7591                           ;incstack = 0
  7592   00140E  D040               	goto	l3810
  7593   001410                     l566:
  7594                           
  7595                           ;Audio.c: 22:             LATCbits.LATC2=0;
  7596   001410  948B               	bcf	139,2,c	;volatile
  7597                           
  7598                           ;Audio.c: 23:             break;
  7599   001412  0012               	return	
  7600   001414                     l3792:
  7601                           
  7602                           ;Audio.c: 25:             if (TI_GetTics(pTime)>= (period+1)){
  7603   001414  0E01               	movlw	1
  7604   001416  2432               	addwf	_period^0,w,c
  7605   001418  6E58               	movwf	??_audioLoop^0,c
  7606   00141A  6A59               	clrf	(??_audioLoop+1)^0,c
  7607   00141C  0E00               	movlw	0
  7608   00141E  2259               	addwfc	(??_audioLoop+1)^0,f,c
  7609   001420  6A5A               	clrf	(??_audioLoop+2)^0,c
  7610   001422  BE59               	btfsc	(??_audioLoop+1)^0,7,c
  7611   001424  065A               	decf	(??_audioLoop+2)^0,f,c
  7612   001426  505A               	movf	(??_audioLoop+2)^0,w,c
  7613   001428  6E5B               	movwf	(??_audioLoop+3)^0,c
  7614   00142A  5048               	movf	_pTime^0,w,c
  7615   00142C  EC6C  F00C         	call	_TI_GetTics
  7616   001430  5058               	movf	??_audioLoop^0,w,c
  7617   001432  5C4B               	subwf	?_TI_GetTics^0,w,c
  7618   001434  5059               	movf	(??_audioLoop+1)^0,w,c
  7619   001436  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  7620   001438  505A               	movf	(??_audioLoop+2)^0,w,c
  7621   00143A  584D               	subwfb	(?_TI_GetTics+2)^0,w,c
  7622   00143C  505B               	movf	(??_audioLoop+3)^0,w,c
  7623   00143E  584E               	subwfb	(?_TI_GetTics+3)^0,w,c
  7624   001440  A0D8               	btfss	status,0,c
  7625   001442  0012               	return	
  7626                           
  7627                           ;Audio.c: 26:                 TI_ResetTics(pTime);
  7628   001444  5048               	movf	_pTime^0,w,c
  7629   001446  ECDD  F00D         	call	_TI_ResetTics
  7630                           
  7631                           ;Audio.c: 27:                 LATCbits.LATC2=1;
  7632   00144A  848B               	bsf	139,2,c	;volatile
  7633                           
  7634                           ;Audio.c: 28:                 state = 2;
  7635   00144C  0E02               	movlw	2
  7636   00144E  6E33               	movwf	_state@Audio$F811^0,c
  7637   001450  0012               	return	
  7638   001452                     l3800:
  7639                           
  7640                           ;Audio.c: 32:             if (TI_GetTics(pTime)>= (period+1)){
  7641   001452  0E01               	movlw	1
  7642   001454  2432               	addwf	_period^0,w,c
  7643   001456  6E58               	movwf	??_audioLoop^0,c
  7644   001458  6A59               	clrf	(??_audioLoop+1)^0,c
  7645   00145A  0E00               	movlw	0
  7646   00145C  2259               	addwfc	(??_audioLoop+1)^0,f,c
  7647   00145E  6A5A               	clrf	(??_audioLoop+2)^0,c
  7648   001460  BE59               	btfsc	(??_audioLoop+1)^0,7,c
  7649   001462  065A               	decf	(??_audioLoop+2)^0,f,c
  7650   001464  505A               	movf	(??_audioLoop+2)^0,w,c
  7651   001466  6E5B               	movwf	(??_audioLoop+3)^0,c
  7652   001468  5048               	movf	_pTime^0,w,c
  7653   00146A  EC6C  F00C         	call	_TI_GetTics
  7654   00146E  5058               	movf	??_audioLoop^0,w,c
  7655   001470  5C4B               	subwf	?_TI_GetTics^0,w,c
  7656   001472  5059               	movf	(??_audioLoop+1)^0,w,c
  7657   001474  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  7658   001476  505A               	movf	(??_audioLoop+2)^0,w,c
  7659   001478  584D               	subwfb	(?_TI_GetTics+2)^0,w,c
  7660   00147A  505B               	movf	(??_audioLoop+3)^0,w,c
  7661   00147C  584E               	subwfb	(?_TI_GetTics+3)^0,w,c
  7662   00147E  A0D8               	btfss	status,0,c
  7663   001480  0012               	return	
  7664                           
  7665                           ;Audio.c: 33:                 TI_ResetTics(pTime);
  7666   001482  5048               	movf	_pTime^0,w,c
  7667   001484  ECDD  F00D         	call	_TI_ResetTics
  7668                           
  7669                           ;Audio.c: 34:                 LATCbits.LATC2=0;
  7670   001488  948B               	bcf	139,2,c	;volatile
  7671                           
  7672                           ;Audio.c: 35:                 state = 1;
  7673   00148A  0E01               	movlw	1
  7674   00148C  6E33               	movwf	_state@Audio$F811^0,c
  7675   00148E  0012               	return	
  7676   001490                     l3810:
  7677   001490  5033               	movf	_state@Audio$F811^0,w,c
  7678   001492  6E58               	movwf	??_audioLoop^0,c
  7679   001494  6A59               	clrf	(??_audioLoop+1)^0,c
  7680                           
  7681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7682                           ; Switch size 1, requested type "simple"
  7683                           ; Number of cases is 1, Range of values is 0 to 0
  7684                           ; switch strategies available:
  7685                           ; Name         Instructions Cycles
  7686                           ; simple_byte            4     3 (average)
  7687                           ;	Chosen strategy is simple_byte
  7688   001496  5059               	movf	(??_audioLoop+1)^0,w,c
  7689   001498  0A00               	xorlw	0	; case 0
  7690   00149A  A4D8               	btfss	status,2,c
  7691   00149C  0012               	return	
  7692                           
  7693                           ; Switch size 1, requested type "simple"
  7694                           ; Number of cases is 3, Range of values is 0 to 2
  7695                           ; switch strategies available:
  7696                           ; Name         Instructions Cycles
  7697                           ; simple_byte           10     6 (average)
  7698                           ;	Chosen strategy is simple_byte
  7699   00149E  5058               	movf	??_audioLoop^0,w,c
  7700   0014A0  0A00               	xorlw	0	; case 0
  7701   0014A2  B4D8               	btfsc	status,2,c
  7702   0014A4  D7B5               	goto	l566
  7703   0014A6  0A01               	xorlw	1	; case 1
  7704   0014A8  B4D8               	btfsc	status,2,c
  7705   0014AA  D7B4               	goto	l3792
  7706   0014AC  0A03               	xorlw	3	; case 2
  7707   0014AE  A4D8               	btfss	status,2,c
  7708   0014B0  0012               	return	
  7709   0014B2  D7CF               	goto	l3800
  7710   0014B4                     __end_of_audioLoop:
  7711                           	callstack 0
  7712                           
  7713 ;; *************** function _TI_Init *****************
  7714 ;; Defined at:
  7715 ;;		line 33 in file "Timer.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;		None
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  counter         1    0[COMRAM] unsigned char 
  7720 ;; Return value:  Size  Location     Type
  7721 ;;                  1    wreg      void 
  7722 ;; Registers used:
  7723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMRAM   BANK0   BANK1
  7729 ;;      Params:         0       0       0
  7730 ;;      Locals:         1       0       0
  7731 ;;      Temps:          0       0       0
  7732 ;;      Totals:         1       0       0
  7733 ;;Total ram usage:        1 bytes
  7734 ;; Hardware stack levels used: 1
  7735 ;; Hardware stack levels required when called: 2
  7736 ;; This function calls:
  7737 ;;		Nothing
  7738 ;; This function is called by:
  7739 ;;		_main
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           	psect	text57
  7744   001B06                     __ptext57:
  7745                           	callstack 0
  7746   001B06                     _TI_Init:
  7747                           	callstack 28
  7748                           
  7749                           ;Timer.c: 35:  for (unsigned char counter=0; counter<15; counter++) {
  7750                           
  7751                           ;incstack = 0
  7752   001B06  0E00               	movlw	0
  7753   001B08  6E4B               	movwf	TI_Init@counter^0,c
  7754   001B0A                     l3712:
  7755                           
  7756                           ;Timer.c: 36:   Timers[counter].Busy=0;
  7757   001B0A  504B               	movf	TI_Init@counter^0,w,c
  7758   001B0C  0D05               	mullw	5
  7759   001B0E  0E04               	movlw	low (_Timers+4)
  7760   001B10  24F3               	addwf	243,w,c
  7761   001B12  6ED9               	movwf	fsr2l,c
  7762   001B14  0E01               	movlw	high (_Timers+4)
  7763   001B16  20F4               	addwfc	prodh,w,c
  7764   001B18  6EDA               	movwf	fsr2h,c
  7765   001B1A  6ADF               	clrf	indf2,c
  7766                           
  7767                           ;Timer.c: 37:  }
  7768   001B1C  2A4B               	incf	TI_Init@counter^0,f,c
  7769   001B1E  0E0E               	movlw	14
  7770   001B20  644B               	cpfsgt	TI_Init@counter^0,c
  7771   001B22  D7F3               	goto	l3712
  7772                           
  7773                           ;Timer.c: 38:  T0CON=0x82;
  7774   001B24  0E82               	movlw	130
  7775   001B26  6ED5               	movwf	213,c	;volatile
  7776                           
  7777                           ;Timer.c: 39:     TMR0=64911;
  7778   001B28  0EFD               	movlw	253
  7779   001B2A  6ED7               	movwf	215,c	;volatile
  7780   001B2C  0E8F               	movlw	143
  7781   001B2E  6ED6               	movwf	214,c	;volatile
  7782                           
  7783                           ;Timer.c: 40:  INTCONbits.TMR0IF = 0;
  7784   001B30  94F2               	bcf	242,2,c	;volatile
  7785                           
  7786                           ;Timer.c: 41:  INTCONbits.TMR0IE = 1;
  7787   001B32  8AF2               	bsf	242,5,c	;volatile
  7788   001B34  0012               	return		;funcret
  7789   001B36                     __end_of_TI_Init:
  7790                           	callstack 0
  7791                           
  7792 ;; *************** function _LcInit *****************
  7793 ;; Defined at:
  7794 ;;		line 68 in file "LcTLCD.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;  rows            1    wreg     unsigned char 
  7797 ;;  columns         1   21[COMRAM] unsigned char 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;  rows            1   22[COMRAM] unsigned char 
  7800 ;;  i               2   23[COMRAM] int 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  1    wreg      void 
  7803 ;; Registers used:
  7804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1
  7810 ;;      Params:         1       0       0
  7811 ;;      Locals:         3       0       0
  7812 ;;      Temps:          0       0       0
  7813 ;;      Totals:         4       0       0
  7814 ;;Total ram usage:        4 bytes
  7815 ;; Hardware stack levels used: 1
  7816 ;; Hardware stack levels required when called: 4
  7817 ;; This function calls:
  7818 ;;		_CantaIR
  7819 ;;		_EscriuPrimeraOrdre
  7820 ;;		_Espera
  7821 ;;		_TI_NewTimer
  7822 ;;		_WaitForBusy
  7823 ;; This function is called by:
  7824 ;;		_main
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           	psect	text58
  7829   0010EA                     __ptext58:
  7830                           	callstack 0
  7831   0010EA                     _LcInit:
  7832                           	callstack 26
  7833                           
  7834                           ;incstack = 0
  7835                           ;LcInit@rows stored from wreg
  7836   0010EA  6E61               	movwf	LcInit@rows^0,c
  7837                           
  7838                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:     TI_NewTimer(Timer);
  7839   0010EC  0E00               	movlw	0
  7840   0010EE  6E4B               	movwf	TI_NewTimer@TimerHandle^0,c
  7841   0010F0  0E00               	movlw	0
  7842   0010F2  6E4C               	movwf	(TI_NewTimer@TimerHandle+1)^0,c
  7843   0010F4  ECB8  F00C         	call	_TI_NewTimer	;wreg free
  7844                           
  7845                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  7846   0010F8  C061  F03E         	movff	LcInit@rows,_Rows
  7847   0010FC  C060  F03D         	movff	LcInit@columns,_Columns
  7848                           
  7849                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  7850   001100  0E00               	movlw	0
  7851   001102  6E3B               	movwf	_ColumnAct^0,c
  7852   001104  C03B  F03C         	movff	_ColumnAct,_RowAct
  7853                           
  7854                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  7855   001108  9C95               	bcf	149,6,c	;volatile
  7856   00110A  9A95               	bcf	149,5,c	;volatile
  7857   00110C  9895               	bcf	149,4,c	;volatile
  7858                           
  7859                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  7860   00110E  0E00               	movlw	0
  7861   001110  6E63               	movwf	(LcInit@i+1)^0,c
  7862   001112  0E00               	movlw	0
  7863   001114  6E62               	movwf	LcInit@i^0,c
  7864   001116                     l3744:
  7865                           
  7866                           ;LcTLCD.c: 80:   Espera(Timer, 200);
  7867   001116  0E00               	movlw	0
  7868   001118  6E59               	movwf	(Espera@Timer+1)^0,c
  7869   00111A  0E00               	movlw	0
  7870   00111C  6E58               	movwf	Espera@Timer^0,c
  7871   00111E  0E00               	movlw	0
  7872   001120  6E5B               	movwf	(Espera@ms+1)^0,c
  7873   001122  0EC8               	movlw	200
  7874   001124  6E5A               	movwf	Espera@ms^0,c
  7875   001126  EC37  F00D         	call	_Espera	;wreg free
  7876                           
  7877                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  7878   00112A  0E03               	movlw	3
  7879   00112C  EC29  F00B         	call	_EscriuPrimeraOrdre
  7880                           
  7881                           ;LcTLCD.c: 84:   Espera(Timer, 100);
  7882   001130  0E00               	movlw	0
  7883   001132  6E59               	movwf	(Espera@Timer+1)^0,c
  7884   001134  0E00               	movlw	0
  7885   001136  6E58               	movwf	Espera@Timer^0,c
  7886   001138  0E00               	movlw	0
  7887   00113A  6E5B               	movwf	(Espera@ms+1)^0,c
  7888   00113C  0E64               	movlw	100
  7889   00113E  6E5A               	movwf	Espera@ms^0,c
  7890   001140  EC37  F00D         	call	_Espera	;wreg free
  7891                           
  7892                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7893   001144  0E03               	movlw	3
  7894   001146  EC29  F00B         	call	_EscriuPrimeraOrdre
  7895                           
  7896                           ;LcTLCD.c: 86:   Espera(Timer, 2);
  7897   00114A  0E00               	movlw	0
  7898   00114C  6E59               	movwf	(Espera@Timer+1)^0,c
  7899   00114E  0E00               	movlw	0
  7900   001150  6E58               	movwf	Espera@Timer^0,c
  7901   001152  0E00               	movlw	0
  7902   001154  6E5B               	movwf	(Espera@ms+1)^0,c
  7903   001156  0E02               	movlw	2
  7904   001158  6E5A               	movwf	Espera@ms^0,c
  7905   00115A  EC37  F00D         	call	_Espera	;wreg free
  7906                           
  7907                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7908   00115E  0E03               	movlw	3
  7909   001160  EC29  F00B         	call	_EscriuPrimeraOrdre
  7910                           
  7911                           ;LcTLCD.c: 88:   Espera(Timer, 2);
  7912   001164  0E00               	movlw	0
  7913   001166  6E59               	movwf	(Espera@Timer+1)^0,c
  7914   001168  0E00               	movlw	0
  7915   00116A  6E58               	movwf	Espera@Timer^0,c
  7916   00116C  0E00               	movlw	0
  7917   00116E  6E5B               	movwf	(Espera@ms+1)^0,c
  7918   001170  0E02               	movlw	2
  7919   001172  6E5A               	movwf	Espera@ms^0,c
  7920   001174  EC37  F00D         	call	_Espera	;wreg free
  7921                           
  7922                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  7923   001178  0E02               	movlw	2
  7924   00117A  EC29  F00B         	call	_EscriuPrimeraOrdre
  7925                           
  7926                           ;LcTLCD.c: 92:   Espera(Timer, 2);
  7927   00117E  0E00               	movlw	0
  7928   001180  6E59               	movwf	(Espera@Timer+1)^0,c
  7929   001182  0E00               	movlw	0
  7930   001184  6E58               	movwf	Espera@Timer^0,c
  7931   001186  0E00               	movlw	0
  7932   001188  6E5B               	movwf	(Espera@ms+1)^0,c
  7933   00118A  0E02               	movlw	2
  7934   00118C  6E5A               	movwf	Espera@ms^0,c
  7935   00118E  EC37  F00D         	call	_Espera	;wreg free
  7936                           
  7937                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  7938   001192  0E28               	movlw	40
  7939   001194  EC6A  F00D         	call	_CantaIR
  7940                           
  7941                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  7942   001198  ECDC  F00C         	call	_WaitForBusy	;wreg free
  7943   00119C  0E08               	movlw	8
  7944   00119E  EC6A  F00D         	call	_CantaIR
  7945                           
  7946                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  7947   0011A2  ECDC  F00C         	call	_WaitForBusy	;wreg free
  7948   0011A6  0E01               	movlw	1
  7949   0011A8  EC6A  F00D         	call	_CantaIR
  7950                           
  7951                           ;LcTLCD.c: 98:   Espera(Timer,6);
  7952   0011AC  0E00               	movlw	0
  7953   0011AE  6E59               	movwf	(Espera@Timer+1)^0,c
  7954   0011B0  0E00               	movlw	0
  7955   0011B2  6E58               	movwf	Espera@Timer^0,c
  7956   0011B4  0E00               	movlw	0
  7957   0011B6  6E5B               	movwf	(Espera@ms+1)^0,c
  7958   0011B8  0E06               	movlw	6
  7959   0011BA  6E5A               	movwf	Espera@ms^0,c
  7960   0011BC  EC37  F00D         	call	_Espera	;wreg free
  7961                           
  7962                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  7963   0011C0  ECDC  F00C         	call	_WaitForBusy	;wreg free
  7964   0011C4  0E06               	movlw	6
  7965   0011C6  EC6A  F00D         	call	_CantaIR
  7966                           
  7967                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  7968   0011CA  ECDC  F00C         	call	_WaitForBusy	;wreg free
  7969   0011CE  0E0F               	movlw	15
  7970   0011D0  EC6A  F00D         	call	_CantaIR
  7971                           
  7972                           ;LcTLCD.c: 101:  }
  7973   0011D4  4A62               	infsnz	LcInit@i^0,f,c
  7974   0011D6  2A63               	incf	(LcInit@i+1)^0,f,c
  7975   0011D8  BE63               	btfsc	(LcInit@i+1)^0,7,c
  7976   0011DA  D79D               	goto	l3744
  7977   0011DC  5063               	movf	(LcInit@i+1)^0,w,c
  7978   0011DE  E105               	bnz	u2960
  7979   0011E0  0E02               	movlw	2
  7980   0011E2  5C62               	subwf	LcInit@i^0,w,c
  7981   0011E4  B0D8               	btfsc	status,0,c
  7982   0011E6  0012               	return	
  7983   0011E8  D796               	goto	l3744
  7984   0011EA                     u2960:
  7985   0011EA  0012               	return		;funcret
  7986   0011EC                     __end_of_LcInit:
  7987                           	callstack 0
  7988                           
  7989 ;; *************** function _WaitForBusy *****************
  7990 ;; Defined at:
  7991 ;;		line 261 in file "LcTLCD.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;		None
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  Busy            1   13[COMRAM] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      void 
  7998 ;; Registers used:
  7999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1
  8005 ;;      Params:         0       0       0
  8006 ;;      Locals:         1       0       0
  8007 ;;      Temps:          0       0       0
  8008 ;;      Totals:         1       0       0
  8009 ;;Total ram usage:        1 bytes
  8010 ;; Hardware stack levels used: 1
  8011 ;; Hardware stack levels required when called: 3
  8012 ;; This function calls:
  8013 ;;		_TI_GetTics
  8014 ;;		_TI_ResetTics
  8015 ;; This function is called by:
  8016 ;;		_LcInit
  8017 ;;		_LcClear
  8018 ;;		_LcCursorOn
  8019 ;;		_LcCursorOff
  8020 ;;		_LcGotoXY
  8021 ;;		_LcPutChar
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text59
  8026   0019B8                     __ptext59:
  8027                           	callstack 0
  8028   0019B8                     _WaitForBusy:
  8029                           	callstack 25
  8030                           
  8031                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  8032                           
  8033                           ;incstack = 0
  8034   0019B8  8695               	bsf	149,3,c	;volatile
  8035   0019BA  8495               	bsf	149,2,c	;volatile
  8036   0019BC  8295               	bsf	149,1,c	;volatile
  8037   0019BE  8095               	bsf	149,0,c	;volatile
  8038                           
  8039                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  8040   0019C0  988C               	bcf	140,4,c	;volatile
  8041                           
  8042                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  8043   0019C2  8A8C               	bsf	140,5,c	;volatile
  8044                           
  8045                           ;LcTLCD.c: 265:  TI_ResetTics(Timer);
  8046   0019C4  0E00               	movlw	0
  8047   0019C6  ECDD  F00D         	call	_TI_ResetTics
  8048   0019CA                     l3246:
  8049                           
  8050                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  8051   0019CA  8C8C               	bsf	140,6,c	;volatile
  8052   0019CC  8C8C               	bsf	140,6,c	;volatile
  8053                           
  8054                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  8055   0019CE  0E00               	movlw	0
  8056   0019D0  B683               	btfsc	131,3,c	;volatile
  8057   0019D2  0E01               	movlw	1
  8058   0019D4  6E58               	movwf	WaitForBusy@Busy^0,c
  8059                           
  8060                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  8061   0019D6  9C8C               	bcf	140,6,c	;volatile
  8062                           
  8063                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  8064   0019D8  9C8C               	bcf	140,6,c	;volatile
  8065                           
  8066                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  8067   0019DA  8C8C               	bsf	140,6,c	;volatile
  8068   0019DC  8C8C               	bsf	140,6,c	;volatile
  8069                           
  8070                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  8071   0019DE  9C8C               	bcf	140,6,c	;volatile
  8072                           
  8073                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  8074   0019E0  9C8C               	bcf	140,6,c	;volatile
  8075                           
  8076                           ;LcTLCD.c: 275:   if (TI_GetTics(Timer)) break;
  8077   0019E2  0E00               	movlw	0
  8078   0019E4  EC6C  F00C         	call	_TI_GetTics
  8079   0019E8  504B               	movf	?_TI_GetTics^0,w,c
  8080   0019EA  104C               	iorwf	(?_TI_GetTics+1)^0,w,c
  8081   0019EC  104D               	iorwf	(?_TI_GetTics+2)^0,w,c
  8082   0019EE  104E               	iorwf	(?_TI_GetTics+3)^0,w,c
  8083   0019F0  A4D8               	btfss	status,2,c
  8084   0019F2  0012               	return	
  8085                           
  8086                           ;LcTLCD.c: 276:  } while(Busy);
  8087   0019F4  5058               	movf	WaitForBusy@Busy^0,w,c
  8088   0019F6  B4D8               	btfsc	status,2,c
  8089   0019F8  0012               	return	
  8090   0019FA  D7E7               	goto	l3246
  8091   0019FC                     __end_of_WaitForBusy:
  8092                           	callstack 0
  8093                           
  8094 ;; *************** function _TI_NewTimer *****************
  8095 ;; Defined at:
  8096 ;;		line 44 in file "Timer.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;  TimerHandle     2    0[COMRAM] PTR unsigned char 
  8099 ;;		 -> NULL(0), timer_SMS(1), timerBounces(1), sysTmr(1), 
  8100 ;;		 -> songTime(1), pTime(1), songTimer(1), timer(1), 
  8101 ;;		 -> RAM(511), 
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  Counter         1    3[COMRAM] unsigned char 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      unsigned char 
  8106 ;; Registers used:
  8107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMRAM   BANK0   BANK1
  8113 ;;      Params:         2       0       0
  8114 ;;      Locals:         1       0       0
  8115 ;;      Temps:          1       0       0
  8116 ;;      Totals:         4       0       0
  8117 ;;Total ram usage:        4 bytes
  8118 ;; Hardware stack levels used: 1
  8119 ;; Hardware stack levels required when called: 2
  8120 ;; This function calls:
  8121 ;;		Nothing
  8122 ;; This function is called by:
  8123 ;;		_LcInit
  8124 ;;		_initMenu
  8125 ;;		_initAudio
  8126 ;;		_initSysTimer
  8127 ;;		_initKeypad
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           	psect	text60
  8132   001970                     __ptext60:
  8133                           	callstack 0
  8134   001970                     _TI_NewTimer:
  8135                           	callstack 27
  8136                           
  8137                           ;Timer.c: 45:  unsigned char Counter=0;
  8138                           
  8139                           ;incstack = 0
  8140   001970  0E00               	movlw	0
  8141   001972  6E4E               	movwf	TI_NewTimer@Counter^0,c
  8142                           
  8143                           ;Timer.c: 46:  while (Timers[Counter].Busy==1) {
  8144   001974  D005               	goto	l3424
  8145   001976                     l3420:
  8146                           
  8147                           ;Timer.c: 47:   if (++Counter == 15) return (0);
  8148   001976  2A4E               	incf	TI_NewTimer@Counter^0,f,c
  8149   001978  0E0F               	movlw	15
  8150   00197A  184E               	xorwf	TI_NewTimer@Counter^0,w,c
  8151   00197C  B4D8               	btfsc	status,2,c
  8152   00197E  0012               	return	
  8153   001980                     l3424:
  8154                           
  8155                           ;Timer.c: 46:  while (Timers[Counter].Busy==1) {
  8156   001980  504E               	movf	TI_NewTimer@Counter^0,w,c
  8157   001982  0D05               	mullw	5
  8158   001984  0E04               	movlw	low (_Timers+4)
  8159   001986  24F3               	addwf	243,w,c
  8160   001988  6ED9               	movwf	fsr2l,c
  8161   00198A  0E01               	movlw	high (_Timers+4)
  8162   00198C  20F4               	addwfc	prodh,w,c
  8163   00198E  6EDA               	movwf	fsr2h,c
  8164   001990  04DE               	decf	postinc2,w,c
  8165   001992  B4D8               	btfsc	status,2,c
  8166   001994  D7F0               	goto	l3420
  8167                           
  8168                           ;Timer.c: 49:  Timers[Counter].Busy=1;
  8169   001996  504E               	movf	TI_NewTimer@Counter^0,w,c
  8170   001998  0D05               	mullw	5
  8171   00199A  0E04               	movlw	low (_Timers+4)
  8172   00199C  24F3               	addwf	243,w,c
  8173   00199E  6ED9               	movwf	fsr2l,c
  8174   0019A0  0E01               	movlw	high (_Timers+4)
  8175   0019A2  20F4               	addwfc	prodh,w,c
  8176   0019A4  6EDA               	movwf	fsr2h,c
  8177   0019A6  0E01               	movlw	1
  8178   0019A8  6EDF               	movwf	indf2,c
  8179                           
  8180                           ;Timer.c: 50:  *TimerHandle=Counter;
  8181   0019AA  C04B  FFD9         	movff	TI_NewTimer@TimerHandle,fsr2l
  8182   0019AE  C04C  FFDA         	movff	TI_NewTimer@TimerHandle+1,fsr2h
  8183   0019B2  C04E  FFDF         	movff	TI_NewTimer@Counter,indf2
  8184   0019B6  0012               	return		;funcret
  8185   0019B8                     __end_of_TI_NewTimer:
  8186                           	callstack 0
  8187                           
  8188 ;; *************** function _Espera *****************
  8189 ;; Defined at:
  8190 ;;		line 210 in file "LcTLCD.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;  Timer           2   13[COMRAM] int 
  8193 ;;  ms              2   15[COMRAM] int 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;		None
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      void 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1
  8205 ;;      Params:         4       0       0
  8206 ;;      Locals:         0       0       0
  8207 ;;      Temps:          4       0       0
  8208 ;;      Totals:         8       0       0
  8209 ;;Total ram usage:        8 bytes
  8210 ;; Hardware stack levels used: 1
  8211 ;; Hardware stack levels required when called: 3
  8212 ;; This function calls:
  8213 ;;		_TI_GetTics
  8214 ;;		_TI_ResetTics
  8215 ;; This function is called by:
  8216 ;;		_LcInit
  8217 ;;		_LcClear
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text61
  8222   001A6E                     __ptext61:
  8223                           	callstack 0
  8224   001A6E                     _Espera:
  8225                           	callstack 24
  8226                           
  8227                           ;LcTLCD.c: 211:  TI_ResetTics(Timer);
  8228                           
  8229                           ;incstack = 0
  8230   001A6E  5058               	movf	Espera@Timer^0,w,c
  8231   001A70  ECDD  F00D         	call	_TI_ResetTics
  8232   001A74                     l3222:
  8233   001A74  C05A  F05C         	movff	Espera@ms,??_Espera
  8234   001A78  C05B  F05D         	movff	Espera@ms+1,??_Espera+1
  8235   001A7C  0E00               	movlw	0
  8236   001A7E  BE5D               	btfsc	(??_Espera+1)^0,7,c
  8237   001A80  0EFF               	movlw	255
  8238   001A82  6E5E               	movwf	(??_Espera+2)^0,c
  8239   001A84  6E5F               	movwf	(??_Espera+3)^0,c
  8240   001A86  5058               	movf	Espera@Timer^0,w,c
  8241   001A88  EC6C  F00C         	call	_TI_GetTics
  8242   001A8C  505C               	movf	??_Espera^0,w,c
  8243   001A8E  5C4B               	subwf	?_TI_GetTics^0,w,c
  8244   001A90  505D               	movf	(??_Espera+1)^0,w,c
  8245   001A92  584C               	subwfb	(?_TI_GetTics+1)^0,w,c
  8246   001A94  505E               	movf	(??_Espera+2)^0,w,c
  8247   001A96  584D               	subwfb	(?_TI_GetTics+2)^0,w,c
  8248   001A98  505F               	movf	(??_Espera+3)^0,w,c
  8249   001A9A  584E               	subwfb	(?_TI_GetTics+3)^0,w,c
  8250   001A9C  B0D8               	btfsc	status,0,c
  8251   001A9E  0012               	return	
  8252   001AA0  D7E9               	goto	l3222
  8253   001AA2                     __end_of_Espera:
  8254                           	callstack 0
  8255                           
  8256 ;; *************** function _TI_ResetTics *****************
  8257 ;; Defined at:
  8258 ;;		line 54 in file "Timer.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  TimerHandle     1    wreg     unsigned char 
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  TimerHandle     1    0[COMRAM] unsigned char 
  8263 ;; Return value:  Size  Location     Type
  8264 ;;                  1    wreg      void 
  8265 ;; Registers used:
  8266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMRAM   BANK0   BANK1
  8272 ;;      Params:         0       0       0
  8273 ;;      Locals:         1       0       0
  8274 ;;      Temps:          0       0       0
  8275 ;;      Totals:         1       0       0
  8276 ;;Total ram usage:        1 bytes
  8277 ;; Hardware stack levels used: 1
  8278 ;; Hardware stack levels required when called: 2
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_Espera
  8283 ;;		_WaitForBusy
  8284 ;;		_menuLoop
  8285 ;;		_audioLoop
  8286 ;;		_playMusic
  8287 ;;		_sysTimerLoop
  8288 ;;		_updateSysTimestamp
  8289 ;;		_keypadLoop
  8290 ;;		_smsLoop
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           	psect	text62
  8295   001BBA                     __ptext62:
  8296                           	callstack 0
  8297   001BBA                     _TI_ResetTics:
  8298                           	callstack 27
  8299                           
  8300                           ;incstack = 0
  8301                           ;TI_ResetTics@TimerHandle stored from wreg
  8302   001BBA  6E4B               	movwf	TI_ResetTics@TimerHandle^0,c
  8303                           
  8304                           ;Timer.c: 55:  (INTCONbits.GIE = 0); Timers[TimerHandle].InitialTics=Tics; (INTCONbits.G
      +                          IE = 1);
  8305   001BBC  9EF2               	bcf	242,7,c	;volatile
  8306   001BBE  504B               	movf	TI_ResetTics@TimerHandle^0,w,c
  8307   001BC0  0D05               	mullw	5
  8308   001BC2  0E00               	movlw	low _Timers
  8309   001BC4  24F3               	addwf	243,w,c
  8310   001BC6  6ED9               	movwf	fsr2l,c
  8311   001BC8  0E01               	movlw	high _Timers
  8312   001BCA  20F4               	addwfc	prodh,w,c
  8313   001BCC  6EDA               	movwf	fsr2h,c
  8314   001BCE  C017  FFDE         	movff	_Tics,postinc2	;volatile
  8315   001BD2  C018  FFDE         	movff	_Tics+1,postinc2	;volatile
  8316   001BD6  C019  FFDE         	movff	_Tics+2,postinc2	;volatile
  8317   001BDA  C01A  FFDE         	movff	_Tics+3,postinc2	;volatile
  8318   001BDE  8EF2               	bsf	242,7,c	;volatile
  8319   001BE0  0012               	return		;funcret
  8320   001BE2                     __end_of_TI_ResetTics:
  8321                           	callstack 0
  8322                           
  8323 ;; *************** function _TI_GetTics *****************
  8324 ;; Defined at:
  8325 ;;		line 58 in file "Timer.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  TimerHandle     1    wreg     unsigned char 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  TimerHandle     1   12[COMRAM] unsigned char 
  8330 ;;  CopyCurrentT    4    8[COMRAM] unsigned long 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  4    0[COMRAM] unsigned long 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1
  8340 ;;      Params:         4       0       0
  8341 ;;      Locals:         5       0       0
  8342 ;;      Temps:          4       0       0
  8343 ;;      Totals:        13       0       0
  8344 ;;Total ram usage:       13 bytes
  8345 ;; Hardware stack levels used: 1
  8346 ;; Hardware stack levels required when called: 2
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		_Espera
  8351 ;;		_WaitForBusy
  8352 ;;		_menuLoop
  8353 ;;		_audioLoop
  8354 ;;		_sysTimerLoop
  8355 ;;		_keypadLoop
  8356 ;;		_smsLoop
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text63
  8361   0018D8                     __ptext63:
  8362                           	callstack 0
  8363   0018D8                     _TI_GetTics:
  8364                           	callstack 27
  8365                           
  8366                           ;incstack = 0
  8367                           ;TI_GetTics@TimerHandle stored from wreg
  8368   0018D8  6E57               	movwf	TI_GetTics@TimerHandle^0,c
  8369                           
  8370                           ;Timer.c: 59:     (INTCONbits.GIE = 0); unsigned long CopyCurrentTics=Tics; (INTCONbits.
      +                          GIE = 1);
  8371   0018DA  9EF2               	bcf	242,7,c	;volatile
  8372   0018DC  C017  F053         	movff	_Tics,TI_GetTics@CopyCurrentTics	;volatile
  8373   0018E0  C018  F054         	movff	_Tics+1,TI_GetTics@CopyCurrentTics+1	;volatile
  8374   0018E4  C019  F055         	movff	_Tics+2,TI_GetTics@CopyCurrentTics+2	;volatile
  8375   0018E8  C01A  F056         	movff	_Tics+3,TI_GetTics@CopyCurrentTics+3	;volatile
  8376   0018EC  8EF2               	bsf	242,7,c	;volatile
  8377                           
  8378                           ;Timer.c: 60:  return (CopyCurrentTics-(Timers[TimerHandle].InitialTics));
  8379   0018EE  5057               	movf	TI_GetTics@TimerHandle^0,w,c
  8380   0018F0  0D05               	mullw	5
  8381   0018F2  0E00               	movlw	low _Timers
  8382   0018F4  24F3               	addwf	243,w,c
  8383   0018F6  6ED9               	movwf	fsr2l,c
  8384   0018F8  0E01               	movlw	high _Timers
  8385   0018FA  20F4               	addwfc	prodh,w,c
  8386   0018FC  6EDA               	movwf	fsr2h,c
  8387   0018FE  CFDE F04F          	movff	postinc2,??_TI_GetTics
  8388   001902  CFDE F050          	movff	postinc2,??_TI_GetTics+1
  8389   001906  CFDE F051          	movff	postinc2,??_TI_GetTics+2
  8390   00190A  CFDE F052          	movff	postinc2,??_TI_GetTics+3
  8391   00190E  504F               	movf	??_TI_GetTics^0,w,c
  8392   001910  5C53               	subwf	TI_GetTics@CopyCurrentTics^0,w,c
  8393   001912  6E4B               	movwf	?_TI_GetTics^0,c
  8394   001914  5050               	movf	(??_TI_GetTics+1)^0,w,c
  8395   001916  5854               	subwfb	(TI_GetTics@CopyCurrentTics+1)^0,w,c
  8396   001918  6E4C               	movwf	(?_TI_GetTics+1)^0,c
  8397   00191A  5051               	movf	(??_TI_GetTics+2)^0,w,c
  8398   00191C  5855               	subwfb	(TI_GetTics@CopyCurrentTics+2)^0,w,c
  8399   00191E  6E4D               	movwf	(?_TI_GetTics+2)^0,c
  8400   001920  5052               	movf	(??_TI_GetTics+3)^0,w,c
  8401   001922  5856               	subwfb	(TI_GetTics@CopyCurrentTics+3)^0,w,c
  8402   001924  6E4E               	movwf	(?_TI_GetTics+3)^0,c
  8403   001926  0012               	return		;funcret
  8404   001928                     __end_of_TI_GetTics:
  8405                           	callstack 0
  8406                           
  8407 ;; *************** function _EscriuPrimeraOrdre *****************
  8408 ;; Defined at:
  8409 ;;		line 279 in file "LcTLCD.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;  ordre           1    wreg     unsigned char 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  ordre           1    1[COMRAM] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1
  8423 ;;      Params:         0       0       0
  8424 ;;      Locals:         1       0       0
  8425 ;;      Temps:          1       0       0
  8426 ;;      Totals:         2       0       0
  8427 ;;Total ram usage:        2 bytes
  8428 ;; Hardware stack levels used: 1
  8429 ;; Hardware stack levels required when called: 2
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_LcInit
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text64
  8438   001652                     __ptext64:
  8439                           	callstack 0
  8440   001652                     _EscriuPrimeraOrdre:
  8441                           	callstack 27
  8442                           
  8443                           ;incstack = 0
  8444                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8445   001652  6E4C               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8446                           
  8447                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  8448   001654  9695               	bcf	149,3,c	;volatile
  8449   001656  9495               	bcf	149,2,c	;volatile
  8450   001658  9295               	bcf	149,1,c	;volatile
  8451   00165A  9095               	bcf	149,0,c	;volatile
  8452   00165C  988C               	bcf	140,4,c	;volatile
  8453   00165E  9A8C               	bcf	140,5,c	;volatile
  8454                           
  8455                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  8456   001660  8C8C               	bsf	140,6,c	;volatile
  8457   001662  8C8C               	bsf	140,6,c	;volatile
  8458                           
  8459                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  8460   001664  A64C               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  8461   001666  D003               	goto	u400
  8462   001668  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8463   00166A  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  8464   00166C  D001               	goto	u418
  8465   00166E                     u400:
  8466   00166E  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8467   001670                     u418:
  8468   001670  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8469   001672  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8470   001674  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8471   001676  508C               	movf	140,w,c	;volatile
  8472   001678  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8473   00167A  0BF7               	andlw	-9
  8474   00167C  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8475   00167E  6E8C               	movwf	140,c	;volatile
  8476                           
  8477                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  8478   001680  A44C               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  8479   001682  D003               	goto	u420
  8480   001684  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8481   001686  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  8482   001688  D001               	goto	u438
  8483   00168A                     u420:
  8484   00168A  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8485   00168C                     u438:
  8486   00168C  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8487   00168E  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8488   001690  508C               	movf	140,w,c	;volatile
  8489   001692  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8490   001694  0BFB               	andlw	-5
  8491   001696  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8492   001698  6E8C               	movwf	140,c	;volatile
  8493                           
  8494                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  8495   00169A  A24C               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  8496   00169C  D003               	goto	u440
  8497   00169E  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8498   0016A0  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  8499   0016A2  D001               	goto	u458
  8500   0016A4                     u440:
  8501   0016A4  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8502   0016A6                     u458:
  8503   0016A6  464B               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8504   0016A8  508C               	movf	140,w,c	;volatile
  8505   0016AA  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8506   0016AC  0BFD               	andlw	-3
  8507   0016AE  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8508   0016B0  6E8C               	movwf	140,c	;volatile
  8509                           
  8510                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  8511   0016B2  A04C               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  8512   0016B4  D003               	goto	u460
  8513   0016B6  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8514   0016B8  2A4B               	incf	??_EscriuPrimeraOrdre^0,f,c
  8515   0016BA  D001               	goto	u478
  8516   0016BC                     u460:
  8517   0016BC  6A4B               	clrf	??_EscriuPrimeraOrdre^0,c
  8518   0016BE                     u478:
  8519   0016BE  508C               	movf	140,w,c	;volatile
  8520   0016C0  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8521   0016C2  0BFE               	andlw	-2
  8522   0016C4  184B               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8523   0016C6  6E8C               	movwf	140,c	;volatile
  8524                           
  8525                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  8526   0016C8  9C8C               	bcf	140,6,c	;volatile
  8527   0016CA  0012               	return		;funcret
  8528   0016CC                     __end_of_EscriuPrimeraOrdre:
  8529                           	callstack 0
  8530                           
  8531 ;; *************** function _CantaIR *****************
  8532 ;; Defined at:
  8533 ;;		line 229 in file "LcTLCD.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  IR              1    wreg     unsigned char 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  IR              1    2[COMRAM] unsigned char 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1
  8547 ;;      Params:         0       0       0
  8548 ;;      Locals:         1       0       0
  8549 ;;      Temps:          0       0       0
  8550 ;;      Totals:         1       0       0
  8551 ;;Total ram usage:        1 bytes
  8552 ;; Hardware stack levels used: 1
  8553 ;; Hardware stack levels required when called: 3
  8554 ;; This function calls:
  8555 ;;		_CantaPartAlta
  8556 ;;		_CantaPartBaixa
  8557 ;; This function is called by:
  8558 ;;		_LcInit
  8559 ;;		_LcClear
  8560 ;;		_LcCursorOn
  8561 ;;		_LcCursorOff
  8562 ;;		_LcGotoXY
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text65
  8567   001AD4                     __ptext65:
  8568                           	callstack 0
  8569   001AD4                     _CantaIR:
  8570                           	callstack 24
  8571                           
  8572                           ;incstack = 0
  8573                           ;CantaIR@IR stored from wreg
  8574   001AD4  6E4D               	movwf	CantaIR@IR^0,c
  8575                           
  8576                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  8577   001AD6  9695               	bcf	149,3,c	;volatile
  8578   001AD8  9495               	bcf	149,2,c	;volatile
  8579   001ADA  9295               	bcf	149,1,c	;volatile
  8580   001ADC  9095               	bcf	149,0,c	;volatile
  8581                           
  8582                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  8583   001ADE  988C               	bcf	140,4,c	;volatile
  8584                           
  8585                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  8586   001AE0  9A8C               	bcf	140,5,c	;volatile
  8587                           
  8588                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  8589   001AE2  8C8C               	bsf	140,6,c	;volatile
  8590                           
  8591                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  8592   001AE4  504D               	movf	CantaIR@IR^0,w,c
  8593   001AE6  EC0A  F00C         	call	_CantaPartAlta
  8594                           
  8595                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  8596   001AEA  8C8C               	bsf	140,6,c	;volatile
  8597                           
  8598                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  8599   001AEC  9C8C               	bcf	140,6,c	;volatile
  8600                           
  8601                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  8602   001AEE  9C8C               	bcf	140,6,c	;volatile
  8603                           
  8604                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  8605   001AF0  8C8C               	bsf	140,6,c	;volatile
  8606                           
  8607                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  8608   001AF2  504D               	movf	CantaIR@IR^0,w,c
  8609   001AF4  ECD6  F00B         	call	_CantaPartBaixa
  8610                           
  8611                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  8612   001AF8  8C8C               	bsf	140,6,c	;volatile
  8613                           
  8614                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  8615   001AFA  9C8C               	bcf	140,6,c	;volatile
  8616                           
  8617                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  8618   001AFC  8695               	bsf	149,3,c	;volatile
  8619   001AFE  8495               	bsf	149,2,c	;volatile
  8620   001B00  8295               	bsf	149,1,c	;volatile
  8621   001B02  8095               	bsf	149,0,c	;volatile
  8622   001B04  0012               	return		;funcret
  8623   001B06                     __end_of_CantaIR:
  8624                           	callstack 0
  8625                           
  8626 ;; *************** function _CantaPartBaixa *****************
  8627 ;; Defined at:
  8628 ;;		line 222 in file "LcTLCD.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  c               1    wreg     unsigned char 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;  c               1    1[COMRAM] unsigned char 
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		wreg, status,2, status,0
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1
  8642 ;;      Params:         0       0       0
  8643 ;;      Locals:         1       0       0
  8644 ;;      Temps:          1       0       0
  8645 ;;      Totals:         2       0       0
  8646 ;;Total ram usage:        2 bytes
  8647 ;; Hardware stack levels used: 1
  8648 ;; Hardware stack levels required when called: 2
  8649 ;; This function calls:
  8650 ;;		Nothing
  8651 ;; This function is called by:
  8652 ;;		_CantaIR
  8653 ;;		_CantaData
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           	psect	text66
  8658   0017AC                     __ptext66:
  8659                           	callstack 0
  8660   0017AC                     _CantaPartBaixa:
  8661                           	callstack 24
  8662                           
  8663                           ;incstack = 0
  8664                           ;CantaPartBaixa@c stored from wreg
  8665   0017AC  6E4C               	movwf	CantaPartBaixa@c^0,c
  8666                           
  8667                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  8668   0017AE  A64C               	btfss	CantaPartBaixa@c^0,3,c
  8669   0017B0  D003               	goto	u2320
  8670   0017B2  6A4B               	clrf	??_CantaPartBaixa^0,c
  8671   0017B4  2A4B               	incf	??_CantaPartBaixa^0,f,c
  8672   0017B6  D001               	goto	u2338
  8673   0017B8                     u2320:
  8674   0017B8  6A4B               	clrf	??_CantaPartBaixa^0,c
  8675   0017BA                     u2338:
  8676   0017BA  464B               	rlncf	??_CantaPartBaixa^0,f,c
  8677   0017BC  464B               	rlncf	??_CantaPartBaixa^0,f,c
  8678   0017BE  464B               	rlncf	??_CantaPartBaixa^0,f,c
  8679   0017C0  508C               	movf	140,w,c	;volatile
  8680   0017C2  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8681   0017C4  0BF7               	andlw	-9
  8682   0017C6  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8683   0017C8  6E8C               	movwf	140,c	;volatile
  8684                           
  8685                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  8686   0017CA  A44C               	btfss	CantaPartBaixa@c^0,2,c
  8687   0017CC  D003               	goto	u2340
  8688   0017CE  6A4B               	clrf	??_CantaPartBaixa^0,c
  8689   0017D0  2A4B               	incf	??_CantaPartBaixa^0,f,c
  8690   0017D2  D001               	goto	u2358
  8691   0017D4                     u2340:
  8692   0017D4  6A4B               	clrf	??_CantaPartBaixa^0,c
  8693   0017D6                     u2358:
  8694   0017D6  464B               	rlncf	??_CantaPartBaixa^0,f,c
  8695   0017D8  464B               	rlncf	??_CantaPartBaixa^0,f,c
  8696   0017DA  508C               	movf	140,w,c	;volatile
  8697   0017DC  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8698   0017DE  0BFB               	andlw	-5
  8699   0017E0  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8700   0017E2  6E8C               	movwf	140,c	;volatile
  8701                           
  8702                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  8703   0017E4  A24C               	btfss	CantaPartBaixa@c^0,1,c
  8704   0017E6  D003               	goto	u2360
  8705   0017E8  6A4B               	clrf	??_CantaPartBaixa^0,c
  8706   0017EA  2A4B               	incf	??_CantaPartBaixa^0,f,c
  8707   0017EC  D001               	goto	u2378
  8708   0017EE                     u2360:
  8709   0017EE  6A4B               	clrf	??_CantaPartBaixa^0,c
  8710   0017F0                     u2378:
  8711   0017F0  464B               	rlncf	??_CantaPartBaixa^0,f,c
  8712   0017F2  508C               	movf	140,w,c	;volatile
  8713   0017F4  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8714   0017F6  0BFD               	andlw	-3
  8715   0017F8  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8716   0017FA  6E8C               	movwf	140,c	;volatile
  8717                           
  8718                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  8719   0017FC  A04C               	btfss	CantaPartBaixa@c^0,0,c
  8720   0017FE  D003               	goto	u2380
  8721   001800  6A4B               	clrf	??_CantaPartBaixa^0,c
  8722   001802  2A4B               	incf	??_CantaPartBaixa^0,f,c
  8723   001804  D001               	goto	u2398
  8724   001806                     u2380:
  8725   001806  6A4B               	clrf	??_CantaPartBaixa^0,c
  8726   001808                     u2398:
  8727   001808  508C               	movf	140,w,c	;volatile
  8728   00180A  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8729   00180C  0BFE               	andlw	-2
  8730   00180E  184B               	xorwf	??_CantaPartBaixa^0,w,c
  8731   001810  6E8C               	movwf	140,c	;volatile
  8732   001812  0012               	return		;funcret
  8733   001814                     __end_of_CantaPartBaixa:
  8734                           	callstack 0
  8735                           
  8736 ;; *************** function _CantaPartAlta *****************
  8737 ;; Defined at:
  8738 ;;		line 215 in file "LcTLCD.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  c               1    wreg     unsigned char 
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  c               1    1[COMRAM] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      void 
  8745 ;; Registers used:
  8746 ;;		wreg, status,2, status,0
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMRAM   BANK0   BANK1
  8752 ;;      Params:         0       0       0
  8753 ;;      Locals:         1       0       0
  8754 ;;      Temps:          1       0       0
  8755 ;;      Totals:         2       0       0
  8756 ;;Total ram usage:        2 bytes
  8757 ;; Hardware stack levels used: 1
  8758 ;; Hardware stack levels required when called: 2
  8759 ;; This function calls:
  8760 ;;		Nothing
  8761 ;; This function is called by:
  8762 ;;		_CantaIR
  8763 ;;		_CantaData
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text67
  8768   001814                     __ptext67:
  8769                           	callstack 0
  8770   001814                     _CantaPartAlta:
  8771                           	callstack 24
  8772                           
  8773                           ;incstack = 0
  8774                           ;CantaPartAlta@c stored from wreg
  8775   001814  6E4C               	movwf	CantaPartAlta@c^0,c
  8776                           
  8777                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  8778   001816  AE4C               	btfss	CantaPartAlta@c^0,7,c
  8779   001818  D003               	goto	u2240
  8780   00181A  6A4B               	clrf	??_CantaPartAlta^0,c
  8781   00181C  2A4B               	incf	??_CantaPartAlta^0,f,c
  8782   00181E  D001               	goto	u2258
  8783   001820                     u2240:
  8784   001820  6A4B               	clrf	??_CantaPartAlta^0,c
  8785   001822                     u2258:
  8786   001822  464B               	rlncf	??_CantaPartAlta^0,f,c
  8787   001824  464B               	rlncf	??_CantaPartAlta^0,f,c
  8788   001826  464B               	rlncf	??_CantaPartAlta^0,f,c
  8789   001828  508C               	movf	140,w,c	;volatile
  8790   00182A  184B               	xorwf	??_CantaPartAlta^0,w,c
  8791   00182C  0BF7               	andlw	-9
  8792   00182E  184B               	xorwf	??_CantaPartAlta^0,w,c
  8793   001830  6E8C               	movwf	140,c	;volatile
  8794                           
  8795                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  8796   001832  AC4C               	btfss	CantaPartAlta@c^0,6,c
  8797   001834  D003               	goto	u2260
  8798   001836  6A4B               	clrf	??_CantaPartAlta^0,c
  8799   001838  2A4B               	incf	??_CantaPartAlta^0,f,c
  8800   00183A  D001               	goto	u2278
  8801   00183C                     u2260:
  8802   00183C  6A4B               	clrf	??_CantaPartAlta^0,c
  8803   00183E                     u2278:
  8804   00183E  464B               	rlncf	??_CantaPartAlta^0,f,c
  8805   001840  464B               	rlncf	??_CantaPartAlta^0,f,c
  8806   001842  508C               	movf	140,w,c	;volatile
  8807   001844  184B               	xorwf	??_CantaPartAlta^0,w,c
  8808   001846  0BFB               	andlw	-5
  8809   001848  184B               	xorwf	??_CantaPartAlta^0,w,c
  8810   00184A  6E8C               	movwf	140,c	;volatile
  8811                           
  8812                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  8813   00184C  AA4C               	btfss	CantaPartAlta@c^0,5,c
  8814   00184E  D003               	goto	u2280
  8815   001850  6A4B               	clrf	??_CantaPartAlta^0,c
  8816   001852  2A4B               	incf	??_CantaPartAlta^0,f,c
  8817   001854  D001               	goto	u2298
  8818   001856                     u2280:
  8819   001856  6A4B               	clrf	??_CantaPartAlta^0,c
  8820   001858                     u2298:
  8821   001858  464B               	rlncf	??_CantaPartAlta^0,f,c
  8822   00185A  508C               	movf	140,w,c	;volatile
  8823   00185C  184B               	xorwf	??_CantaPartAlta^0,w,c
  8824   00185E  0BFD               	andlw	-3
  8825   001860  184B               	xorwf	??_CantaPartAlta^0,w,c
  8826   001862  6E8C               	movwf	140,c	;volatile
  8827                           
  8828                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  8829   001864  A84C               	btfss	CantaPartAlta@c^0,4,c
  8830   001866  D003               	goto	u2300
  8831   001868  6A4B               	clrf	??_CantaPartAlta^0,c
  8832   00186A  2A4B               	incf	??_CantaPartAlta^0,f,c
  8833   00186C  D001               	goto	u2318
  8834   00186E                     u2300:
  8835   00186E  6A4B               	clrf	??_CantaPartAlta^0,c
  8836   001870                     u2318:
  8837   001870  508C               	movf	140,w,c	;volatile
  8838   001872  184B               	xorwf	??_CantaPartAlta^0,w,c
  8839   001874  0BFE               	andlw	-2
  8840   001876  184B               	xorwf	??_CantaPartAlta^0,w,c
  8841   001878  6E8C               	movwf	140,c	;volatile
  8842   00187A  0012               	return		;funcret
  8843   00187C                     __end_of_CantaPartAlta:
  8844                           	callstack 0
  8845                           
  8846 ;; *************** function _RSI_High *****************
  8847 ;; Defined at:
  8848 ;;		line 23 in file "MAIN.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      void 
  8855 ;; Registers used:
  8856 ;;		wreg, status,2, status,0, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1
  8862 ;;      Params:         0       0       0
  8863 ;;      Locals:         0       0       0
  8864 ;;      Temps:          0       0       0
  8865 ;;      Totals:         0       0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used: 1
  8868 ;; Hardware stack levels required when called: 1
  8869 ;; This function calls:
  8870 ;;		_RSI_Timer0
  8871 ;; This function is called by:
  8872 ;;		Interrupt level 2
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           	psect	intcode
  8877   000008                     __pintcode:
  8878                           	callstack 0
  8879   000008                     _RSI_High:
  8880                           	callstack 23
  8881                           
  8882                           ;incstack = 0
  8883   000008  8275               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8884                           
  8885                           ;MAIN.c: 25:     }
  8886   00000A  ECD1  F00E         	call	_RSI_Timer0	;wreg free
  8887   00000E  9275               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8888   000010  0011               	retfie		f
  8889   000012                     __end_of_RSI_High:
  8890                           	callstack 0
  8891                           
  8892 ;; *************** function _RSI_Timer0 *****************
  8893 ;; Defined at:
  8894 ;;		line 26 in file "Timer.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		wreg, status,2, status,0
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1
  8908 ;;      Params:         0       0       0
  8909 ;;      Locals:         0       0       0
  8910 ;;      Temps:          0       0       0
  8911 ;;      Totals:         0       0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used: 1
  8914 ;; This function calls:
  8915 ;;		Nothing
  8916 ;; This function is called by:
  8917 ;;		_RSI_High
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text69
  8922   001DA2                     __ptext69:
  8923                           	callstack 0
  8924   001DA2                     _RSI_Timer0:
  8925                           	callstack 23
  8926                           
  8927                           ;Timer.c: 28:     TMR0=64911;
  8928                           
  8929                           ;incstack = 0
  8930   001DA2  0EFD               	movlw	253
  8931   001DA4  6ED7               	movwf	215,c	;volatile
  8932   001DA6  0E8F               	movlw	143
  8933   001DA8  6ED6               	movwf	214,c	;volatile
  8934                           
  8935                           ;Timer.c: 29:     TMR0IF=0;
  8936   001DAA  94F2               	bcf	4082,2,c	;volatile
  8937                           
  8938                           ;Timer.c: 30:     Tics++;
  8939   001DAC  0E01               	movlw	1
  8940   001DAE  2617               	addwf	_Tics^0,f,c	;volatile
  8941   001DB0  0E00               	movlw	0
  8942   001DB2  2218               	addwfc	(_Tics+1)^0,f,c	;volatile
  8943   001DB4  2219               	addwfc	(_Tics+2)^0,f,c	;volatile
  8944   001DB6  221A               	addwfc	(_Tics+3)^0,f,c	;volatile
  8945   001DB8  0012               	return		;funcret
  8946   001DBA                     __end_of_RSI_Timer0:
  8947                           	callstack 0
  8948                           
  8949                           	psect	rparam
  8950   000000                     
  8951                           	psect	temp
  8952   000075                     btemp:
  8953                           	callstack 0
  8954   000075                     	ds	1
  8955   000000                     int$flags	set	btemp
  8956   000000                     wtemp8	set	btemp+1
  8957   000000                     ttemp5	set	btemp+1
  8958   000000                     ttemp6	set	btemp+4
  8959   000000                     ttemp7	set	btemp+8
  8960                           
  8961                           	psect	idloc
  8962                           
  8963                           ;Config register IDLOC0 @ 0x200000
  8964                           ;	unspecified, using default values
  8965   200000                     	org	2097152
  8966   200000  FF                 	db	255
  8967                           
  8968                           ;Config register IDLOC1 @ 0x200001
  8969                           ;	unspecified, using default values
  8970   200001                     	org	2097153
  8971   200001  FF                 	db	255
  8972                           
  8973                           ;Config register IDLOC2 @ 0x200002
  8974                           ;	unspecified, using default values
  8975   200002                     	org	2097154
  8976   200002  FF                 	db	255
  8977                           
  8978                           ;Config register IDLOC3 @ 0x200003
  8979                           ;	unspecified, using default values
  8980   200003                     	org	2097155
  8981   200003  FF                 	db	255
  8982                           
  8983                           ;Config register IDLOC4 @ 0x200004
  8984                           ;	unspecified, using default values
  8985   200004                     	org	2097156
  8986   200004  FF                 	db	255
  8987                           
  8988                           ;Config register IDLOC5 @ 0x200005
  8989                           ;	unspecified, using default values
  8990   200005                     	org	2097157
  8991   200005  FF                 	db	255
  8992                           
  8993                           ;Config register IDLOC6 @ 0x200006
  8994                           ;	unspecified, using default values
  8995   200006                     	org	2097158
  8996   200006  FF                 	db	255
  8997                           
  8998                           ;Config register IDLOC7 @ 0x200007
  8999                           ;	unspecified, using default values
  9000   200007                     	org	2097159
  9001   200007  FF                 	db	255
  9002                           
  9003                           	psect	config
  9004                           
  9005                           ; Padding undefined space
  9006   300000                     	org	3145728
  9007   300000  FF                 	db	255
  9008                           
  9009                           ;Config register CONFIG1H @ 0x300001
  9010                           ;	Oscillator
  9011                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9012                           ;	Fail-Safe Clock Monitor Enable bit
  9013                           ;	FCMEN = 0x0, unprogrammed default
  9014                           ;	Internal/External Oscillator Switchover bit
  9015                           ;	IESO = 0x0, unprogrammed default
  9016   300001                     	org	3145729
  9017   300001  06                 	db	6
  9018                           
  9019                           ;Config register CONFIG2L @ 0x300002
  9020                           ;	Power-up Timer Enable bit
  9021                           ;	PWRT = OFF, PWRT disabled
  9022                           ;	Brown-out Reset Enable bits
  9023                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9024                           ;	Brown-out Reset Voltage bits
  9025                           ;	BORV = 0x3, unprogrammed default
  9026   300002                     	org	3145730
  9027   300002  19                 	db	25
  9028                           
  9029                           ;Config register CONFIG2H @ 0x300003
  9030                           ;	Watchdog Timer Enable bit
  9031                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9032                           ;	Watchdog Timer Postscale Select bits
  9033                           ;	WDTPS = 0xF, unprogrammed default
  9034   300003                     	org	3145731
  9035   300003  1E                 	db	30
  9036                           
  9037                           ; Padding undefined space
  9038   300004                     	org	3145732
  9039   300004  FF                 	db	255
  9040                           
  9041                           ;Config register CONFIG3H @ 0x300005
  9042                           ;	CCP2 MUX bit
  9043                           ;	CCP2MX = 0x1, unprogrammed default
  9044                           ;	PORTB A/D Enable bit
  9045                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9046                           ;	Low-Power Timer1 Oscillator Enable bit
  9047                           ;	LPT1OSC = 0x0, unprogrammed default
  9048                           ;	MCLR Pin Enable bit
  9049                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  9050   300005                     	org	3145733
  9051   300005  01                 	db	1
  9052                           
  9053                           ;Config register CONFIG4L @ 0x300006
  9054                           ;	Stack Full/Underflow Reset Enable bit
  9055                           ;	STVREN = 0x1, unprogrammed default
  9056                           ;	Single-Supply ICSP Enable bit
  9057                           ;	LVP = OFF, Single-Supply ICSP disabled
  9058                           ;	Boot Block Size Select bits
  9059                           ;	BBSIZ = 0x0, unprogrammed default
  9060                           ;	Extended Instruction Set Enable bit
  9061                           ;	XINST = 0x0, unprogrammed default
  9062                           ;	Background Debugger Enable bit
  9063                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9064   300006                     	org	3145734
  9065   300006  81                 	db	129
  9066                           
  9067                           ; Padding undefined space
  9068   300007                     	org	3145735
  9069   300007  FF                 	db	255
  9070                           
  9071                           ;Config register CONFIG5L @ 0x300008
  9072                           ;	unspecified, using default values
  9073                           ;	Code Protection bit
  9074                           ;	CP0 = 0x1, unprogrammed default
  9075                           ;	Code Protection bit
  9076                           ;	CP1 = 0x1, unprogrammed default
  9077   300008                     	org	3145736
  9078   300008  03                 	db	3
  9079                           
  9080                           ;Config register CONFIG5H @ 0x300009
  9081                           ;	unspecified, using default values
  9082                           ;	Boot Block Code Protection bitProtect Boot
  9083                           ;	CPB = 0x1, unprogrammed default
  9084                           ;	Data EEPROM Code Protection bit
  9085                           ;	CPD = 0x1, unprogrammed default
  9086   300009                     	org	3145737
  9087   300009  C0                 	db	192
  9088                           
  9089                           ;Config register CONFIG6L @ 0x30000A
  9090                           ;	unspecified, using default values
  9091                           ;	Write Protection bit
  9092                           ;	WRT0 = 0x1, unprogrammed default
  9093                           ;	Write Protection bit
  9094                           ;	WRT1 = 0x1, unprogrammed default
  9095   30000A                     	org	3145738
  9096   30000A  03                 	db	3
  9097                           
  9098                           ;Config register CONFIG6H @ 0x30000B
  9099                           ;	unspecified, using default values
  9100                           ;	Configuration Register Write Protection bit
  9101                           ;	WRTC = 0x1, unprogrammed default
  9102                           ;	Boot Block Write Protection bit
  9103                           ;	WRTB = 0x1, unprogrammed default
  9104                           ;	Data EEPROM Write Protection bit
  9105                           ;	WRTD = 0x1, unprogrammed default
  9106   30000B                     	org	3145739
  9107   30000B  E0                 	db	224
  9108                           
  9109                           ;Config register CONFIG7L @ 0x30000C
  9110                           ;	unspecified, using default values
  9111                           ;	Table Read Protection bit
  9112                           ;	EBTR0 = 0x1, unprogrammed default
  9113                           ;	Table Read Protection bit
  9114                           ;	EBTR1 = 0x1, unprogrammed default
  9115   30000C                     	org	3145740
  9116   30000C  03                 	db	3
  9117                           
  9118                           ;Config register CONFIG7H @ 0x30000D
  9119                           ;	unspecified, using default values
  9120                           ;	Boot Block Table Read Protection bit
  9121                           ;	EBTRB = 0x1, unprogrammed default
  9122   30000D                     	org	3145741
  9123   30000D  40                 	db	64
  9124                           tosu	equ	0xFFF
  9125                           tosh	equ	0xFFE
  9126                           tosl	equ	0xFFD
  9127                           stkptr	equ	0xFFC
  9128                           pclatu	equ	0xFFB
  9129                           pclath	equ	0xFFA
  9130                           pcl	equ	0xFF9
  9131                           tblptru	equ	0xFF8
  9132                           tblptrh	equ	0xFF7
  9133                           tblptrl	equ	0xFF6
  9134                           tablat	equ	0xFF5
  9135                           prodh	equ	0xFF4
  9136                           prodl	equ	0xFF3
  9137                           indf0	equ	0xFEF
  9138                           postinc0	equ	0xFEE
  9139                           postdec0	equ	0xFED
  9140                           preinc0	equ	0xFEC
  9141                           plusw0	equ	0xFEB
  9142                           fsr0h	equ	0xFEA
  9143                           fsr0l	equ	0xFE9
  9144                           wreg	equ	0xFE8
  9145                           indf1	equ	0xFE7
  9146                           postinc1	equ	0xFE6
  9147                           postdec1	equ	0xFE5
  9148                           preinc1	equ	0xFE4
  9149                           plusw1	equ	0xFE3
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           bsr	equ	0xFE0
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           preinc2	equ	0xFDC
  9157                           plusw2	equ	0xFDB
  9158                           fsr2h	equ	0xFDA
  9159                           fsr2l	equ	0xFD9
  9160                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    204
    Data        120
    BSS         173
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     34     116
    BANK0           128      0     116
    BANK1           244      0      95

Pointer List with Targets:

    displayMenu@string	PTR unsigned char  size(1) Largest target is 138
		 -> MAINMENU(CODE[138]), 

    lcdAddString@string	PTR unsigned char  size(2) Largest target is 20
		 -> ERRORMESSAGES(BANK1[20]), ENDCOMMUNICATION(BANK0[11]), PLAYRECORDINGS(BANK0[12]), STARTRECORDING(BANK0[14]), 
		 -> CURRENTTIME(BANK0[14]), MODIFYTIME(BANK0[13]), PORTNAMEMENU(BANK0[12]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(2) Largest target is 511
		 -> NULL(NULL[0]), timer_SMS(COMRAM[1]), timerBounces(COMRAM[1]), sysTmr(COMRAM[1]), 
		 -> songTime(COMRAM[1]), pTime(COMRAM[1]), songTimer(COMRAM[1]), timer(COMRAM[1]), 
		 -> RAM(DATA[511]), 


Critical Paths under _main in COMRAM

    _main->_menuLoop
    _sysTimerLoop->_LcPutChar
    _smsLoop->_TI_GetTics
    _menuLoop->_displayMenu
    _LcClear->_Espera
    _lcdAddString->_LcPutChar
    _displayMenu->_LcPutChar
    _moveOneRow->_LcGotoXY
    _KeGetCharValue->_KeGetGenericValue
    _KeGetGenericValue->_getColumn
    _memoryLoop->_LcPutChar
    _updateSysTimestamp->_TI_ResetTics
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _keypadLoop->_TI_GetTics
    _playMusic->_TI_ResetTics
    _initSysTimer->_TI_NewTimer
    _initMenu->_TI_NewTimer
    _initKeypad->_TI_NewTimer
    _initAudio->_TI_NewTimer
    _audioLoop->_TI_GetTics
    _LcInit->_Espera
    _WaitForBusy->_TI_GetTics
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _RSI_High in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26483
                             _LcInit
                            _TI_Init
                          _audioLoop
                          _initAudio
                       _initJoystick
                         _initKeypad
                         _initMemory
                           _initMenu
                            _initSIO
                       _initSysTimer
                       _joystickLoop
                         _keypadLoop
                         _memoryLoop
                           _menuLoop
                            _smsLoop
                       _sysTimerLoop
 ---------------------------------------------------------------------------------
 (1) _sysTimerLoop                                         2     2      0    2344
                                             23 COMRAM     2     2      0
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
                            ___lbdiv
                            ___lbmod
              _incrementSysTimestamp
 ---------------------------------------------------------------------------------
 (2) _incrementSysTimestamp                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _smsLoop                                              2     2      0      67
                                             13 COMRAM     2     2      0
                  _KeGetGenericValue
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _menuLoop                                             8     8      0   13476
                                             26 COMRAM     8     8      0
                     _KeGetCharValue
                  _KeGetGenericValue
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
                            ___awmod
                            _checkRX
                            _checkTX
                        _displayMenu
                  _displayRecordings
                   _displayTimestamp
                       _getAvailable
                       _getColumnAct
                    _getJoystickDown
                      _getJoystickUp
                   _getNumRecordings
                              _getRX
                             _isIdle
                          _isPressed
                       _lcdAddString
                          _playMusic
                     _refreshDisplay
                       _resetDisplay
                          _saveIndex
                          _sendIndex
                      _sendTimestamp
                              _setTX
                          _stopMusic
                 _updateSysTimestamp
 ---------------------------------------------------------------------------------
 (2) _sendTimestamp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendIndex                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _saveIndex                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _refreshDisplay                                       0     0      0    1507
                       _resetDisplay
 ---------------------------------------------------------------------------------
 (2) _resetDisplay                                         0     0      0    1507
                            _LcClear
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _lcdAddString                                         2     0      2    3208
                                             23 COMRAM     2     0      2
                          _LcPutChar
                         _moveOneRow
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isIdle                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getNumRecordings                                     4     4      0      48
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getJoystickUp                                        1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getJoystickDown                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getColumnAct                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getAvailable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayRecordings                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          3     2      1    2636
                                             23 COMRAM     3     2      1
                          _LcPutChar
                         _moveOneRow
 ---------------------------------------------------------------------------------
 (3) _moveOneRow                                           0     0      0    1092
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _KeGetCharValue                                       3     3      0     155
                                              3 COMRAM     3     3      0
                  _KeGetGenericValue
 ---------------------------------------------------------------------------------
 (2) _KeGetGenericValue                                    1     1      0       0
                                              2 COMRAM     1     1      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _memoryLoop                                           8     8      0    4998
                                             23 COMRAM     8     8      0
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
                            _checkRX
                            _checkTX
                   _displayTimestamp
                    _finishedDisplay
                              _getRX
                    _getSysTimestamp
                           _readData
                           _saveData
                              _setTX
                 _updateSysTimestamp
 ---------------------------------------------------------------------------------
 (2) _updateSysTimestamp                                   3     0      3     545
                                              1 COMRAM     3     0      3
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _setTX                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _saveData                                             2     1      1     348
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _readData                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getSysTimestamp                                      2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRX                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _finishedDisplay                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimestamp                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkTX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkRX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     387
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     466
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1424
                                             22 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1    1092
                                             14 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     220
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _keypadLoop                                           2     2      0     111
                                             13 COMRAM     2     2      0
                         _TI_GetTics
                       _TI_ResetTics
                           _getDigit
                          _playMusic
                          _stopMusic
 ---------------------------------------------------------------------------------
 (2) _stopMusic                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _playMusic                                            1     1      0      44
                                              1 COMRAM     1     1      0
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _getDigit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _joystickLoop                                         3     3      0      24
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initSysTimer                                         0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initMemory                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _audioLoop                                            4     4      0      67
                                             13 COMRAM     4     4      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    2452
                                             21 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0      90
                                             13 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          4     2      2     719
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4    1197
                                             13 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      45
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     220
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (8) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _TI_GetTics
       _TI_ResetTics
   _TI_Init
   _audioLoop
     _TI_GetTics
     _TI_ResetTics
   _initAudio
     _TI_NewTimer
   _initJoystick
   _initKeypad
     _TI_NewTimer
   _initMemory
   _initMenu
     _TI_NewTimer
   _initSIO
   _initSysTimer
     _TI_NewTimer
   _joystickLoop
   _keypadLoop
     _TI_GetTics
     _TI_ResetTics
     _getDigit
     _playMusic
       _TI_ResetTics
     _stopMusic
   _memoryLoop
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     ___lbdiv
     ___lbmod
     _checkRX
     _checkTX
     _displayTimestamp
     _finishedDisplay
     _getRX
     _getSysTimestamp
     _readData
     _saveData
     _setTX
     _updateSysTimestamp
       _TI_ResetTics
   _menuLoop
     _KeGetCharValue
       _KeGetGenericValue
         _getColumn
     _KeGetGenericValue
     _LcCursorOff
     _LcCursorOn
     _LcGotoXY
     _LcPutChar
     _TI_GetTics
     _TI_ResetTics
     ___awmod
     _checkRX
     _checkTX
     _displayMenu
       _LcPutChar
       _moveOneRow
         _LcGotoXY
     _displayRecordings
     _displayTimestamp
     _getAvailable
     _getColumnAct
     _getJoystickDown
     _getJoystickUp
     _getNumRecordings
     _getRX
     _isIdle
     _isPressed
     _lcdAddString
       _LcPutChar
       _moveOneRow
     _playMusic
     _refreshDisplay
       _resetDisplay
         _LcClear
           _CantaIR
           _Espera
           _WaitForBusy
     _resetDisplay
     _saveIndex
     _sendIndex
     _sendTimestamp
     _setTX
     _stopMusic
     _updateSysTimestamp
   _smsLoop
     _KeGetGenericValue
     _TI_GetTics
     _TI_ResetTics
   _sysTimerLoop
     _LcPutChar
     _TI_GetTics
     _TI_ResetTics
     ___lbdiv
     ___lbmod
     _incrementSysTimestamp

 _RSI_High (ROOT)
   _RSI_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F3      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1            F4      0       0       5        0.0%
BANK1               F4      0      5F       6       38.9%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0      74       4       90.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     22      74       1       92.1%
BITBIGSFRhhh         F      0       0      13        0.0%
BITBIGSFR_4h         A      0       0       7        0.0%
BITBIGSFRhlhlll      8      0       0      19        0.0%
BITBIGSFRhlhllh      7      0       0      18        0.0%
BITBIGSFRhlhhh       7      0       0      15        0.0%
BITBIGSFRhlhhl       7      0       0      16        0.0%
BITBIGSFRllh         6      0       0      21        0.0%
BITBIGSFRlh          5      0       0      20        0.0%
BITBIGSFR_1h         3      0       0      12        0.0%
BITBIGSFR_3          3      0       0       9        0.0%
BITBIGSFR_2          3      0       0      10        0.0%
BITBIGSFRhlhllh      1      0       0      17        0.0%
BITBIGSFRlllh        1      0       0      22        0.0%
BITBIGSFRhhl         1      0       0      14        0.0%
BITBIGSFR_4l         1      0       0       8        0.0%
BITBIGSFRllll        1      0       0      23        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     147      24        0.0%
DATA                 0      0     147      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat May 20 02:00:45 2023

                             _x 0040                               _y 003F                      _RSI_Timer0 1DA2  
                  ?_displayMenu 0062                              l76 12B4                              l79 12C8  
                            l96 1D6E                      _TI_GetTics 18D8                             l101 1D56  
                           l202 138C                             l209 13CC                             l704 0F5E  
                           l715 1590                             l732 1BF0                             l566 1410  
                           l728 1D3E                             l737 1C80                             l690 0EBA  
                           l693 0EDA                             l686 0E94                             l696 0EFA  
                           l865 0BAA                             l857 0B18                             l937 1A6A  
                           l875 0C16                             l867 0BD2                             l885 0C7A  
                           u400 166E                             u420 168A                             u440 16A4  
                           u418 1670                             u460 16BC                             u438 168C  
                           u458 16A6                             u478 16BE                             _row 001B  
              ??_CantaPartBaixa 004B                    ___awmod@sign 0050                             prod 0FF3  
                           wreg 0FE8                   _ERRORMESSAGES 014B                            l2014 0066  
                          l2036 1C8C                            l4000 0FE4                            l4010 1014  
                          l3300 13D4                            l3222 1A74                            l3302 13F8  
                          l4102 0C3C                            l4022 1064                            l4014 1036  
                          l4006 1008                            l4120 0C9C                            l4040 0AD8  
                          l5000 0700                            l4008 100E                            l4032 10A8  
                          l4130 0CD2                            l5010 072C                            l4026 1086  
                          l4018 1058                            l3420 1976                            l4140 0D18  
                          l4132 0CD8                            l4108 0C5A                            l4052 0B3E  
                          l3500 12AE                            l5100 086E                            l5020 0756  
                          l3246 19CA                            l4126 0CAA                            l4062 0B80  
                          l3342 1BFE                            l3510 1716                            l5014 073C  
                          l3424 1980                            l4152 0D58                            l4144 0D40  
                          l4136 0CF6                            l4080 0BE4                            l4064 0B86  
                          l3512 172E                            l5040 0798                            l5016 074A  
                          l5008 0722                            l3290 139C                            l3282 1376  
                          l3362 1600                            l4082 0BEC                            l4058 0B62  
                          l5130 08EC                            l5034 0782                            l3364 160C  
                          l3700 1BB2                            l4180 0DC6                            l4164 0D86  
                          l4156 0D62                            l4148 0D4C                            l3516 1736  
                          l5140 0910                            l5116 0898                            l5108 0884  
                          l5052 07C8                            l5028 076C                            l3294 13AC  
                          l3278 1368                            l3382 1646                            l3374 162A  
                          l4166 0D8E                            l4086 0BF8                            l3542 1C38  
                          l3712 1B0A                            l3800 1452                            l3376 1636  
                          l4184 0DD0                            l4176 0DB2                            l3640 175C  
                          l5160 095A                            l5144 0920                            l5136 0906  
                          l5048 07B8                            l3810 1490                            l4098 0C30  
                          l4194 0DEA                            l3570 1A50                            l5058 07DE  
                   _TI_NewTimer 1970                            l4188 0DE0                            l3492 126A  
                          l3660 17A2                            l3652 178A                            l3644 176A  
                          l3636 1750                            l3572 1A58                            l5172 0992  
                          l5164 0974                            l5156 0948                            l5148 092A  
                          l5068 080C                            l3670 1A0E                            l3486 125E  
                          l3478 1254                            l3646 1772                            l3574 1A62  
                          l5086 0840                            l5078 0820                            l3744 1116  
                          l3912 0F26                            l3496 1290                            l3656 1794  
                          l3850 1322                            l3834 12F6                            l3826 12DA  
                          l3922 0F4C                            l3682 1A2A                            l3674 1A14  
                          l5098 0868                            l5178 09B6                            l3852 132C  
                          l3860 133A                            l3908 0F1A                            l3692 1B9A  
                          l4724 1B5E                            l4812 03D8                            l4804 03C6  
                          l3926 0F58                            l3686 1A32                            l4902 053A  
                          l4830 0412                            l4822 03F6                            l4814 03DE  
                          l4750 030C                            l5198 1952                            l3792 1414  
                          l3856 1334                            l3936 0F76                            l4912 055E  
                          l4904 0542                            l4744 02F6                            l4728 02D0  
                          l3954 0FA0                            l4922 057A                            l4834 0420  
                          l4826 0404                            l4818 03EA                            l4754 0318  
                          l3962 1548                            l3876 0EB4                            l4908 0550  
                          l4852 0474                            l4844 0450                            l4780 037A  
                          l3980 1596                            l4950 05EE                            l4934 05BA  
                          l4838 043A                            l4790 039C                            l4766 0348  
                          l4944 05DA                            l4928 05A4                            l4856 0482  
                          l4776 036E                            l3984 159E                            l3992 15B0  
                          l4962 0626                            l4874 04D2                            l4866 04BA  
                          l4794 03A4                            l4972 0646                            l4956 060C  
                          l4876 04D8                            l4990 069A                            l4894 0516  
                          l4984 0670                            l4968 063C                            l4978 065A  
                          l4898 0528                            l4998 06EA                            u2300 186E  
                          u2240 1820                            u2320 17B8                            u2260 183C  
                          u2340 17D4                            u3220 0F3C                            u2318 1870  
                          u3070 130E                            u2280 1856                            u2360 17EE  
                          u2258 1822                            u2338 17BA                            u3250 0F46  
                          u2380 1806                            u5100 0972                            u2278 183E  
                          u2358 17D6                            u5120 09AA                            u3360 1582  
                          u2298 1858                            u2378 17F0                            u3290 0F8C  
                          u3540 0CCC                            u2660 120A                            u2740 16DC  
                          u3380 0FFC                            u2398 1808                            u2830 00B4  
                          u2670 1222                            u2750 16F8                            u5070 08B8  
                          u2920 1A18                            u2760 00DA                            u2680 1236  
                          u4600 04A2                            u2770 00E6        __end_of_displayTimestamp 0128  
                          u4530 040C                            u4450 0362                            u3580 0DA2  
                          u4380 0312                            u2790 00A6                            u2960 11EA  
                          u2880 1776                            u4580 047C                            u4830 0688  
                          u4940 07F6                            u4860 0718                            u4780 0606  
                          _TMR0 0FD6                            _Tics 0017                            _Rows 003E  
                          _data 0025                            _main 1928                            fsr2h 0FDA  
                          indf2 0FDF                            fsr1l 0FE1                            fsr2l 0FD9  
                    _LcCursorOn 00EA                            btemp 0075                 __end_of_TI_Init 1B36  
                          prodl 0FF3                 __end_of_LcClear 1CB6                            start 0012  
               __end_of_CantaIR 1B06                   LcInit@columns 0060                 saveData@address 004C  
                  ___param_bank 0000           _incrementSysTimestamp 0056            __end_of_lcdAddString 1B64  
              __end_of_MAINMENU 0297         __end_of_finishedDisplay 00B8                     Espera@Timer 0058  
                         ?_main 004B                 __end_of___lbdiv 1A36                           _EEADR 0FA9  
               __end_of___awmod 17AC                 __end_of___lbmod 1BBA                           _T0CON 0FD5  
                         _TABLE 0201                           _RCREG 0FAE                           _SPBRG 0FAF  
               __end_of_checkRX 00EA                 __end_of_checkTX 00DE                           _TXREG 0FAD  
                         _Timer 0023                __end_of_SMSTABLE 02CD                           _getRX 0136  
               __end_of_initSIO 1D10                           _pTime 0048                           _index 0037  
                  _TI_ResetTics 1BBA                           _setTX 0114                           _timer 004A  
                   _LcCursorOff 00F6                           _state 0043                __end_of_RSI_High 0012  
          __end_of_getAvailable 0136                           tablat 0FF5           __end_of_sendTimestamp 1DC0  
               __end_of_smsLoop 15D4                           ttemp5 0076                           ttemp6 0079  
                         ttemp7 007D                           status 0FD8                           wtemp8 0076  
               ___lbdiv@divisor 004B                __end_of_LcGotoXY 140E            __end_of_getColumnAct 0132  
               ___lbdiv@counter 004D         EscriuPrimeraOrdre@ordre 004C                 __initialization 14B4  
                _refreshDisplay 1C2E                    __end_of_main 1970                     ?_RSI_Timer0 004B  
                TI_Init@counter 004B                  _isPressed$1105 004B                     ?_TI_GetTics 004B  
            _updateSysTimestamp 1B64                    _sysTimerLoop 0FE2                          ??_main 006D  
                 __activetblptr 0002                   ?_initJoystick 004B             ?_updateSysTimestamp 004C  
                        ?_getRX 004B                          _ADCON0 0FC2                          _ADCON1 0FC1  
                        _ADCON2 0FC0                          _ADRESH 0FC4                          _EEDATA 0FA8  
                        ?_setTX 004B                          _EECON2 0FA7                   ?_initSysTimer 004B  
                     ??_TI_Init 004B                       ??_LcClear 0060                       ??_CantaIR 004D  
                LcGotoXY@Fisics 005E                  LcGotoXY@Column 0060                   ??_WaitForBusy 0058  
                        _TMR0IF 7F92                          _SPBRGH 0FB0                     ?_LcCursorOn 004B  
                        _LcInit 10EA                __end_of_getDigit 1C96            ??_updateSysTimestamp 004F  
                        _Espera 1A6E          __end_of_refreshDisplay 1C52                    _LcGotoXY$528 005C  
        ?_incrementSysTimestamp 004B                          _RowAct 003C                          _Timers 0100  
                     ??___lbdiv 004C                       ??___awmod 004F                       ??___lbmod 004C  
                        _isIdle 009C                __end_of_readData 009C                __end_of_initMenu 0042  
              ?_finishedDisplay 004B                       ??_checkRX 004B                       ??_checkTX 004B  
              __end_of_menuLoop 0AD6                          clear_0 151A                          clear_1 1526  
                        clear_2 1532                          _period 0032                 ___awmod@divisor 004D  
                        _scroll 001F                          isa$std 0001                 ___awmod@counter 004F  
              __end_of_saveData 1C74                  ??_initJoystick 004B                          _sysTmr 0046  
                     ??_initSIO 004B                    __pdataCOMRAM 006D                    __mediumconst 0000  
                        tblptrh 0FF7                          tblptrl 0FF6                          tblptru 0FF8  
                     ??_smsLoop 0058                  ??_initSysTimer 004F               __end_of_CantaData 1AD4  
              ___lbdiv@dividend 004C                 _getJoystickDown 1D5A                 ___lbmod@divisor 004B  
                    __accesstop 0080         __end_of__initialization 1538                 ___lbmod@counter 004D  
             __end_of_LcPutChar 1652                   ___rparam_used 0001                   __end_of_TABLE 020D  
               ?_refreshDisplay 004B                  __pcstackCOMRAM 004B             __end_of_WaitForBusy 19FC  
                  __pidataBANK0 187C                    __pidataBANK1 0042                   __end_of_getRX 013A  
                 __end_of_setTX 011C               ??_getSysTimestamp 004D                ___lbdiv@quotient 004E  
                     ?_RSI_High 004B       TI_GetTics@CopyCurrentTics 0053                       ?_LcGotoXY 0059  
                       ??_getRX 004B                    _lcdAddString 1B36                         ??_setTX 004B  
                   setTX@letter 004B                    ?_TI_NewTimer 004B                      __pbssBANK0 00DC  
                    __pbssBANK1 0100               ?_displayTimestamp 004B              _state@EEPROM$F1455 0028  
            ??_displayTimestamp 004B                         ?_LcInit 0060                   _CantaPartAlta 1814  
        TI_NewTimer@TimerHandle 004B                         ?_Espera 0058           __end_of_getJoystickUp 1D5A  
       TI_ResetTics@TimerHandle 004B                         ?_isIdle 004B                    _getAvailable 0132  
                    ??_RSI_High 004B                    _getColumnAct 012E                         LcInit@i 0062  
       __end_of_getJoystickDown 1D72                      ??_LcGotoXY 005A                   ?_resetDisplay 004B  
                     ?_getDigit 004B                      _displayPos 0038                    ?_LcCursorOff 004B  
                       _TI_Init 1B06                         _LcClear 1C96                         _CantaIR 1AD4  
                     ?_readData 004B                       ?_initMenu 004B                       ?_menuLoop 004B  
                   _WaitForBusy 19B8                  ?_CantaPartAlta 004B                         _Columns 003D  
             __end_of_getColumn 1C08            __end_of_initJoystick 1CD6                       ?_saveData 004B  
                       __Hparam 0000               __end_of_audioLoop 14B4                         __Lparam 0000  
             displayMenu@string 0062                      _initKeypad 1C08                      _initMemory 00B8  
                 ?_joystickLoop 004B          _index@SystemTimer$F848 0030                    ??_RSI_Timer0 004B  
                       ___lbdiv 19FC                         ___awmod 173C                         ___lbmod 1B90  
          __end_of_initSysTimer 1D8A                    __psmallconst 0200                    ??_TI_GetTics 004F  
                    _currentKey 002F               __end_of_isPressed 1D42                         _checkRX 00DE  
                       _checkTX 00D2                         __pcinit 14B4                         __ramtop 0200  
                    _keypadLoop 0E92                         __ptext0 1928                         __ptext1 0FE2  
                       __ptext2 0056                         __ptext3 1546                         __ptext4 02CE  
                       __ptext5 1DBA                         __ptext6 00C6                         __ptext7 011C  
                       __ptext8 1C2E                         __ptext9 0016  displayRecordings@indexPosition 004B  
             __end_of_initAudio 1DA2                      _memoryLoop 0AD6                       CantaIR@IR 004D  
                       _initSIO 1CF4                _getNumRecordings 1A36                ___awmod@dividend 004B  
                ??_resetDisplay 0060                      ??_getDigit 004B                         _smsLoop 1546  
                       _pressed 002D                 WaitForBusy@Busy 0058               __end_of_sendIndex 00D2  
                    _recordings 00DC               __end_of_saveIndex 0122            end_of_initialization 1538  
             __end_of_playMusic 007C              __end_of_RSI_Timer0 1DBA                      ??_readData 004B  
                    ??_initMenu 004F                   __Lmediumconst 0000                      ??_menuLoop 0065  
       ??_incrementSysTimestamp 004B                    ??_LcCursorOn 0059                      _moveOneRow 1D10  
            __end_of_TI_GetTics 1928                      ??_saveData 004C                      _numPresses 002C  
                ??_joystickLoop 004B                       _RCSTAbits 0FAB                         postdec1 0FE5  
                       postdec2 0FDD                _ENDCOMMUNICATION 00D1                         postinc0 0FEE  
                       postinc2 0FDE               __end_of_stopMusic 012E                       _PORTBbits 0F81  
                     _PORTDbits 0F83               _KeGetGenericValue 1CD6              __end_of_LcCursorOn 00F6  
              ?_getJoystickDown 004B           TI_GetTics@TimerHandle 0057                ___lbmod@dividend 004C  
            ?_KeGetGenericValue 004B                       _TRISAbits 0F92                       _TRISBbits 0F93  
                     _TRISCbits 0F94                       _TRISDbits 0F95           KeGetCharValue@generic 0050  
               _memoryLoop$1475 0064                 _memoryLoop$1476 0066                 _memoryLoop$1478 0068  
           ??_KeGetGenericValue 004D                 ??_CantaPartAlta 004B                ??_refreshDisplay 0060  
                   ___lbmod@rem 004E                       _CantaData 1AA2                       _TXSTAbits 0FAC  
               _getSysTimestamp 0102                  __end_of_LcInit 11EC                       _LcPutChar 15D4  
                __end_of_Espera 1AA2                     ?_initKeypad 004B                     ?_initMemory 004B  
                _KeGetCharValue 11EC                   ??_displayMenu 0063      __end_of_EscriuPrimeraOrdre 16CC  
                   _BAUDCONbits 0FB8       __end_of_KeGetGenericValue 1CF4                   __pidataCOMRAM 010C  
                __end_of_isIdle 00AA                     ?_keypadLoop 004B                       _ColumnAct 003B  
                   ?_memoryLoop 004B             start_initialization 14B4              TI_NewTimer@Counter 004E  
             _displayRecordings 007C                _state@Audio$F811 0033              ?_displayRecordings 004B  
                 _sendTimestamp 1DBA                      ?_CantaData 004B                     ?_moveOneRow 004B  
                      ??_LcInit 0061          __end_of_KeGetCharValue 12B2                        ??_Espera 005C  
           ??_displayRecordings 004B            __end_of_resetDisplay 002C                      ?_LcPutChar 004B  
                _STARTRECORDING 009E              _state@Keypad$F1073 002A          sendIndex@indexPosition 004B  
                      ??_isIdle 004B                     __pdataBANK0 0080                     __pdataBANK1 014B  
           __end_of_displayMenu 173C                    _initJoystick 1CB6                     __pbssCOMRAM 0001  
     __end_of_displayRecordings 008C                    saveData@data 004B            __end_of_joystickLoop 1364  
                  _menuLoop$716 006B                   ?_TI_ResetTics 004B         __end_of_getSysTimestamp 010C  
                  _initSysTimer 1D72                        ?_TI_Init 004B                        ?_LcClear 004B  
                      ?_CantaIR 004B                  ?_sendTimestamp 004B                  _CantaPartBaixa 17AC  
         _getNumRecordings$1492 004B           _getNumRecordings$1493 004D                    ?_WaitForBusy 004B  
      __end_of_getNumRecordings 1A6E                 ?_KeGetCharValue 004B                       __pintcode 0008  
                     _getColumn 1BE2                        ?___lbdiv 004B                        ?___awmod 004B  
                      ?___lbmod 004B                       _available 002B                       _audioLoop 140E  
               CantaPartBaixa@c 004C                       _direction 0042                   ?_sysTimerLoop 004B  
                      ?_checkRX 004B                        ?_checkTX 004B                        ?_initSIO 004B  
                   __smallconst 0200                       _isPressed 1D2A                 readData@address 004B  
                     _indexTemp 0027                       _initAudio 1D8A                        ?_smsLoop 004B  
                ??_TI_ResetTics 004B                    playMusic@aux 004C          __end_of_CantaPartBaixa 1814  
                _PLAYRECORDINGS 00B9                        _MAINMENU 020D               ??_finishedDisplay 004B  
                   ??_CantaData 004D                        _LATBbits 0F8A                        _LATCbits 0F8B  
                     _sendIndex 00C6                        _LATDbits 0F8C                       _saveIndex 011C  
                     _playMusic 006A   __end_of_incrementSysTimestamp 006A                        _PIR1bits 0F9E  
                   ??_LcPutChar 0061                       _timeValue 0021                      ?_getColumn 004B  
                     _skipState 0036                       _timer_SMS 0044                  ??_sysTimerLoop 0062  
                   _displayMenu 16CC                        _SMSTABLE 0297                      ?_audioLoop 004B  
                     _timestamp 0001                       _songTimer 0049                     _CURRENTTIME 0090  
                      _RSI_High 0008                      _ADCON0bits 0FC2                      ?_isPressed 004B  
                      Espera@ms 005A                       _stopMusic 0128                        _LcGotoXY 1364  
                   _indexEEPROM 0026                      ?_initAudio 004B                     LcGotoXY@Row 0059  
               ??_sendTimestamp 004B                     _INTCON2bits 0FF1                       copy_data0 14C8  
                     copy_data1 14E8                       copy_data2 1508                 ?_CantaPartBaixa 004B  
              ?_getSysTimestamp 004B                      ?_sendIndex 004B                      ?_saveIndex 004B  
                    ?_playMusic 004B                      _EECON1bits 0FA6                    _MUSICPERIODS 006D  
                      __Hrparam 0000                        __Lrparam 0000                    ??_initKeypad 004F  
                  ??_initMemory 004B                 _state@Menu$F707 0035                _displayTimestamp 0122  
                 _getJoystickUp 1D42                    ??_keypadLoop 0058                    ??_memoryLoop 0062  
                    ?_stopMusic 004B                        _colIndex 0039                        _getDigit 1C74  
                  _resetDisplay 0016                        _hasMoved 0041                        __ptext10 1C96  
                      __ptext11 1B36              _EscriuPrimeraOrdre 1652                        __ptext20 16CC  
                      __ptext12 1D2A                        __ptext21 1D10                        __ptext13 009C  
                      __ptext30 008C                        __ptext22 173C                        __ptext14 1A36  
                      __ptext31 0102                        __ptext23 11EC                        __ptext15 1D42  
                      __ptext40 1364                        __ptext32 0136                        __ptext24 1CD6  
                      __ptext16 1D5A                        __ptext41 1AA2                        __ptext33 00AA  
                      __ptext25 1BE2                        __ptext17 012E                        __ptext50 1CF4  
                      __ptext42 00EA                        __ptext34 0122                        __ptext26 0AD6  
                      __ptext18 0132                        __ptext51 002C                        __ptext43 00F6  
                      __ptext35 00D2                        __ptext27 1B64                        __ptext19 007C  
                      __ptext60 1970                        __ptext52 00B8                        __ptext44 0E92  
                      __ptext36 00DE                        __ptext28 0114                        __ptext61 1A6E  
                      __ptext53 1C08                        __ptext45 0128                        __ptext37 1B90  
                      __ptext29 1C52                        __ptext62 1BBA                        __ptext54 1CB6  
                      __ptext46 006A                        __ptext38 19FC                        __ptext63 18D8  
                      __ptext55 1D8A                        __ptext47 1C74                        __ptext39 15D4  
                      __ptext64 1652                        __ptext56 140E                        __ptext48 12B2  
                      __ptext65 1AD4                        __ptext57 1B06                        __ptext49 1D72  
                      __ptext66 17AC                        __ptext58 10EA                        __ptext67 1814  
                      __ptext59 19B8                        __ptext69 1DA2                   ?_lcdAddString 0062  
                 ??_TI_NewTimer 004D                    _PORTNAMEMENU 00C5                  CantaPartAlta@c 004C  
            __end_of_initKeypad 1C2E              __end_of_initMemory 00C6                        _readData 008C  
                      _initMenu 002C                    ??_moveOneRow 0061             ?_EscriuPrimeraOrdre 004B  
                      _menuLoop 02CE           __end_of_CantaPartAlta 187C      __end_of_updateSysTimestamp 1B90  
                 CantaData@Data 004D              __end_of_keypadLoop 0FE2                        _saveData 1C52  
            __end_of_memoryLoop 0E92                     ??_getColumn 004D                        isa$xinst 0000  
                      _rowIndex 003A                        _portName 0013            __end_of_TI_ResetTics 1BE2  
                  _joystickLoop 12B2                        _previous 002E                        _songTime 0047  
                      int$flags 0075                  ?_getJoystickUp 004B                        _stateSMS 0029  
           updateSysTimestamp@i 004E                     ??_audioLoop 0058                   ?_getAvailable 004B  
          ??_EscriuPrimeraOrdre 004B                      LcInit@rows 0061                   ?_getColumnAct 004B  
                   ??_isPressed 004B                      _INTCONbits 0FF2              __end_of_moveOneRow 1D2A  
           _getJoystickDown$241 004B                      _MODIFYTIME 00AC                     ??_initAudio 004F  
                ??_lcdAddString 0064                   ??_LcCursorOff 0059                        intlevel2 0000  
          __end_of_sysTimerLoop 10EA                ??_KeGetCharValue 004E                    _timerBounces 0045  
        _state@SystemTimer$F847 0031                     ??_sendIndex 004B                     ??_saveIndex 004B  
                    LcPutChar@c 0061                     ??_playMusic 004C             __end_of_TI_NewTimer 19B8  
            lcdAddString@string 0062               ?_getNumRecordings 004B                     _scrollIndex 001D  
            ??_getNumRecordings 004B                  ??_getAvailable 004B                      _MUSICDELAY 0080  
              _joystickLoop$239 004D                  ??_getColumnAct 004B                 _finishedDisplay 00AA  
                   ??_stopMusic 004B               _getJoystickUp$243 004B                     _tmpPortChar 0034  
           __end_of_LcCursorOff 0102          updateSysTimestamp@time 004C               ??_getJoystickDown 004B  
               ??_getJoystickUp 004B  
