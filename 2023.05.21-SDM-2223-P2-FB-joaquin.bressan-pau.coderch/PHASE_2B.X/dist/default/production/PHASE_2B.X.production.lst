

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun May 21 00:49:15 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    92                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    93                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    95   000000                     
    96                           ; Generated 09/02/2023 GMT
    97                           ; 
    98                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F4321 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130   000000                     
   131                           	psect	idataCOMRAM
   132   000016                     __pidataCOMRAM:
   133                           	callstack 0
   134                           
   135                           ;initializer for _MUSICPERIODS
   136   000016  03                 	db	3
   137   000017  02                 	db	2
   138   000018  03                 	db	3
   139   000019  01                 	db	1
   140   00001A  04                 	db	4
   141   00001B  03                 	db	3
   142   00001C  02                 	db	2
   143   00001D  05                 	db	5
   144                           
   145                           	psect	idataBANK0
   146   0019AE                     __pidataBANK0:
   147                           	callstack 0
   148                           
   149                           ;initializer for _MUSICDELAY
   150   0019AE  03E8               	dw	1000
   151   0019B0  03E8               	dw	1000
   152   0019B2  03E8               	dw	1000
   153   0019B4  0960               	dw	2400
   154   0019B6  03E8               	dw	1000
   155   0019B8  03E8               	dw	1000
   156   0019BA  0258               	dw	600
   157   0019BC  04B0               	dw	1200
   158                           
   159                           ;initializer for _CURRENTTIME
   160   0019BE  43                 	db	67
   161   0019BF  55                 	db	85
   162   0019C0  52                 	db	82
   163   0019C1  52                 	db	82
   164   0019C2  45                 	db	69
   165   0019C3  4E                 	db	78
   166   0019C4  54                 	db	84
   167   0019C5  20                 	db	32
   168   0019C6  54                 	db	84
   169   0019C7  49                 	db	73
   170   0019C8  4D                 	db	77
   171   0019C9  45                 	db	69
   172   0019CA  3A                 	db	58
   173   0019CB  00                 	db	0
   174                           
   175                           ;initializer for _STARTRECORDING
   176   0019CC  52                 	db	82
   177   0019CD  45                 	db	69
   178   0019CE  43                 	db	67
   179   0019CF  4F                 	db	79
   180   0019D0  52                 	db	82
   181   0019D1  44                 	db	68
   182   0019D2  49                 	db	73
   183   0019D3  4E                 	db	78
   184   0019D4  47                 	db	71
   185   0019D5  2E                 	db	46
   186   0019D6  2E                 	db	46
   187   0019D7  2E                 	db	46
   188   0019D8  00                 	db	0
   189   0019D9  00                 	db	0
   190                           
   191                           ;initializer for _MODIFYTIME
   192   0019DA  4D                 	db	77
   193   0019DB  4F                 	db	79
   194   0019DC  44                 	db	68
   195   0019DD  49                 	db	73
   196   0019DE  46                 	db	70
   197   0019DF  59                 	db	89
   198   0019E0  20                 	db	32
   199   0019E1  54                 	db	84
   200   0019E2  49                 	db	73
   201   0019E3  4D                 	db	77
   202   0019E4  45                 	db	69
   203   0019E5  3A                 	db	58
   204   0019E6  00                 	db	0
   205                           
   206                           ;initializer for _PLAYRECORDINGS
   207   0019E7  50                 	db	80
   208   0019E8  4C                 	db	76
   209   0019E9  41                 	db	65
   210   0019EA  59                 	db	89
   211   0019EB  49                 	db	73
   212   0019EC  4E                 	db	78
   213   0019ED  47                 	db	71
   214   0019EE  2E                 	db	46
   215   0019EF  2E                 	db	46
   216   0019F0  2E                 	db	46
   217   0019F1  00                 	db	0
   218   0019F2  00                 	db	0
   219                           
   220                           ;initializer for _PORTNAMEMENU
   221   0019F3  50                 	db	80
   222   0019F4  4F                 	db	79
   223   0019F5  52                 	db	82
   224   0019F6  54                 	db	84
   225   0019F7  20                 	db	32
   226   0019F8  4E                 	db	78
   227   0019F9  41                 	db	65
   228   0019FA  4D                 	db	77
   229   0019FB  45                 	db	69
   230   0019FC  3A                 	db	58
   231   0019FD  20                 	db	32
   232   0019FE  00                 	db	0
   233                           
   234                           ;initializer for _ENDCOMMUNICATION
   235   0019FF  62                 	db	98
   236   001A00  79                 	db	121
   237   001A01  65                 	db	101
   238   001A02  20                 	db	32
   239   001A03  62                 	db	98
   240   001A04  79                 	db	121
   241   001A05  65                 	db	101
   242   001A06  20                 	db	32
   243   001A07  00                 	db	0
   244   001A08  00                 	db	0
   245   001A09  00                 	db	0
   246                           
   247                           	psect	idataBANK1
   248   001F1A                     __pidataBANK1:
   249                           	callstack 0
   250                           
   251                           ;initializer for _ERRORMESSAGES
   252   001F1A  4E                 	db	78
   253   001F1B  4F                 	db	79
   254   001F1C  20                 	db	32
   255   001F1D  52                 	db	82
   256   001F1E  45                 	db	69
   257   001F1F  43                 	db	67
   258   001F20  4F                 	db	79
   259   001F21  52                 	db	82
   260   001F22  44                 	db	68
   261   001F23  53                 	db	83
   262   001F24  20                 	db	32
   263   001F25  46                 	db	70
   264   001F26  4F                 	db	79
   265   001F27  55                 	db	85
   266   001F28  4E                 	db	78
   267   001F29  44                 	db	68
   268   001F2A  00                 	db	0
   269   001F2B  00                 	db	0
   270   001F2C  00                 	db	0
   271   001F2D  00                 	db	0
   272                           
   273                           	psect	smallconst
   274   000200                     __psmallconst:
   275                           	callstack 0
   276   000200  00                 	db	0
   277   000201                     _DIGITVALUES:
   278                           	callstack 0
   279   000201  31                 	db	49
   280   000202  32                 	db	50
   281   000203  33                 	db	51
   282   000204  34                 	db	52
   283   000205  35                 	db	53
   284   000206  36                 	db	54
   285   000207  37                 	db	55
   286   000208  38                 	db	56
   287   000209  39                 	db	57
   288   00020A  2A                 	db	42
   289   00020B  30                 	db	48
   290   00020C  23                 	db	35
   291   00020D                     __end_of_DIGITVALUES:
   292                           	callstack 0
   293   00020D                     _MAINMENU:
   294                           	callstack 0
   295   00020D  31                 	db	49
   296   00020E  2E                 	db	46
   297   00020F  53                 	db	83
   298   000210  54                 	db	84
   299   000211  41                 	db	65
   300   000212  52                 	db	82
   301   000213  54                 	db	84
   302   000214  20                 	db	32
   303   000215  52                 	db	82
   304   000216  45                 	db	69
   305   000217  43                 	db	67
   306   000218  4F                 	db	79
   307   000219  52                 	db	82
   308   00021A  44                 	db	68
   309   00021B  49                 	db	73
   310   00021C  4E                 	db	78
   311   00021D  47                 	db	71
   312   00021E  20                 	db	32
   313   00021F  20                 	db	32
   314   000220  20                 	db	32
   315   000221  20                 	db	32
   316   000222  20                 	db	32
   317   000223  00                 	db	0
   318   000224  32                 	db	50
   319   000225  2E                 	db	46
   320   000226  50                 	db	80
   321   000227  4C                 	db	76
   322   000228  41                 	db	65
   323   000229  59                 	db	89
   324   00022A  20                 	db	32
   325   00022B  52                 	db	82
   326   00022C  45                 	db	69
   327   00022D  43                 	db	67
   328   00022E  4F                 	db	79
   329   00022F  52                 	db	82
   330   000230  44                 	db	68
   331   000231  49                 	db	73
   332   000232  4E                 	db	78
   333   000233  47                 	db	71
   334   000234  53                 	db	83
   335   000235  20                 	db	32
   336   000236  20                 	db	32
   337   000237  20                 	db	32
   338   000238  20                 	db	32
   339   000239  20                 	db	32
   340   00023A  00                 	db	0
   341   00023B  33                 	db	51
   342   00023C  2E                 	db	46
   343   00023D  4D                 	db	77
   344   00023E  4F                 	db	79
   345   00023F  44                 	db	68
   346   000240  49                 	db	73
   347   000241  46                 	db	70
   348   000242  59                 	db	89
   349   000243  20                 	db	32
   350   000244  43                 	db	67
   351   000245  55                 	db	85
   352   000246  52                 	db	82
   353   000247  52                 	db	82
   354   000248  45                 	db	69
   355   000249  4E                 	db	78
   356   00024A  54                 	db	84
   357   00024B  20                 	db	32
   358   00024C  54                 	db	84
   359   00024D  49                 	db	73
   360   00024E  4D                 	db	77
   361   00024F  45                 	db	69
   362   000250  20                 	db	32
   363   000251  00                 	db	0
   364   000252  34                 	db	52
   365   000253  2E                 	db	46
   366   000254  53                 	db	83
   367   000255  48                 	db	72
   368   000256  4F                 	db	79
   369   000257  57                 	db	87
   370   000258  20                 	db	32
   371   000259  43                 	db	67
   372   00025A  55                 	db	85
   373   00025B  52                 	db	82
   374   00025C  52                 	db	82
   375   00025D  45                 	db	69
   376   00025E  4E                 	db	78
   377   00025F  54                 	db	84
   378   000260  20                 	db	32
   379   000261  54                 	db	84
   380   000262  49                 	db	73
   381   000263  4D                 	db	77
   382   000264  45                 	db	69
   383   000265  20                 	db	32
   384   000266  20                 	db	32
   385   000267  20                 	db	32
   386   000268  00                 	db	0
   387   000269  35                 	db	53
   388   00026A  2E                 	db	46
   389   00026B  45                 	db	69
   390   00026C  4E                 	db	78
   391   00026D  44                 	db	68
   392   00026E  20                 	db	32
   393   00026F  43                 	db	67
   394   000270  4F                 	db	79
   395   000271  4D                 	db	77
   396   000272  4D                 	db	77
   397   000273  55                 	db	85
   398   000274  4E                 	db	78
   399   000275  49                 	db	73
   400   000276  43                 	db	67
   401   000277  41                 	db	65
   402   000278  54                 	db	84
   403   000279  49                 	db	73
   404   00027A  4F                 	db	79
   405   00027B  4E                 	db	78
   406   00027C  20                 	db	32
   407   00027D  20                 	db	32
   408   00027E  20                 	db	32
   409   00027F  00                 	db	0
   410   000280  20                 	db	32
   411   000281  20                 	db	32
   412   000282  20                 	db	32
   413   000283  20                 	db	32
   414   000284  20                 	db	32
   415   000285  20                 	db	32
   416   000286  20                 	db	32
   417   000287  20                 	db	32
   418   000288  20                 	db	32
   419   000289  20                 	db	32
   420   00028A  20                 	db	32
   421   00028B  20                 	db	32
   422   00028C  20                 	db	32
   423   00028D  20                 	db	32
   424   00028E  20                 	db	32
   425   00028F  20                 	db	32
   426   000290  20                 	db	32
   427   000291  20                 	db	32
   428   000292  20                 	db	32
   429   000293  20                 	db	32
   430   000294  20                 	db	32
   431   000295  20                 	db	32
   432   000296  00                 	db	0
   433   000297                     __end_of_MAINMENU:
   434                           	callstack 0
   435   000297                     _SMSVALUES:
   436                           	callstack 0
   437   000297  31                 	db	49
   438   000298  00                 	db	0
   439   000299  00                 	db	0
   440   00029A  00                 	db	0
   441   00029B  00                 	db	0
   442   00029C  00                 	db	0
   443   00029D  41                 	db	65
   444   00029E  42                 	db	66
   445   00029F  43                 	db	67
   446   0002A0  32                 	db	50
   447   0002A1  00                 	db	0
   448   0002A2  00                 	db	0
   449   0002A3  44                 	db	68
   450   0002A4  45                 	db	69
   451   0002A5  46                 	db	70
   452   0002A6  33                 	db	51
   453   0002A7  00                 	db	0
   454   0002A8  00                 	db	0
   455   0002A9  47                 	db	71
   456   0002AA  48                 	db	72
   457   0002AB  49                 	db	73
   458   0002AC  34                 	db	52
   459   0002AD  00                 	db	0
   460   0002AE  00                 	db	0
   461   0002AF  4A                 	db	74
   462   0002B0  4B                 	db	75
   463   0002B1  4C                 	db	76
   464   0002B2  35                 	db	53
   465   0002B3  00                 	db	0
   466   0002B4  00                 	db	0
   467   0002B5  4D                 	db	77
   468   0002B6  4E                 	db	78
   469   0002B7  4F                 	db	79
   470   0002B8  36                 	db	54
   471   0002B9  00                 	db	0
   472   0002BA  00                 	db	0
   473   0002BB  50                 	db	80
   474   0002BC  51                 	db	81
   475   0002BD  52                 	db	82
   476   0002BE  53                 	db	83
   477   0002BF  37                 	db	55
   478   0002C0  00                 	db	0
   479   0002C1  54                 	db	84
   480   0002C2  55                 	db	85
   481   0002C3  56                 	db	86
   482   0002C4  38                 	db	56
   483   0002C5  00                 	db	0
   484   0002C6  00                 	db	0
   485   0002C7  57                 	db	87
   486   0002C8  58                 	db	88
   487   0002C9  59                 	db	89
   488   0002CA  5A                 	db	90
   489   0002CB  39                 	db	57
   490   0002CC  00                 	db	0
   491   0002CD                     __end_of_SMSVALUES:
   492                           	callstack 0
   493   000000                     _EECON2	set	4007
   494   000000                     _EEDATA	set	4008
   495   000000                     _EEADR	set	4009
   496   000000                     _RCREG	set	4014
   497   000000                     _TXREG	set	4013
   498   000000                     _TRISBbits	set	3987
   499   000000                     _TRISCbits	set	3988
   500   000000                     _TRISDbits	set	3989
   501   000000                     _ADCON2	set	4032
   502   000000                     _ADCON1	set	4033
   503   000000                     _ADCON0	set	4034
   504   000000                     _INTCONbits	set	4082
   505   000000                     _ADCON0bits	set	4034
   506   000000                     _PORTBbits	set	3969
   507   000000                     _PORTDbits	set	3971
   508   000000                     _LATDbits	set	3980
   509   000000                     _TRISAbits	set	3986
   510   000000                     _ADRESH	set	4036
   511   000000                     _TMR0	set	4054
   512   000000                     _T0CON	set	4053
   513   000000                     _INTCON2bits	set	4081
   514   000000                     _TMR0IF	set	32658
   515   000000                     _PIR1bits	set	3998
   516   000000                     _RCSTAbits	set	4011
   517   000000                     _TXSTAbits	set	4012
   518   000000                     _SPBRG	set	4015
   519   000000                     _SPBRGH	set	4016
   520   000000                     _LATBbits	set	3978
   521   000000                     _LATCbits	set	3979
   522   000000                     _BAUDCONbits	set	4024
   523   000000                     _EECON1bits	set	4006
   524   0002CD  00                 	db	0	; dummy byte at the end
   525   000000                     
   526                           ; #config settings
   527                           
   528                           	psect	cinit
   529   0015E6                     __pcinit:
   530                           	callstack 0
   531   0015E6                     start_initialization:
   532                           	callstack 0
   533   0015E6                     __initialization:
   534                           	callstack 0
   535                           
   536                           ; Initialize objects allocated to BANK1 (20 bytes)
   537                           ; load TBLPTR registers with __pidataBANK1
   538   0015E6  0E1A               	movlw	low __pidataBANK1
   539   0015E8  6EF6               	movwf	tblptrl,c
   540   0015EA  0E1F               	movlw	high __pidataBANK1
   541   0015EC  6EF7               	movwf	tblptrh,c
   542   0015EE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   543   0015F0  6EF8               	movwf	tblptru,c
   544   0015F2  EE01  F04B         	lfsr	0,__pdataBANK1
   545   0015F6  EE10 F014          	lfsr	1,20
   546   0015FA                     copy_data0:
   547   0015FA  0009               	tblrd		*+
   548   0015FC  CFF5 FFEE          	movff	tablat,postinc0
   549   001600  50E5               	movf	postdec1,w,c
   550   001602  50E1               	movf	fsr1l,w,c
   551   001604  E1FA               	bnz	copy_data0
   552                           
   553                           ; Initialize objects allocated to BANK0 (92 bytes)
   554                           ; load TBLPTR registers with __pidataBANK0
   555   001606  0EAE               	movlw	low __pidataBANK0
   556   001608  6EF6               	movwf	tblptrl,c
   557   00160A  0E19               	movlw	high __pidataBANK0
   558   00160C  6EF7               	movwf	tblptrh,c
   559   00160E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   560   001610  6EF8               	movwf	tblptru,c
   561   001612  EE00  F080         	lfsr	0,__pdataBANK0
   562   001616  EE10 F05C          	lfsr	1,92
   563   00161A                     copy_data1:
   564   00161A  0009               	tblrd		*+
   565   00161C  CFF5 FFEE          	movff	tablat,postinc0
   566   001620  50E5               	movf	postdec1,w,c
   567   001622  50E1               	movf	fsr1l,w,c
   568   001624  E1FA               	bnz	copy_data1
   569                           
   570                           ; Initialize objects allocated to COMRAM (8 bytes)
   571                           ; load TBLPTR registers with __pidataCOMRAM
   572   001626  0E16               	movlw	low __pidataCOMRAM
   573   001628  6EF6               	movwf	tblptrl,c
   574   00162A  0E00               	movlw	high __pidataCOMRAM
   575   00162C  6EF7               	movwf	tblptrh,c
   576   00162E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   577   001630  6EF8               	movwf	tblptru,c
   578   001632  EE00  F075         	lfsr	0,__pdataCOMRAM
   579   001636  EE10 F008          	lfsr	1,8
   580   00163A                     copy_data2:
   581   00163A  0009               	tblrd		*+
   582   00163C  CFF5 FFEE          	movff	tablat,postinc0
   583   001640  50E5               	movf	postdec1,w,c
   584   001642  50E1               	movf	fsr1l,w,c
   585   001644  E1FA               	bnz	copy_data2
   586                           
   587                           ; Clear objects allocated to BANK1 (75 bytes)
   588   001646  EE01  F000         	lfsr	0,__pbssBANK1
   589   00164A  0E4B               	movlw	75
   590   00164C                     clear_0:
   591   00164C  6AEE               	clrf	postinc0,c
   592   00164E  06E8               	decf	wreg,f,c
   593   001650  E1FD               	bnz	clear_0
   594                           
   595                           ; Clear objects allocated to BANK0 (18 bytes)
   596   001652  EE00  F0DC         	lfsr	0,__pbssBANK0
   597   001656  0E12               	movlw	18
   598   001658                     clear_1:
   599   001658  6AEE               	clrf	postinc0,c
   600   00165A  06E8               	decf	wreg,f,c
   601   00165C  E1FD               	bnz	clear_1
   602                           
   603                           ; Clear objects allocated to COMRAM (82 bytes)
   604   00165E  EE00  F001         	lfsr	0,__pbssCOMRAM
   605   001662  0E52               	movlw	82
   606   001664                     clear_2:
   607   001664  6AEE               	clrf	postinc0,c
   608   001666  06E8               	decf	wreg,f,c
   609   001668  E1FD               	bnz	clear_2
   610   00166A                     end_of_initialization:
   611                           	callstack 0
   612   00166A                     __end_of__initialization:
   613                           	callstack 0
   614   00166A  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   615   00166C  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   616   00166E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   617   001670  6EF8               	movwf	tblptru,c
   618   001672  0100               	movlb	0
   619   001674  EF51  F00D         	goto	_main	;jump to C main() function
   620                           
   621                           	psect	bssCOMRAM
   622   000001                     __pbssCOMRAM:
   623                           	callstack 0
   624   000001                     _recordings:
   625                           	callstack 0
   626   000001                     	ds	24
   627   000019                     _portName:
   628                           	callstack 0
   629   000019                     	ds	4
   630   00001D                     _Tics:
   631                           	callstack 0
   632   00001D                     	ds	4
   633   000021                     _row:
   634                           	callstack 0
   635   000021                     	ds	2
   636   000023                     _scrollIndex:
   637                           	callstack 0
   638   000023                     	ds	2
   639   000025                     _scroll:
   640                           	callstack 0
   641   000025                     	ds	2
   642   000027                     _timeValue:
   643                           	callstack 0
   644   000027                     	ds	2
   645   000029                     	ds	2
   646   00002B                     _data:
   647                           	callstack 0
   648   00002B                     	ds	1
   649   00002C                     _indexEEPROM:
   650                           	callstack 0
   651   00002C                     	ds	1
   652   00002D                     _indexTemp:
   653                           	callstack 0
   654   00002D                     	ds	1
   655   00002E                     _state@EEPROM$F1543:
   656                           	callstack 0
   657   00002E                     	ds	1
   658   00002F                     _numPressed:
   659                           	callstack 0
   660   00002F                     	ds	1
   661   000030                     _keyPressed:
   662                           	callstack 0
   663   000030                     	ds	1
   664   000031                     _previousKey:
   665                           	callstack 0
   666   000031                     	ds	1
   667   000032                     _currentKey:
   668                           	callstack 0
   669   000032                     	ds	1
   670   000033                     _stateSMS:
   671                           	callstack 0
   672   000033                     	ds	1
   673   000034                     _state@Keypad$F1158:
   674                           	callstack 0
   675   000034                     	ds	1
   676   000035                     _nextKey:
   677                           	callstack 0
   678   000035                     	ds	1
   679   000036                     _index@SystemTimer$F936:
   680                           	callstack 0
   681   000036                     	ds	1
   682   000037                     _state@SystemTimer$F935:
   683                           	callstack 0
   684   000037                     	ds	1
   685   000038                     _period:
   686                           	callstack 0
   687   000038                     	ds	1
   688   000039                     _state@Audio$F899:
   689                           	callstack 0
   690   000039                     	ds	1
   691   00003A                     _stateToGo:
   692                           	callstack 0
   693   00003A                     	ds	1
   694   00003B                     _waitState:
   695                           	callstack 0
   696   00003B                     	ds	1
   697   00003C                     _tmpPortChar:
   698                           	callstack 0
   699   00003C                     	ds	1
   700   00003D                     _state@Menu$F788:
   701                           	callstack 0
   702   00003D                     	ds	1
   703   00003E                     _skipState:
   704                           	callstack 0
   705   00003E                     	ds	1
   706   00003F                     _index:
   707                           	callstack 0
   708   00003F                     	ds	1
   709   000040                     _displayPos:
   710                           	callstack 0
   711   000040                     	ds	1
   712   000041                     _colIndex:
   713                           	callstack 0
   714   000041                     	ds	1
   715   000042                     _rowIndex:
   716                           	callstack 0
   717   000042                     	ds	1
   718   000043                     _ColumnAct:
   719                           	callstack 0
   720   000043                     	ds	1
   721   000044                     _RowAct:
   722                           	callstack 0
   723   000044                     	ds	1
   724   000045                     _Columns:
   725                           	callstack 0
   726   000045                     	ds	1
   727   000046                     _Rows:
   728                           	callstack 0
   729   000046                     	ds	1
   730   000047                     _y:
   731                           	callstack 0
   732   000047                     	ds	1
   733   000048                     _x:
   734                           	callstack 0
   735   000048                     	ds	1
   736   000049                     _hasMoved:
   737                           	callstack 0
   738   000049                     	ds	1
   739   00004A                     _direction:
   740                           	callstack 0
   741   00004A                     	ds	1
   742   00004B                     _state:
   743                           	callstack 0
   744   00004B                     	ds	1
   745   00004C                     _SMSTimer:
   746                           	callstack 0
   747   00004C                     	ds	1
   748   00004D                     _debouncerTimer:
   749                           	callstack 0
   750   00004D                     	ds	1
   751   00004E                     _sysTmr:
   752                           	callstack 0
   753   00004E                     	ds	1
   754   00004F                     _songTime:
   755                           	callstack 0
   756   00004F                     	ds	1
   757   000050                     _pTime:
   758                           	callstack 0
   759   000050                     	ds	1
   760   000051                     _songTimer:
   761                           	callstack 0
   762   000051                     	ds	1
   763   000052                     _timer:
   764                           	callstack 0
   765   000052                     	ds	1
   766                           
   767                           	psect	dataCOMRAM
   768   000075                     __pdataCOMRAM:
   769                           	callstack 0
   770   000075                     _MUSICPERIODS:
   771                           	callstack 0
   772   000075                     	ds	8
   773                           
   774                           	psect	bssBANK0
   775   0000DC                     __pbssBANK0:
   776                           	callstack 0
   777   0000DC                     _timestamp:
   778                           	callstack 0
   779   0000DC                     	ds	18
   780                           
   781                           	psect	dataBANK0
   782   000080                     __pdataBANK0:
   783                           	callstack 0
   784   000080                     _MUSICDELAY:
   785                           	callstack 0
   786   000080                     	ds	16
   787   000090                     _CURRENTTIME:
   788                           	callstack 0
   789   000090                     	ds	14
   790   00009E                     _STARTRECORDING:
   791                           	callstack 0
   792   00009E                     	ds	14
   793   0000AC                     _MODIFYTIME:
   794                           	callstack 0
   795   0000AC                     	ds	13
   796   0000B9                     _PLAYRECORDINGS:
   797                           	callstack 0
   798   0000B9                     	ds	12
   799   0000C5                     _PORTNAMEMENU:
   800                           	callstack 0
   801   0000C5                     	ds	12
   802   0000D1                     _ENDCOMMUNICATION:
   803                           	callstack 0
   804   0000D1                     	ds	11
   805                           
   806                           	psect	bssBANK1
   807   000100                     __pbssBANK1:
   808                           	callstack 0
   809   000100                     _Timers:
   810                           	callstack 0
   811   000100                     	ds	75
   812                           
   813                           	psect	dataBANK1
   814   00014B                     __pdataBANK1:
   815                           	callstack 0
   816   00014B                     _ERRORMESSAGES:
   817                           	callstack 0
   818   00014B                     	ds	20
   819                           
   820                           	psect	cstackCOMRAM
   821   000053                     __pcstackCOMRAM:
   822                           	callstack 0
   823   000053                     ??_joystickLoop:
   824   000053                     ??_EscriuPrimeraOrdre:
   825   000053                     ??_CantaPartAlta:
   826   000053                     ??_CantaPartBaixa:
   827   000053                     ?_getSysTimestamp:
   828                           	callstack 0
   829   000053                     ?_getColumn:
   830                           	callstack 0
   831   000053                     ?___awmod:
   832                           	callstack 0
   833   000053                     ?_TI_GetTics:
   834                           	callstack 0
   835   000053                     _getJoystickDown$267:
   836                           	callstack 0
   837   000053                     _getJoystickUp$269:
   838                           	callstack 0
   839   000053                     TI_Init@counter:
   840                           	callstack 0
   841   000053                     TI_ResetTics@TimerHandle:
   842                           	callstack 0
   843   000053                     goToWaitState@stg:
   844                           	callstack 0
   845   000053                     displayTimestamp@i:
   846                           	callstack 0
   847   000053                     _isPressed$1194:
   848                           	callstack 0
   849   000053                     setTX@letter:
   850                           	callstack 0
   851   000053                     saveData@data:
   852                           	callstack 0
   853   000053                     readData@address:
   854                           	callstack 0
   855   000053                     displayRecordings@indexPosition:
   856                           	callstack 0
   857   000053                     sendIndex@indexPosition:
   858                           	callstack 0
   859   000053                     ___lbdiv@divisor:
   860                           	callstack 0
   861   000053                     ___lbmod@divisor:
   862                           	callstack 0
   863   000053                     TI_NewTimer@TimerHandle:
   864                           	callstack 0
   865   000053                     _getNumRecordings$1580:
   866                           	callstack 0
   867   000053                     ___awmod@dividend:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0x0
   871   000053                     	ds	1
   872   000054                     CantaPartAlta@c:
   873                           	callstack 0
   874   000054                     CantaPartBaixa@c:
   875                           	callstack 0
   876   000054                     EscriuPrimeraOrdre@ordre:
   877                           	callstack 0
   878   000054                     playMusic@aux:
   879                           	callstack 0
   880   000054                     saveData@address:
   881                           	callstack 0
   882   000054                     ___lbdiv@dividend:
   883                           	callstack 0
   884   000054                     ___lbmod@dividend:
   885                           	callstack 0
   886   000054                     updateSysTimestamp@time:
   887                           	callstack 0
   888                           
   889                           ; 2 bytes @ 0x1
   890   000054                     	ds	1
   891   000055                     ??_getDigitValue:
   892   000055                     _joystickLoop$265:
   893                           	callstack 0
   894   000055                     CantaIR@IR:
   895                           	callstack 0
   896   000055                     CantaData@Data:
   897                           	callstack 0
   898   000055                     ___lbdiv@counter:
   899                           	callstack 0
   900   000055                     ___lbmod@counter:
   901                           	callstack 0
   902   000055                     ___awmod@divisor:
   903                           	callstack 0
   904                           
   905                           ; 2 bytes @ 0x2
   906   000055                     	ds	1
   907   000056                     ??_getCharacter:
   908   000056                     TI_NewTimer@Counter:
   909                           	callstack 0
   910   000056                     updateSysTimestamp@i:
   911                           	callstack 0
   912   000056                     ___lbdiv@quotient:
   913                           	callstack 0
   914   000056                     ___lbmod@rem:
   915                           	callstack 0
   916                           
   917                           ; 1 bytes @ 0x3
   918   000056                     	ds	1
   919   000057                     ??_TI_GetTics:
   920   000057                     ___awmod@counter:
   921                           	callstack 0
   922                           
   923                           ; 1 bytes @ 0x4
   924   000057                     	ds	1
   925   000058                     getCharacter@digit:
   926                           	callstack 0
   927   000058                     ___awmod@sign:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x5
   931   000058                     	ds	3
   932   00005B                     TI_GetTics@CopyCurrentTics:
   933                           	callstack 0
   934                           
   935                           ; 4 bytes @ 0x8
   936   00005B                     	ds	4
   937   00005F                     TI_GetTics@TimerHandle:
   938                           	callstack 0
   939                           
   940                           ; 1 bytes @ 0xC
   941   00005F                     	ds	1
   942   000060                     ??_audioLoop:
   943   000060                     ??_keypadLoop:
   944   000060                     ??_smsLoop:
   945   000060                     WaitForBusy@Busy:
   946                           	callstack 0
   947   000060                     Espera@Timer:
   948                           	callstack 0
   949                           
   950                           ; 2 bytes @ 0xD
   951   000060                     	ds	1
   952   000061                     LcGotoXY@Row:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0xE
   956   000061                     	ds	1
   957   000062                     ??_LcGotoXY:
   958   000062                     Espera@ms:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0xF
   962   000062                     	ds	2
   963   000064                     ??_Espera:
   964   000064                     _LcGotoXY$556:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x11
   968   000064                     	ds	2
   969   000066                     LcGotoXY@Fisics:
   970                           	callstack 0
   971                           
   972                           ; 2 bytes @ 0x13
   973   000066                     	ds	2
   974   000068                     LcInit@columns:
   975                           	callstack 0
   976   000068                     LcGotoXY@Column:
   977                           	callstack 0
   978   000068                     resetDisplay@stg:
   979                           	callstack 0
   980                           
   981                           ; 1 bytes @ 0x15
   982   000068                     	ds	1
   983   000069                     LcInit@rows:
   984                           	callstack 0
   985   000069                     LcPutChar@c:
   986                           	callstack 0
   987                           
   988                           ; 1 bytes @ 0x16
   989   000069                     	ds	1
   990   00006A                     ??_sysTimerLoop:
   991   00006A                     ??_memoryLoop:
   992   00006A                     displayMenu@string:
   993                           	callstack 0
   994   00006A                     LcInit@i:
   995                           	callstack 0
   996   00006A                     lcdAddString@string:
   997                           	callstack 0
   998                           
   999                           ; 2 bytes @ 0x17
  1000   00006A                     	ds	1
  1001   00006B                     ??_displayMenu:
  1002                           
  1003                           ; 1 bytes @ 0x18
  1004   00006B                     	ds	1
  1005   00006C                     _memoryLoop$1563:
  1006                           	callstack 0
  1007                           
  1008                           ; 2 bytes @ 0x19
  1009   00006C                     	ds	1
  1010   00006D                     ??_menuLoop:
  1011                           
  1012                           ; 1 bytes @ 0x1A
  1013   00006D                     	ds	1
  1014   00006E                     _memoryLoop$1564:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x1B
  1018   00006E                     	ds	2
  1019   000070                     _memoryLoop$1566:
  1020                           	callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x1D
  1023   000070                     	ds	3
  1024   000073                     _menuLoop$799:
  1025                           	callstack 0
  1026                           
  1027                           ; 2 bytes @ 0x20
  1028   000073                     	ds	2
  1029   000075                     
  1030                           ; 1 bytes @ 0x22
  1031 ;;
  1032 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1033 ;;
  1034 ;; *************** function _main *****************
  1035 ;; Defined at:
  1036 ;;		line 28 in file "MAIN.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1
  1050 ;;      Params:         0       0       0
  1051 ;;      Locals:         0       0       0
  1052 ;;      Temps:          0       0       0
  1053 ;;      Totals:         0       0       0
  1054 ;;Total ram usage:        0 bytes
  1055 ;; Hardware stack levels required when called: 8
  1056 ;; This function calls:
  1057 ;;		_LcInit
  1058 ;;		_TI_Init
  1059 ;;		_audioLoop
  1060 ;;		_initAudio
  1061 ;;		_initJoystick
  1062 ;;		_initKeypad
  1063 ;;		_initMenu
  1064 ;;		_initSIO
  1065 ;;		_initSysTimer
  1066 ;;		_joystickLoop
  1067 ;;		_keypadLoop
  1068 ;;		_memoryLoop
  1069 ;;		_menuLoop
  1070 ;;		_smsLoop
  1071 ;;		_sysTimerLoop
  1072 ;; This function is called by:
  1073 ;;		Startup code after reset
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text0
  1078   001AA2                     __ptext0:
  1079                           	callstack 0
  1080   001AA2                     _main:
  1081                           	callstack 23
  1082                           
  1083                           ;incstack = 0
  1084   001AA2  8A92               	bsf	146,5,c	;volatile
  1085   001AA4  ECFF  F00D         	call	_TI_Init	;wreg free
  1086   001AA8  ECD8  F00E         	call	_initJoystick	;wreg free
  1087   001AAC  EC93  F00E         	call	_initKeypad	;wreg free
  1088   001AB0  0E10               	movlw	16
  1089   001AB2  6E68               	movwf	LcInit@columns^0,c
  1090   001AB4  0E02               	movlw	2
  1091   001AB6  EC0B  F009         	call	_LcInit
  1092   001ABA  EC5F  F00F         	call	_initAudio	;wreg free
  1093   001ABE  EC82  F00F         	call	_initMenu	;wreg free
  1094   001AC2  EC2E  F00F         	call	_initSysTimer	;wreg free
  1095   001AC6  EC06  F00F         	call	_initSIO	;wreg free
  1096   001ACA                     l5508:
  1097   001ACA  ECA0  F00A         	call	_audioLoop	;wreg free
  1098   001ACE  ECEF  F009         	call	_joystickLoop	;wreg free
  1099   001AD2  ECDF  F007         	call	_keypadLoop	;wreg free
  1100   001AD6  EC3C  F00B         	call	_smsLoop	;wreg free
  1101   001ADA  EC87  F008         	call	_sysTimerLoop	;wreg free
  1102   001ADE  EC9F  F005         	call	_memoryLoop	;wreg free
  1103   001AE2  EC67  F001         	call	_menuLoop	;wreg free
  1104   001AE6  D7F1               	goto	l5508
  1105   001AE8                     __end_of_main:
  1106                           	callstack 0
  1107                           
  1108 ;; *************** function _sysTimerLoop *****************
  1109 ;; Defined at:
  1110 ;;		line 19 in file "SystemTimer.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1
  1124 ;;      Params:         0       0       0
  1125 ;;      Locals:         0       0       0
  1126 ;;      Temps:          2       0       0
  1127 ;;      Totals:         2       0       0
  1128 ;;Total ram usage:        2 bytes
  1129 ;; Hardware stack levels used: 1
  1130 ;; Hardware stack levels required when called: 6
  1131 ;; This function calls:
  1132 ;;		_LcPutChar
  1133 ;;		_TI_GetTics
  1134 ;;		_TI_ResetTics
  1135 ;;		___lbdiv
  1136 ;;		___lbmod
  1137 ;;		_incrementSysTimestamp
  1138 ;; This function is called by:
  1139 ;;		_main
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text1
  1144   00110E                     __ptext1:
  1145                           	callstack 0
  1146   00110E                     _sysTimerLoop:
  1147                           	callstack 24
  1148                           
  1149                           ;SystemTimer.c: 20:     switch(state){
  1150                           
  1151                           ;incstack = 0
  1152   00110E  D062               	goto	l4154
  1153   001110                     l4122:
  1154                           
  1155                           ;SystemTimer.c: 22:             if(TI_GetTics(sysTmr) >= 4000){
  1156   001110  504E               	movf	_sysTmr^0,w,c
  1157   001112  EC05  F00D         	call	_TI_GetTics
  1158   001116  5056               	movf	(?_TI_GetTics+3)^0,w,c
  1159   001118  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  1160   00111A  E106               	bnz	u3470
  1161   00111C  0EA0               	movlw	160
  1162   00111E  5C53               	subwf	?_TI_GetTics^0,w,c
  1163   001120  0E0F               	movlw	15
  1164   001122  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  1165   001124  A0D8               	btfss	status,0,c
  1166   001126  0012               	return	
  1167   001128                     u3470:
  1168                           
  1169                           ;SystemTimer.c: 23:                 TI_ResetTics(sysTmr);
  1170   001128  504E               	movf	_sysTmr^0,w,c
  1171   00112A  EC59  F00E         	call	_TI_ResetTics
  1172                           
  1173                           ;SystemTimer.c: 24:                 incrementSysTimestamp();
  1174   00112E  EC77  F00F         	call	_incrementSysTimestamp	;wreg free
  1175   001132  0012               	return	
  1176   001134                     l4128:
  1177                           
  1178                           ;SystemTimer.c: 28:             state = 9;
  1179   001134  0E09               	movlw	9
  1180   001136  6E37               	movwf	_state@SystemTimer$F935^0,c
  1181                           
  1182                           ;SystemTimer.c: 29:             break;
  1183   001138  0012               	return	
  1184   00113A                     l4130:
  1185                           
  1186                           ;SystemTimer.c: 31:             state = 10;
  1187   00113A  0E0A               	movlw	10
  1188   00113C  6E37               	movwf	_state@SystemTimer$F935^0,c
  1189                           
  1190                           ;SystemTimer.c: 32:             break;
  1191   00113E  0012               	return	
  1192   001140                     l4132:
  1193                           
  1194                           ;SystemTimer.c: 34:             LcPutChar((timestamp[index].minutes/10) + '0');
  1195   001140  0E0A               	movlw	10
  1196   001142  6E53               	movwf	___lbdiv@divisor^0,c
  1197   001144  5036               	movf	_index@SystemTimer$F936^0,w,c
  1198   001146  0D02               	mullw	2
  1199   001148  50F3               	movf	243,w,c
  1200   00114A  0FDC               	addlw	low _timestamp
  1201   00114C  6ED9               	movwf	fsr2l,c
  1202   00114E  6ADA               	clrf	fsr2h,c
  1203   001150  50DF               	movf	indf2,w,c
  1204   001152  EC96  F00D         	call	___lbdiv
  1205   001156  0F30               	addlw	48
  1206   001158  EC83  F00B         	call	_LcPutChar
  1207                           
  1208                           ;SystemTimer.c: 35:             state = 11;
  1209   00115C  0E0B               	movlw	11
  1210   00115E  6E37               	movwf	_state@SystemTimer$F935^0,c
  1211                           
  1212                           ;SystemTimer.c: 36:             break;
  1213   001160  0012               	return	
  1214   001162                     l4136:
  1215                           
  1216                           ;SystemTimer.c: 39:             LcPutChar((timestamp[index].minutes%10) + '0');
  1217   001162  0E0A               	movlw	10
  1218   001164  6E53               	movwf	___lbmod@divisor^0,c
  1219   001166  5036               	movf	_index@SystemTimer$F936^0,w,c
  1220   001168  0D02               	mullw	2
  1221   00116A  50F3               	movf	243,w,c
  1222   00116C  0FDC               	addlw	low _timestamp
  1223   00116E  6ED9               	movwf	fsr2l,c
  1224   001170  6ADA               	clrf	fsr2h,c
  1225   001172  50DF               	movf	indf2,w,c
  1226   001174  EC44  F00E         	call	___lbmod
  1227   001178  0F30               	addlw	48
  1228   00117A  EC83  F00B         	call	_LcPutChar
  1229                           
  1230                           ;SystemTimer.c: 40:             state = 12;
  1231   00117E  0E0C               	movlw	12
  1232   001180  6E37               	movwf	_state@SystemTimer$F935^0,c
  1233                           
  1234                           ;SystemTimer.c: 41:             break;
  1235   001182  0012               	return	
  1236   001184                     l4140:
  1237                           
  1238                           ;SystemTimer.c: 43:             LcPutChar(':');
  1239   001184  0E3A               	movlw	58
  1240   001186  EC83  F00B         	call	_LcPutChar
  1241                           
  1242                           ;SystemTimer.c: 44:             state = 13;
  1243   00118A  0E0D               	movlw	13
  1244   00118C  6E37               	movwf	_state@SystemTimer$F935^0,c
  1245                           
  1246                           ;SystemTimer.c: 45:             break;
  1247   00118E  0012               	return	
  1248   001190                     l4144:
  1249                           
  1250                           ;SystemTimer.c: 47:             LcPutChar((timestamp[index].seconds/10) + '0');
  1251   001190  0E0A               	movlw	10
  1252   001192  6E53               	movwf	___lbdiv@divisor^0,c
  1253   001194  5036               	movf	_index@SystemTimer$F936^0,w,c
  1254   001196  0D02               	mullw	2
  1255   001198  50F3               	movf	243,w,c
  1256   00119A  0FDD               	addlw	low (_timestamp+1)
  1257   00119C  6ED9               	movwf	fsr2l,c
  1258   00119E  6ADA               	clrf	fsr2h,c
  1259   0011A0  50DF               	movf	indf2,w,c
  1260   0011A2  EC96  F00D         	call	___lbdiv
  1261   0011A6  0F30               	addlw	48
  1262   0011A8  EC83  F00B         	call	_LcPutChar
  1263                           
  1264                           ;SystemTimer.c: 48:             state = 14;
  1265   0011AC  0E0E               	movlw	14
  1266   0011AE  6E37               	movwf	_state@SystemTimer$F935^0,c
  1267                           
  1268                           ;SystemTimer.c: 49:             break;
  1269   0011B0  0012               	return	
  1270   0011B2                     l4148:
  1271                           
  1272                           ;SystemTimer.c: 51:             LcPutChar((timestamp[index].seconds%10) + '0');
  1273   0011B2  0E0A               	movlw	10
  1274   0011B4  6E53               	movwf	___lbmod@divisor^0,c
  1275   0011B6  5036               	movf	_index@SystemTimer$F936^0,w,c
  1276   0011B8  0D02               	mullw	2
  1277   0011BA  50F3               	movf	243,w,c
  1278   0011BC  0FDD               	addlw	low (_timestamp+1)
  1279   0011BE  6ED9               	movwf	fsr2l,c
  1280   0011C0  6ADA               	clrf	fsr2h,c
  1281   0011C2  50DF               	movf	indf2,w,c
  1282   0011C4  EC44  F00E         	call	___lbmod
  1283   0011C8  0F30               	addlw	48
  1284   0011CA  EC83  F00B         	call	_LcPutChar
  1285                           
  1286                           ;SystemTimer.c: 52:             state = 0;
  1287   0011CE  0E00               	movlw	0
  1288   0011D0  6E37               	movwf	_state@SystemTimer$F935^0,c
  1289                           
  1290                           ;SystemTimer.c: 53:             break;
  1291   0011D2  0012               	return	
  1292   0011D4                     l4154:
  1293   0011D4  5037               	movf	_state@SystemTimer$F935^0,w,c
  1294   0011D6  6E6A               	movwf	??_sysTimerLoop^0,c
  1295   0011D8  6A6B               	clrf	(??_sysTimerLoop+1)^0,c
  1296                           
  1297                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1298                           ; Switch size 1, requested type "simple"
  1299                           ; Number of cases is 1, Range of values is 0 to 0
  1300                           ; switch strategies available:
  1301                           ; Name         Instructions Cycles
  1302                           ; simple_byte            4     3 (average)
  1303                           ;	Chosen strategy is simple_byte
  1304   0011DA  506B               	movf	(??_sysTimerLoop+1)^0,w,c
  1305   0011DC  0A00               	xorlw	0	; case 0
  1306   0011DE  A4D8               	btfss	status,2,c
  1307   0011E0  0012               	return	
  1308                           
  1309                           ; Switch size 1, requested type "simple"
  1310                           ; Number of cases is 8, Range of values is 0 to 14
  1311                           ; switch strategies available:
  1312                           ; Name         Instructions Cycles
  1313                           ; simple_byte           25    13 (average)
  1314                           ;	Chosen strategy is simple_byte
  1315   0011E2  506A               	movf	??_sysTimerLoop^0,w,c
  1316   0011E4  0A00               	xorlw	0	; case 0
  1317   0011E6  B4D8               	btfsc	status,2,c
  1318   0011E8  D793               	goto	l4122
  1319   0011EA  0A08               	xorlw	8	; case 8
  1320   0011EC  B4D8               	btfsc	status,2,c
  1321   0011EE  D7A2               	goto	l4128
  1322   0011F0  0A01               	xorlw	1	; case 9
  1323   0011F2  B4D8               	btfsc	status,2,c
  1324   0011F4  D7A2               	goto	l4130
  1325   0011F6  0A03               	xorlw	3	; case 10
  1326   0011F8  B4D8               	btfsc	status,2,c
  1327   0011FA  D7A2               	goto	l4132
  1328   0011FC  0A01               	xorlw	1	; case 11
  1329   0011FE  B4D8               	btfsc	status,2,c
  1330   001200  D7B0               	goto	l4136
  1331   001202  0A07               	xorlw	7	; case 12
  1332   001204  B4D8               	btfsc	status,2,c
  1333   001206  D7BE               	goto	l4140
  1334   001208  0A01               	xorlw	1	; case 13
  1335   00120A  B4D8               	btfsc	status,2,c
  1336   00120C  D7C1               	goto	l4144
  1337   00120E  0A03               	xorlw	3	; case 14
  1338   001210  A4D8               	btfss	status,2,c
  1339   001212  0012               	return	
  1340   001214  D7CE               	goto	l4148
  1341   001216                     __end_of_sysTimerLoop:
  1342                           	callstack 0
  1343                           
  1344 ;; *************** function _incrementSysTimestamp *****************
  1345 ;; Defined at:
  1346 ;;		line 66 in file "SystemTimer.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 3F/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1
  1360 ;;      Params:         0       0       0
  1361 ;;      Locals:         0       0       0
  1362 ;;      Temps:          0       0       0
  1363 ;;      Totals:         0       0       0
  1364 ;;Total ram usage:        0 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 2
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_sysTimerLoop
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text2
  1375   001EEE                     __ptext2:
  1376                           	callstack 0
  1377   001EEE                     _incrementSysTimestamp:
  1378                           	callstack 27
  1379                           
  1380                           ;SystemTimer.c: 67:     if(timestamp[0].seconds == 59){
  1381                           
  1382                           ;incstack = 0
  1383   001EEE  0E3B               	movlw	59
  1384   001EF0  0100               	movlb	0	; () banked
  1385   001EF2  19DD               	xorwf	(_timestamp+1)& (0+255),w,b
  1386   001EF4  A4D8               	btfss	status,2,c
  1387   001EF6  D004               	goto	l3708
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;SystemTimer.c: 68:         timestamp[0].seconds = 0;
  1391   001EF8  0E00               	movlw	0
  1392   001EFA  6FDD               	movwf	(_timestamp+1)& (0+255),b
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;SystemTimer.c: 69:         timestamp[0].minutes++;
  1396   001EFC  2BDC               	incf	_timestamp& (0+255),f,b
  1397                           
  1398                           ;SystemTimer.c: 70:     }else{
  1399   001EFE  0012               	return	
  1400   001F00                     l3708:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;SystemTimer.c: 71:         timestamp[0].seconds++;
  1404   001F00  2BDD               	incf	(_timestamp+1)& (0+255),f,b
  1405                           
  1406                           ; BSR set to: 0
  1407   001F02  0012               	return		;funcret
  1408   001F04                     __end_of_incrementSysTimestamp:
  1409                           	callstack 0
  1410                           
  1411 ;; *************** function _smsLoop *****************
  1412 ;; Defined at:
  1413 ;;		line 127 in file "Keypad.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1
  1427 ;;      Params:         0       0       0
  1428 ;;      Locals:         0       0       0
  1429 ;;      Temps:          2       0       0
  1430 ;;      Totals:         2       0       0
  1431 ;;Total ram usage:        2 bytes
  1432 ;; Hardware stack levels used: 1
  1433 ;; Hardware stack levels required when called: 4
  1434 ;; This function calls:
  1435 ;;		_TI_GetTics
  1436 ;;		_TI_ResetTics
  1437 ;;		_getDigitValue
  1438 ;; This function is called by:
  1439 ;;		_main
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text3
  1444   001678                     __ptext3:
  1445                           	callstack 0
  1446   001678                     _smsLoop:
  1447                           	callstack 26
  1448                           
  1449                           ;Keypad.c: 128:     switch(stateSMS){
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;incstack = 0
  1453   001678  D034               	goto	l4114
  1454   00167A                     l4084:
  1455                           
  1456                           ;Keypad.c: 133:             if(keyPressed){
  1457   00167A  5030               	movf	_keyPressed^0,w,c
  1458   00167C  B4D8               	btfsc	status,2,c
  1459   00167E  D021               	goto	l747
  1460                           
  1461                           ;Keypad.c: 134:                 stateSMS=1;
  1462   001680  0E01               	movlw	1
  1463   001682  6E33               	movwf	_stateSMS^0,c
  1464                           
  1465                           ;Keypad.c: 135:                 currentKey = getDigitValue();
  1466   001684  ECF7  F00E         	call	_getDigitValue	;wreg free
  1467   001688  6E32               	movwf	_currentKey^0,c
  1468                           
  1469                           ;Keypad.c: 136:                 nextKey = 1;
  1470   00168A  0E01               	movlw	1
  1471   00168C  6E35               	movwf	_nextKey^0,c
  1472                           
  1473                           ;Keypad.c: 137:                 if(numPressed != 0 && (previousKey != currentKey || TI_G
      +                          etTics(SMSTimer) >= 4000)){
  1474   00168E  502F               	movf	_numPressed^0,w,c
  1475   001690  B4D8               	btfsc	status,2,c
  1476   001692  0012               	return	
  1477   001694  5032               	movf	_currentKey^0,w,c
  1478   001696  1831               	xorwf	_previousKey^0,w,c
  1479   001698  A4D8               	btfss	status,2,c
  1480   00169A  D00C               	goto	u3450
  1481   00169C  504C               	movf	_SMSTimer^0,w,c
  1482   00169E  EC05  F00D         	call	_TI_GetTics
  1483   0016A2  5056               	movf	(?_TI_GetTics+3)^0,w,c
  1484   0016A4  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  1485   0016A6  E106               	bnz	u3450
  1486   0016A8  0EA0               	movlw	160
  1487   0016AA  5C53               	subwf	?_TI_GetTics^0,w,c
  1488   0016AC  0E0F               	movlw	15
  1489   0016AE  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  1490   0016B0  A0D8               	btfss	status,0,c
  1491   0016B2  0012               	return	
  1492   0016B4                     u3450:
  1493                           
  1494                           ;Keypad.c: 138:                     nextKey = 0;
  1495   0016B4  0E00               	movlw	0
  1496   0016B6  6E35               	movwf	_nextKey^0,c
  1497                           
  1498                           ;Keypad.c: 139:                     previousKey = currentKey;
  1499   0016B8  C032  F031         	movff	_currentKey,_previousKey
  1500                           
  1501                           ;Keypad.c: 140:                     numPressed = 0;
  1502   0016BC  0E00               	movlw	0
  1503   0016BE  6E2F               	movwf	_numPressed^0,c
  1504   0016C0  0012               	return	
  1505   0016C2                     l747:
  1506                           
  1507                           ;Keypad.c: 144:               previousKey=currentKey;
  1508   0016C2  C032  F031         	movff	_currentKey,_previousKey
  1509   0016C6  0012               	return	
  1510   0016C8                     l4102:
  1511                           
  1512                           ;Keypad.c: 149:             numPressed++;
  1513   0016C8  2A2F               	incf	_numPressed^0,f,c
  1514                           
  1515                           ;Keypad.c: 150:             stateSMS = 2;
  1516   0016CA  0E02               	movlw	2
  1517   0016CC  6E33               	movwf	_stateSMS^0,c
  1518                           
  1519                           ;Keypad.c: 151:             break;
  1520   0016CE  0012               	return	
  1521   0016D0                     l4106:
  1522                           
  1523                           ;Keypad.c: 154:             if (!keyPressed){
  1524   0016D0  5030               	movf	_keyPressed^0,w,c
  1525   0016D2  A4D8               	btfss	status,2,c
  1526   0016D4  0012               	return	
  1527                           
  1528                           ;Keypad.c: 155:                 TI_ResetTics(SMSTimer);
  1529   0016D6  504C               	movf	_SMSTimer^0,w,c
  1530   0016D8  EC59  F00E         	call	_TI_ResetTics
  1531                           
  1532                           ;Keypad.c: 157:                 stateSMS = 0;
  1533   0016DC  0E00               	movlw	0
  1534   0016DE  6E33               	movwf	_stateSMS^0,c
  1535   0016E0  0012               	return	
  1536   0016E2                     l4114:
  1537   0016E2  5033               	movf	_stateSMS^0,w,c
  1538   0016E4  6E60               	movwf	??_smsLoop^0,c
  1539   0016E6  6A61               	clrf	(??_smsLoop+1)^0,c
  1540                           
  1541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1542                           ; Switch size 1, requested type "simple"
  1543                           ; Number of cases is 1, Range of values is 0 to 0
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte            4     3 (average)
  1547                           ;	Chosen strategy is simple_byte
  1548   0016E8  5061               	movf	(??_smsLoop+1)^0,w,c
  1549   0016EA  0A00               	xorlw	0	; case 0
  1550   0016EC  A4D8               	btfss	status,2,c
  1551   0016EE  0012               	return	
  1552                           
  1553                           ; Switch size 1, requested type "simple"
  1554                           ; Number of cases is 3, Range of values is 0 to 2
  1555                           ; switch strategies available:
  1556                           ; Name         Instructions Cycles
  1557                           ; simple_byte           10     6 (average)
  1558                           ;	Chosen strategy is simple_byte
  1559   0016F0  5060               	movf	??_smsLoop^0,w,c
  1560   0016F2  0A00               	xorlw	0	; case 0
  1561   0016F4  B4D8               	btfsc	status,2,c
  1562   0016F6  D7C1               	goto	l4084
  1563   0016F8  0A01               	xorlw	1	; case 1
  1564   0016FA  B4D8               	btfsc	status,2,c
  1565   0016FC  D7E5               	goto	l4102
  1566   0016FE  0A03               	xorlw	3	; case 2
  1567   001700  A4D8               	btfss	status,2,c
  1568   001702  0012               	return	
  1569   001704  D7E5               	goto	l4106
  1570   001706                     __end_of_smsLoop:
  1571                           	callstack 0
  1572                           
  1573 ;; *************** function _menuLoop *****************
  1574 ;; Defined at:
  1575 ;;		line 45 in file "Menu.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1
  1589 ;;      Params:         0       0       0
  1590 ;;      Locals:         2       0       0
  1591 ;;      Temps:          6       0       0
  1592 ;;      Totals:         8       0       0
  1593 ;;Total ram usage:        8 bytes
  1594 ;; Hardware stack levels used: 1
  1595 ;; Hardware stack levels required when called: 7
  1596 ;; This function calls:
  1597 ;;		_LcCursorOff
  1598 ;;		_LcCursorOn
  1599 ;;		_LcGotoXY
  1600 ;;		_LcPutChar
  1601 ;;		_TI_GetTics
  1602 ;;		_TI_ResetTics
  1603 ;;		___awmod
  1604 ;;		_chargeMemory
  1605 ;;		_checkRX
  1606 ;;		_checkTX
  1607 ;;		_displayMenu
  1608 ;;		_displayRecordings
  1609 ;;		_displayTimestamp
  1610 ;;		_getCharacter
  1611 ;;		_getColumnAct
  1612 ;;		_getDigitValue
  1613 ;;		_getJoystickDown
  1614 ;;		_getJoystickUp
  1615 ;;		_getNumRecordings
  1616 ;;		_getRX
  1617 ;;		_goToWaitState
  1618 ;;		_isIdle
  1619 ;;		_isNextKey
  1620 ;;		_isPressed
  1621 ;;		_joystickAlive
  1622 ;;		_joystickIdle
  1623 ;;		_lcdAddString
  1624 ;;		_playMusic
  1625 ;;		_refreshDisplay
  1626 ;;		_resetDisplay
  1627 ;;		_saveIndex
  1628 ;;		_sendIndex
  1629 ;;		_sendTimestamp
  1630 ;;		_setTX
  1631 ;;		_stopMusic
  1632 ;;		_updateSysTimestamp
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text4
  1639   0002CE                     __ptext4:
  1640                           	callstack 0
  1641   0002CE                     _menuLoop:
  1642                           	callstack 23
  1643                           
  1644                           ;Menu.c: 46:     switch (state){
  1645                           
  1646                           ;incstack = 0
  1647   0002CE  D3A4               	goto	l5486
  1648   0002D0                     l5018:
  1649                           
  1650                           ;Menu.c: 48:             resetDisplay(1);
  1651   0002D0  0E01               	movlw	1
  1652   0002D2  ECE8  F00E         	call	_resetDisplay
  1653                           
  1654                           ;Menu.c: 49:             skipState = 0;
  1655   0002D6  0E00               	movlw	0
  1656   0002D8  6E3E               	movwf	_skipState^0,c
  1657                           
  1658                           ;Menu.c: 50:             index = 0;
  1659   0002DA  0E00               	movlw	0
  1660   0002DC  6E3F               	movwf	_index^0,c
  1661                           
  1662                           ;Menu.c: 51:             timeValue.minutes = 0;
  1663   0002DE  0E00               	movlw	0
  1664   0002E0  6E27               	movwf	_timeValue^0,c
  1665                           
  1666                           ;Menu.c: 52:             timeValue.seconds = 0;
  1667   0002E2  0E00               	movlw	0
  1668   0002E4  6E28               	movwf	(_timeValue+1)^0,c
  1669                           
  1670                           ;Menu.c: 53:             displayPos = 0;
  1671   0002E6  0E00               	movlw	0
  1672   0002E8  6E40               	movwf	_displayPos^0,c
  1673                           
  1674                           ;Menu.c: 54:             tmpPortChar = 0;
  1675   0002EA  0E00               	movlw	0
  1676   0002EC  6E3C               	movwf	_tmpPortChar^0,c
  1677                           
  1678                           ;Menu.c: 55:             LcCursorOn();
  1679   0002EE  ECEA  F00F         	call	_LcCursorOn	;wreg free
  1680                           
  1681                           ;Menu.c: 56:             break;
  1682   0002F2  0012               	return	
  1683   0002F4                     l5032:
  1684                           
  1685                           ;Menu.c: 58:             if(waitState == 30){
  1686   0002F4  0E1E               	movlw	30
  1687   0002F6  183B               	xorwf	_waitState^0,w,c
  1688   0002F8  A4D8               	btfss	status,2,c
  1689   0002FA  D003               	goto	l5036
  1690                           
  1691                           ;Menu.c: 59:                 state = stateToGo;
  1692   0002FC  C03A  F03D         	movff	_stateToGo,_state@Menu$F788
  1693                           
  1694                           ;Menu.c: 60:             }else{
  1695   000300  0012               	return	
  1696   000302                     l5036:
  1697                           
  1698                           ;Menu.c: 61:                 waitState++;
  1699   000302  2A3B               	incf	_waitState^0,f,c
  1700                           
  1701                           ;Menu.c: 63:             break;
  1702                           
  1703                           ;Menu.c: 62:             }
  1704   000304  0012               	return	
  1705   000306                     l5038:
  1706                           
  1707                           ;Menu.c: 66:             lcdAddString(&PORTNAMEMENU);
  1708   000306  0EC5               	movlw	low _PORTNAMEMENU
  1709   000308  6E6A               	movwf	lcdAddString@string^0,c
  1710   00030A  6A6B               	clrf	(lcdAddString@string+1)^0,c
  1711   00030C  EC17  F00E         	call	_lcdAddString	;wreg free
  1712                           
  1713                           ;Menu.c: 67:             goToWaitState(1);
  1714   000310  0E01               	movlw	1
  1715   000312  ECA0  F00F         	call	_goToWaitState
  1716                           
  1717                           ;Menu.c: 68:             if(rowIndex ==1 ){
  1718   000316  0442               	decf	_rowIndex^0,w,c
  1719   000318  A4D8               	btfss	status,2,c
  1720   00031A  0012               	return	
  1721                           
  1722                           ;Menu.c: 69:                 state = 2;
  1723   00031C  0E02               	movlw	2
  1724   00031E  6E3D               	movwf	_state@Menu$F788^0,c
  1725   000320  0012               	return	
  1726   000322                     l5046:
  1727                           
  1728                           ;Menu.c: 73:             if (colIndex >= 3 ){
  1729   000322  0E02               	movlw	2
  1730   000324  6441               	cpfsgt	_colIndex^0,c
  1731   000326  D003               	goto	l5050
  1732   000328                     u4580:
  1733                           
  1734                           ;Menu.c: 74:                 state = 0;
  1735   000328  0E00               	movlw	0
  1736   00032A  6E3D               	movwf	_state@Menu$F788^0,c
  1737                           
  1738                           ;Menu.c: 75:             }else if (isPressed()){
  1739   00032C  0012               	return	
  1740   00032E                     l5050:
  1741   00032E  EC3B  F00F         	call	_isPressed	;wreg free
  1742   000332  0900               	iorlw	0
  1743   000334  B4D8               	btfsc	status,2,c
  1744   000336  0012               	return	
  1745                           
  1746                           ;Menu.c: 76:                 if(getDigitValue() == '*'){
  1747   000338  ECF7  F00E         	call	_getDigitValue	;wreg free
  1748   00033C  0A2A               	xorlw	42
  1749   00033E  B4D8               	btfsc	status,2,c
  1750   000340  D7F3               	goto	u4580
  1751   000342  ECF7  F00E         	call	_getDigitValue	;wreg free
  1752   000346  0A23               	xorlw	35
  1753   000348  A4D8               	btfss	status,2,c
  1754   00034A  D009               	goto	l5062
  1755   00034C  0E02               	movlw	2
  1756   00034E  1841               	xorwf	_colIndex^0,w,c
  1757   000350  A4D8               	btfss	status,2,c
  1758   000352  D005               	goto	l5062
  1759                           
  1760                           ;Menu.c: 79:                     tmpPortChar = 1;
  1761   000354  0E01               	movlw	1
  1762   000356  6E3C               	movwf	_tmpPortChar^0,c
  1763                           
  1764                           ;Menu.c: 80:                     state = 8;
  1765   000358  0E08               	movlw	8
  1766   00035A  6E3D               	movwf	_state@Menu$F788^0,c
  1767                           
  1768                           ;Menu.c: 81:                 }else if (getDigitValue() != '#'){
  1769   00035C  0012               	return	
  1770   00035E                     l5062:
  1771   00035E  ECF7  F00E         	call	_getDigitValue	;wreg free
  1772   000362  0A23               	xorlw	35
  1773   000364  B4D8               	btfsc	status,2,c
  1774   000366  0012               	return	
  1775                           
  1776                           ;Menu.c: 82:                     if (isNextKey() || skipState == 0){
  1777   000368  EC1C  F000         	call	_isNextKey	;wreg free
  1778   00036C  0900               	iorlw	0
  1779   00036E  A4D8               	btfss	status,2,c
  1780   000370  D003               	goto	u4650
  1781   000372  503E               	movf	_skipState^0,w,c
  1782   000374  A4D8               	btfss	status,2,c
  1783   000376  D006               	goto	l5072
  1784   000378                     u4650:
  1785                           
  1786                           ;Menu.c: 83:                         LcGotoXY(colIndex,rowIndex);
  1787   000378  C042  F061         	movff	_rowIndex,LcGotoXY@Row
  1788   00037C  5041               	movf	_colIndex^0,w,c
  1789   00037E  EC4B  F00A         	call	_LcGotoXY
  1790                           
  1791                           ;Menu.c: 84:                         colIndex--;
  1792   000382  0641               	decf	_colIndex^0,f,c
  1793   000384                     l5072:
  1794                           
  1795                           ;Menu.c: 86:                     tmpPortChar = getCharacter();
  1796   000384  EC8C  F009         	call	_getCharacter	;wreg free
  1797   000388  6E3C               	movwf	_tmpPortChar^0,c
  1798                           
  1799                           ;Menu.c: 87:                     state = 3;
  1800   00038A  0E03               	movlw	3
  1801   00038C  6E3D               	movwf	_state@Menu$F788^0,c
  1802   00038E  0012               	return	
  1803   000390                     l5076:
  1804                           
  1805                           ;Menu.c: 93:             portName[getColumnAct()] = tmpPortChar;
  1806   000390  EC1E  F000         	call	_getColumnAct	;wreg free
  1807   000394  6E6D               	movwf	??_menuLoop^0,c
  1808   000396  506D               	movf	??_menuLoop^0,w,c
  1809   000398  0F19               	addlw	low _portName
  1810   00039A  6ED9               	movwf	fsr2l,c
  1811   00039C  6ADA               	clrf	fsr2h,c
  1812   00039E  C03C  FFDF         	movff	_tmpPortChar,indf2
  1813                           
  1814                           ;Menu.c: 94:             LcPutChar(tmpPortChar);
  1815   0003A2  503C               	movf	_tmpPortChar^0,w,c
  1816   0003A4  EC83  F00B         	call	_LcPutChar
  1817                           
  1818                           ;Menu.c: 95:             colIndex++;
  1819   0003A8  2A41               	incf	_colIndex^0,f,c
  1820                           
  1821                           ;Menu.c: 96:             skipState++;
  1822   0003AA  2A3E               	incf	_skipState^0,f,c
  1823                           
  1824                           ;Menu.c: 97:             goToWaitState(4);
  1825   0003AC  0E04               	movlw	4
  1826   0003AE  ECA0  F00F         	call	_goToWaitState
  1827                           
  1828                           ;Menu.c: 98:             break;
  1829   0003B2  0012               	return	
  1830   0003B4                     l5086:
  1831                           
  1832                           ;Menu.c: 101:             if(!isPressed()){
  1833   0003B4  EC3B  F00F         	call	_isPressed	;wreg free
  1834   0003B8  0900               	iorlw	0
  1835   0003BA  D7AE               	goto	L7
  1836   0003BC                     l5090:
  1837                           
  1838                           ;Menu.c: 107:             displayMenu(&MAINMENU[displayPos]);
  1839   0003BC  5040               	movf	_displayPos^0,w,c
  1840   0003BE  0D17               	mullw	23
  1841   0003C0  50F3               	movf	243,w,c
  1842   0003C2  0F0D               	addlw	low _MAINMENU
  1843   0003C4  6E6A               	movwf	displayMenu@string^0,c
  1844   0003C6  ECFF  F00B         	call	_displayMenu	;wreg free
  1845                           
  1846                           ;Menu.c: 108:            goToWaitState(5);
  1847   0003CA  0E05               	movlw	5
  1848   0003CC  ECA0  F00F         	call	_goToWaitState
  1849                           
  1850                           ;Menu.c: 109:             state = 5;
  1851   0003D0  0E05               	movlw	5
  1852   0003D2  6E3D               	movwf	_state@Menu$F788^0,c
  1853                           
  1854                           ;Menu.c: 110:             if(rowIndex ==1 && !skipState){
  1855   0003D4  0442               	decf	_rowIndex^0,w,c
  1856   0003D6  A4D8               	btfss	status,2,c
  1857   0003D8  D007               	goto	l5104
  1858   0003DA  503E               	movf	_skipState^0,w,c
  1859   0003DC  A4D8               	btfss	status,2,c
  1860   0003DE  D004               	goto	l5104
  1861                           
  1862                           ;Menu.c: 111:                 displayPos++;
  1863   0003E0  2A40               	incf	_displayPos^0,f,c
  1864                           
  1865                           ;Menu.c: 112:                 skipState = 1;
  1866   0003E2  0E01               	movlw	1
  1867   0003E4  6E3E               	movwf	_skipState^0,c
  1868                           
  1869                           ;Menu.c: 113:             }else if(rowIndex == 2){
  1870   0003E6  0012               	return	
  1871   0003E8                     l5104:
  1872   0003E8  0E02               	movlw	2
  1873   0003EA  1842               	xorwf	_rowIndex^0,w,c
  1874   0003EC  A4D8               	btfss	status,2,c
  1875   0003EE  0012               	return	
  1876                           
  1877                           ;Menu.c: 114:                 displayPos--;
  1878   0003F0  0640               	decf	_displayPos^0,f,c
  1879                           
  1880                           ;Menu.c: 115:                 tmpPortChar = 1;
  1881   0003F2  0E01               	movlw	1
  1882   0003F4  6E3C               	movwf	_tmpPortChar^0,c
  1883                           
  1884                           ;Menu.c: 116:                 skipState = 5;
  1885   0003F6  0E05               	movlw	5
  1886   0003F8  6E3E               	movwf	_skipState^0,c
  1887                           
  1888                           ;Menu.c: 117:                 state = 90;
  1889   0003FA  0E5A               	movlw	90
  1890   0003FC  6E3D               	movwf	_state@Menu$F788^0,c
  1891   0003FE  0012               	return	
  1892   000400                     l5114:
  1893                           
  1894                           ;Menu.c: 122:             if(displayPos == 0){
  1895   000400  5040               	movf	_displayPos^0,w,c
  1896   000402  A4D8               	btfss	status,2,c
  1897   000404  D003               	goto	l5118
  1898                           
  1899                           ;Menu.c: 124:                 state = 40;
  1900   000406  0E28               	movlw	40
  1901   000408  6E3D               	movwf	_state@Menu$F788^0,c
  1902                           
  1903                           ;Menu.c: 125:             }else if(displayPos == 1){
  1904   00040A  0012               	return	
  1905   00040C                     l5118:
  1906   00040C  0440               	decf	_displayPos^0,w,c
  1907   00040E  A4D8               	btfss	status,2,c
  1908   000410  D003               	goto	l5122
  1909                           
  1910                           ;Menu.c: 127:                 state = 60;
  1911   000412  0E3C               	movlw	60
  1912   000414  6E3D               	movwf	_state@Menu$F788^0,c
  1913                           
  1914                           ;Menu.c: 128:             }else if(displayPos == 2){
  1915   000416  0012               	return	
  1916   000418                     l5122:
  1917   000418  0E02               	movlw	2
  1918   00041A  1840               	xorwf	_displayPos^0,w,c
  1919   00041C  A4D8               	btfss	status,2,c
  1920   00041E  D003               	goto	l5126
  1921                           
  1922                           ;Menu.c: 130:                 state = 20;
  1923   000420  0E14               	movlw	20
  1924   000422  6E3D               	movwf	_state@Menu$F788^0,c
  1925                           
  1926                           ;Menu.c: 131:             }else if(displayPos == 3){
  1927   000424  0012               	return	
  1928   000426                     l5126:
  1929   000426  0E03               	movlw	3
  1930   000428  1840               	xorwf	_displayPos^0,w,c
  1931   00042A  A4D8               	btfss	status,2,c
  1932   00042C  D003               	goto	l5130
  1933                           
  1934                           ;Menu.c: 133:                 state = 30;
  1935   00042E  0E1E               	movlw	30
  1936   000430  6E3D               	movwf	_state@Menu$F788^0,c
  1937                           
  1938                           ;Menu.c: 134:             }else if (displayPos == 4){
  1939   000432  0012               	return	
  1940   000434                     l5130:
  1941   000434  0E04               	movlw	4
  1942   000436  1840               	xorwf	_displayPos^0,w,c
  1943   000438  A4D8               	btfss	status,2,c
  1944   00043A  0012               	return	
  1945                           
  1946                           ;Menu.c: 136:                 state = 100;
  1947   00043C  0E64               	movlw	100
  1948   00043E  6E3D               	movwf	_state@Menu$F788^0,c
  1949   000440  0012               	return	
  1950   000442                     l5134:
  1951                           
  1952                           ;Menu.c: 142:             LcCursorOff();
  1953   000442  ECF0  F00F         	call	_LcCursorOff	;wreg free
  1954                           
  1955                           ;Menu.c: 143:             updateSysTimestamp(timeValue,0);
  1956   000446  C027  F054         	movff	_timeValue,updateSysTimestamp@time
  1957   00044A  C028  F055         	movff	_timeValue+1,updateSysTimestamp@time+1
  1958   00044E  0E00               	movlw	0
  1959   000450  6E56               	movwf	updateSysTimestamp@i^0,c
  1960   000452  EC2E  F00E         	call	_updateSysTimestamp	;wreg free
  1961                           
  1962                           ;Menu.c: 144:             chargeMemory();
  1963   000456  ECF6  F00F         	call	_chargeMemory	;wreg free
  1964                           
  1965                           ;Menu.c: 145:             state = 9;
  1966   00045A  0E09               	movlw	9
  1967   00045C  6E3D               	movwf	_state@Menu$F788^0,c
  1968                           
  1969                           ;Menu.c: 146:             break;
  1970   00045E  0012               	return	
  1971   000460                     l5140:
  1972                           
  1973                           ;Menu.c: 150:             if(checkTX()){
  1974   000460  ECDE  F00F         	call	_checkTX	;wreg free
  1975   000464  0900               	iorlw	0
  1976   000466  B4D8               	btfsc	status,2,c
  1977   000468  0012               	return	
  1978                           
  1979                           ;Menu.c: 151:                 setTX('T');
  1980   00046A  0E54               	movlw	84
  1981   00046C  EC0F  F000         	call	_setTX
  1982                           
  1983                           ;Menu.c: 152:                 state = 10;
  1984   000470  0E0A               	movlw	10
  1985   000472  6E3D               	movwf	_state@Menu$F788^0,c
  1986   000474  0012               	return	
  1987   000476                     l5146:
  1988                           
  1989                           ;Menu.c: 156:             if(checkRX() && getRX() == 'K'){
  1990   000476  ECE4  F00F         	call	_checkRX	;wreg free
  1991   00047A  0900               	iorlw	0
  1992   00047C  B4D8               	btfsc	status,2,c
  1993   00047E  0012               	return	
  1994   000480  EC20  F000         	call	_getRX	;wreg free
  1995   000484  0A4B               	xorlw	75
  1996   000486  A4D8               	btfss	status,2,c
  1997   000488  0012               	return	
  1998                           
  1999                           ;Menu.c: 157:                 state = 11;
  2000   00048A  0E0B               	movlw	11
  2001   00048C  6E3D               	movwf	_state@Menu$F788^0,c
  2002                           
  2003                           ;Menu.c: 158:                 index = 0;
  2004   00048E  0E00               	movlw	0
  2005   000490  6E3F               	movwf	_index^0,c
  2006                           
  2007                           ;Menu.c: 159:                 TI_ResetTics(timer);
  2008   000492  5052               	movf	_timer^0,w,c
  2009   000494  EC59  F00E         	call	_TI_ResetTics
  2010   000498  0012               	return	
  2011   00049A                     l5154:
  2012                           
  2013                           ;Menu.c: 163:             if(index == 4){
  2014   00049A  0E04               	movlw	4
  2015   00049C  183F               	xorwf	_index^0,w,c
  2016   00049E  A4D8               	btfss	status,2,c
  2017   0004A0  D003               	goto	l5158
  2018   0004A2                     u4780:
  2019                           
  2020                           ;Menu.c: 164:                 refreshDisplay();
  2021   0004A2  EC6D  F00E         	call	_refreshDisplay	;wreg free
  2022                           
  2023                           ;Menu.c: 165:             }else if(checkTX()){
  2024   0004A6  0012               	return	
  2025   0004A8                     l5158:
  2026   0004A8  ECDE  F00F         	call	_checkTX	;wreg free
  2027   0004AC  0900               	iorlw	0
  2028   0004AE  B4D8               	btfsc	status,2,c
  2029   0004B0  0012               	return	
  2030                           
  2031                           ;Menu.c: 166:                 setTX(portName[index]);
  2032   0004B2  503F               	movf	_index^0,w,c
  2033   0004B4  0F19               	addlw	low _portName
  2034   0004B6  6ED9               	movwf	fsr2l,c
  2035   0004B8  6ADA               	clrf	fsr2h,c
  2036   0004BA  50DF               	movf	indf2,w,c
  2037   0004BC  EC0F  F000         	call	_setTX
  2038                           
  2039                           ;Menu.c: 167:                 TI_ResetTics(timer);
  2040   0004C0  5052               	movf	_timer^0,w,c
  2041   0004C2  EC59  F00E         	call	_TI_ResetTics
  2042                           
  2043                           ;Menu.c: 168:                 index++;
  2044   0004C6  2A3F               	incf	_index^0,f,c
  2045   0004C8  0012               	return	
  2046   0004CA                     l5166:
  2047                           
  2048                           ;Menu.c: 173:             lcdAddString(&MODIFYTIME);
  2049   0004CA  0EAC               	movlw	low _MODIFYTIME
  2050   0004CC  6E6A               	movwf	lcdAddString@string^0,c
  2051   0004CE  6A6B               	clrf	(lcdAddString@string+1)^0,c
  2052   0004D0  EC17  F00E         	call	_lcdAddString	;wreg free
  2053                           
  2054                           ;Menu.c: 174:             if(rowIndex == 1){
  2055   0004D4  0442               	decf	_rowIndex^0,w,c
  2056   0004D6  A4D8               	btfss	status,2,c
  2057   0004D8  0012               	return	
  2058                           
  2059                           ;Menu.c: 175:                 LcCursorOn();
  2060   0004DA  ECEA  F00F         	call	_LcCursorOn	;wreg free
  2061                           
  2062                           ;Menu.c: 176:                 index = 4;
  2063   0004DE  0E04               	movlw	4
  2064   0004E0  6E3F               	movwf	_index^0,c
  2065   0004E2                     l5174:
  2066                           
  2067                           ;Menu.c: 177:                 state = 21;
  2068   0004E2  0E15               	movlw	21
  2069   0004E4  6E3D               	movwf	_state@Menu$F788^0,c
  2070   0004E6  0012               	return	
  2071   0004E8                     l5176:
  2072                           
  2073                           ;Menu.c: 182:             if (isPressed()){
  2074   0004E8  EC3B  F00F         	call	_isPressed	;wreg free
  2075   0004EC  0900               	iorlw	0
  2076   0004EE  B4D8               	btfsc	status,2,c
  2077   0004F0  0012               	return	
  2078                           
  2079                           ;Menu.c: 183:                 if(getDigitValue() == '*'){
  2080   0004F2  ECF7  F00E         	call	_getDigitValue	;wreg free
  2081   0004F6  0A2A               	xorlw	42
  2082   0004F8  B4D8               	btfsc	status,2,c
  2083   0004FA  D7D3               	goto	u4780
  2084   0004FC  ECF7  F00E         	call	_getDigitValue	;wreg free
  2085   000500  0A23               	xorlw	35
  2086   000502  B4D8               	btfsc	status,2,c
  2087   000504  0012               	return	
  2088                           
  2089                           ;Menu.c: 186:                     LcPutChar(getDigitValue());
  2090   000506  ECF7  F00E         	call	_getDigitValue	;wreg free
  2091   00050A  EC83  F00B         	call	_LcPutChar
  2092                           
  2093                           ;Menu.c: 187:                     colIndex++;
  2094   00050E  2A41               	incf	_colIndex^0,f,c
  2095                           
  2096                           ;Menu.c: 188:                     index--;
  2097   000510  063F               	decf	_index^0,f,c
  2098                           
  2099                           ;Menu.c: 189:                     if(index == 3){
  2100   000512  0E03               	movlw	3
  2101   000514  183F               	xorwf	_index^0,w,c
  2102   000516  A4D8               	btfss	status,2,c
  2103   000518  D006               	goto	l5194
  2104                           
  2105                           ;Menu.c: 190:                         timeValue.minutes = (getDigitValue()*10);
  2106   00051A  ECF7  F00E         	call	_getDigitValue	;wreg free
  2107   00051E  0D0A               	mullw	10
  2108   000520  CFF3 F027          	movff	prodl,_timeValue
  2109                           
  2110                           ;Menu.c: 191:                     }else if(index == 2){
  2111   000524  D016               	goto	l5204
  2112   000526                     l5194:
  2113   000526  0E02               	movlw	2
  2114   000528  183F               	xorwf	_index^0,w,c
  2115   00052A  A4D8               	btfss	status,2,c
  2116   00052C  D005               	goto	l5198
  2117                           
  2118                           ;Menu.c: 192:                         timeValue.minutes += getDigitValue()-16;
  2119   00052E  ECF7  F00E         	call	_getDigitValue	;wreg free
  2120   000532  0FF0               	addlw	240
  2121   000534  2627               	addwf	_timeValue^0,f,c
  2122                           
  2123                           ;Menu.c: 193:                     }else if(index == 1){
  2124   000536  D00D               	goto	l5204
  2125   000538                     l5198:
  2126   000538  043F               	decf	_index^0,w,c
  2127   00053A  A4D8               	btfss	status,2,c
  2128   00053C  D006               	goto	l5202
  2129                           
  2130                           ;Menu.c: 194:                         timeValue.seconds = (getDigitValue()*10);
  2131   00053E  ECF7  F00E         	call	_getDigitValue	;wreg free
  2132   000542  0D0A               	mullw	10
  2133   000544  CFF3 F028          	movff	prodl,_timeValue+1
  2134                           
  2135                           ;Menu.c: 195:                     }else{
  2136   000548  D004               	goto	l5204
  2137   00054A                     l5202:
  2138                           
  2139                           ;Menu.c: 196:                         timeValue.seconds += getDigitValue()-16;
  2140   00054A  ECF7  F00E         	call	_getDigitValue	;wreg free
  2141   00054E  0FF0               	addlw	240
  2142   000550  2628               	addwf	(_timeValue+1)^0,f,c
  2143   000552                     l5204:
  2144                           
  2145                           ;Menu.c: 198:                     state = index==0?23:22;
  2146   000552  503F               	movf	_index^0,w,c
  2147   000554  B4D8               	btfsc	status,2,c
  2148   000556  D004               	goto	l5208
  2149   000558  0E00               	movlw	0
  2150   00055A  6E74               	movwf	(_menuLoop$799+1)^0,c
  2151   00055C  0E16               	movlw	22
  2152   00055E  D003               	goto	L1
  2153   000560                     l5208:
  2154   000560  0E00               	movlw	0
  2155   000562  6E74               	movwf	(_menuLoop$799+1)^0,c
  2156   000564  0E17               	movlw	23
  2157   000566                     L1:
  2158   000566  6E73               	movwf	_menuLoop$799^0,c
  2159   000568  C073  F03D         	movff	_menuLoop$799,_state@Menu$F788
  2160   00056C  0012               	return	
  2161   00056E                     l5212:
  2162                           
  2163                           ;Menu.c: 204:             if(!isPressed()){
  2164   00056E  EC3B  F00F         	call	_isPressed	;wreg free
  2165   000572  0900               	iorlw	0
  2166   000574  A4D8               	btfss	status,2,c
  2167   000576  0012               	return	
  2168                           
  2169                           ;Menu.c: 205:                 if(index == 2){
  2170   000578  0E02               	movlw	2
  2171   00057A  183F               	xorwf	_index^0,w,c
  2172   00057C  A4D8               	btfss	status,2,c
  2173   00057E  D7B1               	goto	l5174
  2174                           
  2175                           ;Menu.c: 206:                     LcPutChar(':');
  2176   000580  0E3A               	movlw	58
  2177   000582  EC83  F00B         	call	_LcPutChar
  2178                           
  2179                           ;Menu.c: 207:                     colIndex++;
  2180   000586  2A41               	incf	_colIndex^0,f,c
  2181   000588  D7AC               	goto	l5174
  2182   00058A                     l5222:
  2183                           
  2184                           ;Menu.c: 213:             if(isPressed() && getCharacter() == '#'){
  2185   00058A  EC3B  F00F         	call	_isPressed	;wreg free
  2186   00058E  0900               	iorlw	0
  2187   000590  B4D8               	btfsc	status,2,c
  2188   000592  D010               	goto	l5228
  2189   000594  EC8C  F009         	call	_getCharacter	;wreg free
  2190   000598  0A23               	xorlw	35
  2191   00059A  A4D8               	btfss	status,2,c
  2192   00059C  D00B               	goto	l5228
  2193                           
  2194                           ;Menu.c: 214:                 updateSysTimestamp(timeValue,0);
  2195   00059E  C027  F054         	movff	_timeValue,updateSysTimestamp@time
  2196   0005A2  C028  F055         	movff	_timeValue+1,updateSysTimestamp@time+1
  2197   0005A6  0E00               	movlw	0
  2198   0005A8  6E56               	movwf	updateSysTimestamp@i^0,c
  2199   0005AA  EC2E  F00E         	call	_updateSysTimestamp	;wreg free
  2200                           
  2201                           ;Menu.c: 215:                 refreshDisplay();
  2202   0005AE  EC6D  F00E         	call	_refreshDisplay	;wreg free
  2203                           
  2204                           ;Menu.c: 216:             }else if(isPressed() && getCharacter() == '*'){
  2205   0005B2  0012               	return	
  2206   0005B4                     l5228:
  2207   0005B4  EC3B  F00F         	call	_isPressed	;wreg free
  2208   0005B8  0900               	iorlw	0
  2209   0005BA  B4D8               	btfsc	status,2,c
  2210   0005BC  0012               	return	
  2211   0005BE  EC8C  F009         	call	_getCharacter	;wreg free
  2212   0005C2  0A2A               	xorlw	42
  2213   0005C4  A4D8               	btfss	status,2,c
  2214   0005C6  0012               	return	
  2215   0005C8  D76C               	goto	u4780
  2216   0005CA                     l5234:
  2217                           
  2218                           ;Menu.c: 221:             lcdAddString(&CURRENTTIME);
  2219   0005CA  0E90               	movlw	low _CURRENTTIME
  2220   0005CC  6E6A               	movwf	lcdAddString@string^0,c
  2221   0005CE  6A6B               	clrf	(lcdAddString@string+1)^0,c
  2222   0005D0  EC17  F00E         	call	_lcdAddString	;wreg free
  2223                           
  2224                           ;Menu.c: 222:             if(rowIndex == 1){
  2225   0005D4  0442               	decf	_rowIndex^0,w,c
  2226   0005D6  A4D8               	btfss	status,2,c
  2227   0005D8  0012               	return	
  2228                           
  2229                           ;Menu.c: 223:                 displayTimestamp(0);
  2230   0005DA  0E00               	movlw	0
  2231   0005DC  ECD8  F00F         	call	_displayTimestamp
  2232                           
  2233                           ;Menu.c: 224:                 TI_ResetTics(timer);
  2234   0005E0  5052               	movf	_timer^0,w,c
  2235   0005E2  EC59  F00E         	call	_TI_ResetTics
  2236                           
  2237                           ;Menu.c: 225:                 state = 31;
  2238   0005E6  0E1F               	movlw	31
  2239   0005E8  6E3D               	movwf	_state@Menu$F788^0,c
  2240   0005EA  0012               	return	
  2241   0005EC                     l5244:
  2242                           
  2243                           ;Menu.c: 229:             if(isPressed() && getCharacter() == '#'){
  2244   0005EC  EC3B  F00F         	call	_isPressed	;wreg free
  2245   0005F0  0900               	iorlw	0
  2246   0005F2  B4D8               	btfsc	status,2,c
  2247   0005F4  D005               	goto	l5250
  2248   0005F6  EC8C  F009         	call	_getCharacter	;wreg free
  2249   0005FA  0A23               	xorlw	35
  2250   0005FC  B4D8               	btfsc	status,2,c
  2251   0005FE  D751               	goto	u4780
  2252   000600                     l5250:
  2253   000600  5052               	movf	_timer^0,w,c
  2254   000602  EC05  F00D         	call	_TI_GetTics
  2255   000606  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2256   000608  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2257   00060A  E106               	bnz	u4970
  2258   00060C  0EA0               	movlw	160
  2259   00060E  5C53               	subwf	?_TI_GetTics^0,w,c
  2260   000610  0E0F               	movlw	15
  2261   000612  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2262   000614  A0D8               	btfss	status,0,c
  2263   000616  0012               	return	
  2264   000618                     u4970:
  2265                           
  2266                           ;Menu.c: 232:                 resetDisplay(30);
  2267   000618  0E1E               	movlw	30
  2268   00061A  ECE8  F00E         	call	_resetDisplay
  2269   00061E  0012               	return	
  2270   000620                     l5254:
  2271                           
  2272                           ;Menu.c: 239:             lcdAddString(&STARTRECORDING);
  2273   000620  0E9E               	movlw	low _STARTRECORDING
  2274   000622  6E6A               	movwf	lcdAddString@string^0,c
  2275   000624  6A6B               	clrf	(lcdAddString@string+1)^0,c
  2276   000626  EC17  F00E         	call	_lcdAddString	;wreg free
  2277                           
  2278                           ;Menu.c: 240:             if(rowIndex == 1){
  2279   00062A  0442               	decf	_rowIndex^0,w,c
  2280   00062C  A4D8               	btfss	status,2,c
  2281   00062E  0012               	return	
  2282                           
  2283                           ;Menu.c: 241:                 index = 0;
  2284   000630  0E00               	movlw	0
  2285   000632  6E3F               	movwf	_index^0,c
  2286                           
  2287                           ;Menu.c: 242:                 state = 41;
  2288   000634  0E29               	movlw	41
  2289   000636  6E3D               	movwf	_state@Menu$F788^0,c
  2290   000638  0012               	return	
  2291   00063A                     l5260:
  2292                           
  2293                           ;Menu.c: 246:             if(checkTX()){
  2294   00063A  ECDE  F00F         	call	_checkTX	;wreg free
  2295   00063E  0900               	iorlw	0
  2296   000640  B4D8               	btfsc	status,2,c
  2297   000642  0012               	return	
  2298                           
  2299                           ;Menu.c: 247:                 setTX('D');
  2300   000644  0E44               	movlw	68
  2301   000646  EC0F  F000         	call	_setTX
  2302                           
  2303                           ;Menu.c: 248:                 state = 42;
  2304   00064A  0E2A               	movlw	42
  2305   00064C  6E3D               	movwf	_state@Menu$F788^0,c
  2306   00064E  0012               	return	
  2307   000650                     l5266:
  2308                           
  2309                           ;Menu.c: 252:             sendTimestamp();
  2310   000650  EC13  F000         	call	_sendTimestamp	;wreg free
  2311                           
  2312                           ;Menu.c: 253:             state = 43;
  2313   000654  0E2B               	movlw	43
  2314   000656  6E3D               	movwf	_state@Menu$F788^0,c
  2315                           
  2316                           ;Menu.c: 254:             break;
  2317   000658  0012               	return	
  2318   00065A                     l5270:
  2319                           
  2320                           ;Menu.c: 256:             if(isIdle()){
  2321   00065A  ECB8  F00F         	call	_isIdle	;wreg free
  2322   00065E  0900               	iorlw	0
  2323   000660  B4D8               	btfsc	status,2,c
  2324   000662  0012               	return	
  2325                           
  2326                           ;Menu.c: 257:                 saveIndex();
  2327   000664  EC16  F000         	call	_saveIndex	;wreg free
  2328                           
  2329                           ;Menu.c: 258:                 state = 44;
  2330   000668  0E2C               	movlw	44
  2331   00066A  6E3D               	movwf	_state@Menu$F788^0,c
  2332   00066C  0012               	return	
  2333   00066E                     l5276:
  2334                           
  2335                           ;Menu.c: 262:             if(isIdle()){
  2336   00066E  ECB8  F00F         	call	_isIdle	;wreg free
  2337   000672  0900               	iorlw	0
  2338   000674  B4D8               	btfsc	status,2,c
  2339   000676  0012               	return	
  2340                           
  2341                           ;Menu.c: 263:                 state = 45;
  2342   000678  0E2D               	movlw	45
  2343   00067A  6E3D               	movwf	_state@Menu$F788^0,c
  2344                           
  2345                           ;Menu.c: 264:                 TI_ResetTics(timer);
  2346   00067C  5052               	movf	_timer^0,w,c
  2347   00067E  EC59  F00E         	call	_TI_ResetTics
  2348                           
  2349                           ;Menu.c: 265:                 joystickIdle();
  2350   000682  ECCC  F00F         	call	_joystickIdle	;wreg free
  2351                           
  2352                           ;Menu.c: 266:                 ADCON0bits.GO_DONE = 1;
  2353   000686  82C2               	bsf	194,1,c	;volatile
  2354   000688  0012               	return	
  2355   00068A                     l5286:
  2356                           
  2357                           ;Menu.c: 270:             if(TI_GetTics(timer) >= 8*4000){
  2358   00068A  5052               	movf	_timer^0,w,c
  2359   00068C  EC05  F00D         	call	_TI_GetTics
  2360   000690  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2361   000692  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2362   000694  E104               	bnz	u5020
  2363   000696  0E7D               	movlw	125
  2364   000698  5C54               	subwf	(?_TI_GetTics+1)^0,w,c
  2365   00069A  A0D8               	btfss	status,0,c
  2366   00069C  D00B               	goto	l488
  2367   00069E                     u5020:
  2368                           
  2369                           ;Menu.c: 271:                 TI_ResetTics(songTimer);
  2370   00069E  5051               	movf	_songTimer^0,w,c
  2371   0006A0  EC59  F00E         	call	_TI_ResetTics
  2372                           
  2373                           ;Menu.c: 272:                 TI_ResetTics(timer);
  2374   0006A4  5052               	movf	_timer^0,w,c
  2375   0006A6  EC59  F00E         	call	_TI_ResetTics
  2376                           
  2377                           ;Menu.c: 273:                 joystickAlive();
  2378   0006AA  ECD2  F00F         	call	_joystickAlive	;wreg free
  2379                           
  2380                           ;Menu.c: 274:                 state = 50;
  2381   0006AE  0E32               	movlw	50
  2382   0006B0  6E3D               	movwf	_state@Menu$F788^0,c
  2383                           
  2384                           ;Menu.c: 275:             }else if(ADCON0bits.GO_DONE == 0 && checkTX()){
  2385   0006B2  0012               	return	
  2386   0006B4                     l488:
  2387   0006B4  B2C2               	btfsc	194,1,c	;volatile
  2388   0006B6  0012               	return	
  2389   0006B8  ECDE  F00F         	call	_checkTX	;wreg free
  2390   0006BC  0900               	iorlw	0
  2391   0006BE  B4D8               	btfsc	status,2,c
  2392   0006C0  0012               	return	
  2393                           
  2394                           ;Menu.c: 276:                 setTX(ADRESH);
  2395   0006C2  50C4               	movf	196,w,c	;volatile
  2396   0006C4  EC0F  F000         	call	_setTX
  2397                           
  2398                           ;Menu.c: 277:                 ADCON0bits.GO_DONE = 1;
  2399   0006C8  82C2               	bsf	194,1,c	;volatile
  2400   0006CA  0012               	return	
  2401   0006CC                     l5300:
  2402                           
  2403                           ;Menu.c: 283:             if(TI_GetTics(songTimer) >= MUSICDELAY[index] ){
  2404   0006CC  503F               	movf	_index^0,w,c
  2405   0006CE  0D02               	mullw	2
  2406   0006D0  50F3               	movf	243,w,c
  2407   0006D2  0F80               	addlw	low _MUSICDELAY
  2408   0006D4  6ED9               	movwf	fsr2l,c
  2409   0006D6  6ADA               	clrf	fsr2h,c
  2410   0006D8  CFDE F06D          	movff	postinc2,??_menuLoop
  2411   0006DC  CFDD F06E          	movff	postdec2,??_menuLoop+1
  2412   0006E0  C06D  F06F         	movff	??_menuLoop,??_menuLoop+2
  2413   0006E4  C06E  F070         	movff	??_menuLoop+1,??_menuLoop+3
  2414   0006E8  0E00               	movlw	0
  2415   0006EA  BE70               	btfsc	(??_menuLoop+3)^0,7,c
  2416   0006EC  0EFF               	movlw	255
  2417   0006EE  6E71               	movwf	(??_menuLoop+4)^0,c
  2418   0006F0  6E72               	movwf	(??_menuLoop+5)^0,c
  2419   0006F2  5051               	movf	_songTimer^0,w,c
  2420   0006F4  EC05  F00D         	call	_TI_GetTics
  2421   0006F8  506F               	movf	(??_menuLoop+2)^0,w,c
  2422   0006FA  5C53               	subwf	?_TI_GetTics^0,w,c
  2423   0006FC  5070               	movf	(??_menuLoop+3)^0,w,c
  2424   0006FE  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2425   000700  5071               	movf	(??_menuLoop+4)^0,w,c
  2426   000702  5855               	subwfb	(?_TI_GetTics+2)^0,w,c
  2427   000704  5072               	movf	(??_menuLoop+5)^0,w,c
  2428   000706  5856               	subwfb	(?_TI_GetTics+3)^0,w,c
  2429   000708  A0D8               	btfss	status,0,c
  2430   00070A  0012               	return	
  2431                           
  2432                           ;Menu.c: 284:                 index++;
  2433   00070C  2A3F               	incf	_index^0,f,c
  2434                           
  2435                           ;Menu.c: 285:                 if(index == 8){
  2436   00070E  0E08               	movlw	8
  2437   000710  183F               	xorwf	_index^0,w,c
  2438   000712  A4D8               	btfss	status,2,c
  2439   000714  D003               	goto	l5308
  2440                           
  2441                           ;Menu.c: 286:                     state = 51;
  2442   000716  0E33               	movlw	51
  2443   000718  6E3D               	movwf	_state@Menu$F788^0,c
  2444                           
  2445                           ;Menu.c: 287:                 }else{
  2446   00071A  0012               	return	
  2447   00071C                     l5308:
  2448                           
  2449                           ;Menu.c: 288:                     playMusic(MUSICPERIODS[index]);
  2450   00071C  503F               	movf	_index^0,w,c
  2451   00071E  0F75               	addlw	low _MUSICPERIODS
  2452   000720  6ED9               	movwf	fsr2l,c
  2453   000722  6ADA               	clrf	fsr2h,c
  2454   000724  50DF               	movf	indf2,w,c
  2455   000726  EC97  F00F         	call	_playMusic
  2456                           
  2457                           ;Menu.c: 289:                     TI_ResetTics(songTimer);
  2458   00072A  5051               	movf	_songTimer^0,w,c
  2459   00072C  EC59  F00E         	call	_TI_ResetTics
  2460   000730  0012               	return	
  2461   000732                     l5310:
  2462                           
  2463                           ;Menu.c: 295:             if(TI_GetTics(timer) >= 5*4000){
  2464   000732  5052               	movf	_timer^0,w,c
  2465   000734  EC05  F00D         	call	_TI_GetTics
  2466   000738  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2467   00073A  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2468   00073C  E106               	bnz	u5070
  2469   00073E  0E20               	movlw	32
  2470   000740  5C53               	subwf	?_TI_GetTics^0,w,c
  2471   000742  0E4E               	movlw	78
  2472   000744  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2473   000746  A0D8               	btfss	status,0,c
  2474   000748  D005               	goto	l5318
  2475   00074A                     u5070:
  2476                           
  2477                           ;Menu.c: 296:                 stopMusic();
  2478   00074A  EC19  F000         	call	_stopMusic	;wreg free
  2479                           
  2480                           ;Menu.c: 297:                 tmpPortChar = 1;
  2481   00074E  0E01               	movlw	1
  2482   000750  6E3C               	movwf	_tmpPortChar^0,c
  2483   000752  D6A7               	goto	u4780
  2484   000754                     l5318:
  2485                           
  2486                           ;Menu.c: 300:                 index = 0;
  2487   000754  0E00               	movlw	0
  2488   000756  6E3F               	movwf	_index^0,c
  2489                           
  2490                           ;Menu.c: 301:                 state = 50;
  2491   000758  0E32               	movlw	50
  2492   00075A  6E3D               	movwf	_state@Menu$F788^0,c
  2493   00075C  0012               	return	
  2494   00075E                     l5320:
  2495                           
  2496                           ;Menu.c: 310:             if(getNumRecordings() == 0){
  2497   00075E  EC14  F00F         	call	_getNumRecordings	;wreg free
  2498   000762  0900               	iorlw	0
  2499   000764  A4D8               	btfss	status,2,c
  2500   000766  D003               	goto	l5324
  2501                           
  2502                           ;Menu.c: 311:                 state = 150;
  2503   000768  0E96               	movlw	150
  2504   00076A  6E3D               	movwf	_state@Menu$F788^0,c
  2505                           
  2506                           ;Menu.c: 312:             }else{
  2507   00076C  0012               	return	
  2508   00076E                     l5324:
  2509                           
  2510                           ;Menu.c: 313:                 displayPos = 0;
  2511   00076E  0E00               	movlw	0
  2512   000770  6E40               	movwf	_displayPos^0,c
  2513                           
  2514                           ;Menu.c: 314:                 skipState = 0;
  2515   000772  0E00               	movlw	0
  2516   000774  6E3E               	movwf	_skipState^0,c
  2517                           
  2518                           ;Menu.c: 315:                 state = 61;
  2519   000776  0E3D               	movlw	61
  2520   000778  6E3D               	movwf	_state@Menu$F788^0,c
  2521   00077A  0012               	return	
  2522   00077C                     l5326:
  2523                           
  2524                           ;Menu.c: 319:             displayRecordings(displayPos);
  2525   00077C  5040               	movf	_displayPos^0,w,c
  2526   00077E  ECA8  F00F         	call	_displayRecordings
  2527                           
  2528                           ;Menu.c: 320:             state = 62;
  2529   000782  0E3E               	movlw	62
  2530   000784  6E3D               	movwf	_state@Menu$F788^0,c
  2531                           
  2532                           ;Menu.c: 321:             break;
  2533   000786  0012               	return	
  2534   000788                     l5330:
  2535                           
  2536                           ;Menu.c: 324:             if(isIdle()){
  2537   000788  ECB8  F00F         	call	_isIdle	;wreg free
  2538   00078C  0900               	iorlw	0
  2539   00078E  B4D8               	btfsc	status,2,c
  2540   000790  0012               	return	
  2541                           
  2542                           ;Menu.c: 325:                 tmpPortChar = 0;
  2543   000792  0E00               	movlw	0
  2544   000794  6E3C               	movwf	_tmpPortChar^0,c
  2545                           
  2546                           ;Menu.c: 326:                 skipState = getNumRecordings();
  2547   000796  EC14  F00F         	call	_getNumRecordings	;wreg free
  2548   00079A  D62E               	goto	L2
  2549   00079C                     l5338:
  2550                           
  2551                           ;Menu.c: 332:             lcdAddString(&PLAYRECORDINGS);
  2552   00079C  0EB9               	movlw	low _PLAYRECORDINGS
  2553   00079E  6E6A               	movwf	lcdAddString@string^0,c
  2554   0007A0  6A6B               	clrf	(lcdAddString@string+1)^0,c
  2555   0007A2  EC17  F00E         	call	_lcdAddString	;wreg free
  2556                           
  2557                           ;Menu.c: 333:             if(rowIndex == 1){
  2558   0007A6  0442               	decf	_rowIndex^0,w,c
  2559   0007A8  A4D8               	btfss	status,2,c
  2560   0007AA  0012               	return	
  2561                           
  2562                           ;Menu.c: 334:                 state = 71;
  2563   0007AC  0E47               	movlw	71
  2564   0007AE  6E3D               	movwf	_state@Menu$F788^0,c
  2565   0007B0  0012               	return	
  2566   0007B2                     l5344:
  2567                           
  2568                           ;Menu.c: 338:             if(checkTX()){
  2569   0007B2  ECDE  F00F         	call	_checkTX	;wreg free
  2570   0007B6  0900               	iorlw	0
  2571   0007B8  B4D8               	btfsc	status,2,c
  2572   0007BA  0012               	return	
  2573                           
  2574                           ;Menu.c: 339:                 setTX('P');
  2575   0007BC  0E50               	movlw	80
  2576   0007BE  EC0F  F000         	call	_setTX
  2577                           
  2578                           ;Menu.c: 340:                 state = 72;
  2579   0007C2  0E48               	movlw	72
  2580   0007C4  6E3D               	movwf	_state@Menu$F788^0,c
  2581   0007C6  0012               	return	
  2582   0007C8                     l5350:
  2583                           
  2584                           ;Menu.c: 344:             if(checkRX() && getRX() == 'K'){
  2585   0007C8  ECE4  F00F         	call	_checkRX	;wreg free
  2586   0007CC  0900               	iorlw	0
  2587   0007CE  B4D8               	btfsc	status,2,c
  2588   0007D0  0012               	return	
  2589   0007D2  EC20  F000         	call	_getRX	;wreg free
  2590   0007D6  0A4B               	xorlw	75
  2591   0007D8  A4D8               	btfss	status,2,c
  2592   0007DA  0012               	return	
  2593                           
  2594                           ;Menu.c: 345:                 sendIndex(displayPos);
  2595   0007DC  5040               	movf	_displayPos^0,w,c
  2596   0007DE  ECC6  F00F         	call	_sendIndex
  2597                           
  2598                           ;Menu.c: 346:                 state = 73;
  2599   0007E2  0E49               	movlw	73
  2600   0007E4  6E3D               	movwf	_state@Menu$F788^0,c
  2601   0007E6  0012               	return	
  2602   0007E8                     l5358:
  2603                           
  2604                           ;Menu.c: 351:             if(isIdle()){
  2605   0007E8  ECB8  F00F         	call	_isIdle	;wreg free
  2606   0007EC  0900               	iorlw	0
  2607   0007EE  B4D8               	btfsc	status,2,c
  2608   0007F0  0012               	return	
  2609                           
  2610                           ;Menu.c: 352:                 state = 84;
  2611   0007F2  0E54               	movlw	84
  2612   0007F4  6E3D               	movwf	_state@Menu$F788^0,c
  2613   0007F6  0012               	return	
  2614   0007F8                     l5362:
  2615                           
  2616                           ;Menu.c: 357:             if(checkRX() && getRX() == 'F'){
  2617   0007F8  ECE4  F00F         	call	_checkRX	;wreg free
  2618   0007FC  0900               	iorlw	0
  2619   0007FE  B4D8               	btfsc	status,2,c
  2620   000800  0012               	return	
  2621   000802  EC20  F000         	call	_getRX	;wreg free
  2622   000806  0A46               	xorlw	70
  2623   000808  A4D8               	btfss	status,2,c
  2624   00080A  0012               	return	
  2625                           
  2626                           ;Menu.c: 358:                 index = 7;
  2627   00080C  0E07               	movlw	7
  2628   00080E  6E3F               	movwf	_index^0,c
  2629                           
  2630                           ;Menu.c: 359:                 TI_ResetTics(timer);
  2631   000810  5052               	movf	_timer^0,w,c
  2632   000812  EC59  F00E         	call	_TI_ResetTics
  2633                           
  2634                           ;Menu.c: 360:                 playMusic(index);
  2635   000816  503F               	movf	_index^0,w,c
  2636   000818  EC97  F00F         	call	_playMusic
  2637                           
  2638                           ;Menu.c: 361:                 state = 85;
  2639   00081C  0E55               	movlw	85
  2640   00081E  6E3D               	movwf	_state@Menu$F788^0,c
  2641   000820  0012               	return	
  2642   000822                     l5372:
  2643                           
  2644                           ;Menu.c: 365:             if(TI_GetTics(timer) >= 4000 && index != 2){
  2645   000822  5052               	movf	_timer^0,w,c
  2646   000824  EC05  F00D         	call	_TI_GetTics
  2647   000828  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2648   00082A  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2649   00082C  E106               	bnz	u5170
  2650   00082E  0EA0               	movlw	160
  2651   000830  5C53               	subwf	?_TI_GetTics^0,w,c
  2652   000832  0E0F               	movlw	15
  2653   000834  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2654   000836  A0D8               	btfss	status,0,c
  2655   000838  D00C               	goto	l5382
  2656   00083A                     u5170:
  2657   00083A  0E02               	movlw	2
  2658   00083C  183F               	xorwf	_index^0,w,c
  2659   00083E  B4D8               	btfsc	status,2,c
  2660   000840  D008               	goto	l5382
  2661                           
  2662                           ;Menu.c: 366:                 index--;
  2663   000842  063F               	decf	_index^0,f,c
  2664                           
  2665                           ;Menu.c: 367:                 playMusic(index);
  2666   000844  503F               	movf	_index^0,w,c
  2667   000846  EC97  F00F         	call	_playMusic
  2668                           
  2669                           ;Menu.c: 368:                 TI_ResetTics(timer);
  2670   00084A  5052               	movf	_timer^0,w,c
  2671   00084C  EC59  F00E         	call	_TI_ResetTics
  2672                           
  2673                           ;Menu.c: 369:             }else if (index == 2){
  2674   000850  0012               	return	
  2675   000852                     l5382:
  2676   000852  0E02               	movlw	2
  2677   000854  183F               	xorwf	_index^0,w,c
  2678   000856  A4D8               	btfss	status,2,c
  2679   000858  0012               	return	
  2680                           
  2681                           ;Menu.c: 370:                 stopMusic();
  2682   00085A  EC19  F000         	call	_stopMusic	;wreg free
  2683                           
  2684                           ;Menu.c: 371:                 tmpPortChar = 1;
  2685   00085E  0E01               	movlw	1
  2686   000860  6E3C               	movwf	_tmpPortChar^0,c
  2687                           
  2688                           ;Menu.c: 372:                 displayPos = 1;
  2689   000862  0E01               	movlw	1
  2690   000864  6E40               	movwf	_displayPos^0,c
  2691   000866  D61D               	goto	u4780
  2692   000868                     l5392:
  2693                           
  2694                           ;Menu.c: 379:             if(!(getJoystickUp() || getJoystickDown())){
  2695   000868  EC47  F00F         	call	_getJoystickUp	;wreg free
  2696   00086C  0900               	iorlw	0
  2697   00086E  A4D8               	btfss	status,2,c
  2698   000870  0012               	return	
  2699   000872  EC53  F00F         	call	_getJoystickDown	;wreg free
  2700   000876  0900               	iorlw	0
  2701   000878  A4D8               	btfss	status,2,c
  2702   00087A  0012               	return	
  2703                           
  2704                           ;Menu.c: 380:                 state = 91;
  2705   00087C  0E5B               	movlw	91
  2706   00087E  6E3D               	movwf	_state@Menu$F788^0,c
  2707                           
  2708                           ;Menu.c: 381:                 TI_ResetTics(timer);
  2709   000880  5052               	movf	_timer^0,w,c
  2710   000882  EC59  F00E         	call	_TI_ResetTics
  2711   000886  0012               	return	
  2712   000888                     l5400:
  2713                           
  2714                           ;Menu.c: 387:             if(isPressed() && getDigitValue() == '#'){
  2715   000888  EC3B  F00F         	call	_isPressed	;wreg free
  2716   00088C  0900               	iorlw	0
  2717   00088E  B4D8               	btfsc	status,2,c
  2718   000890  D012               	goto	l5410
  2719   000892  ECF7  F00E         	call	_getDigitValue	;wreg free
  2720   000896  0A23               	xorlw	35
  2721   000898  A4D8               	btfss	status,2,c
  2722   00089A  D00D               	goto	l5410
  2723                           
  2724                           ;Menu.c: 388:                 skipState = 0;
  2725   00089C  0E00               	movlw	0
  2726   00089E  6E3E               	movwf	_skipState^0,c
  2727                           
  2728                           ;Menu.c: 389:                 if(tmpPortChar){
  2729   0008A0  503C               	movf	_tmpPortChar^0,w,c
  2730   0008A2  B4D8               	btfsc	status,2,c
  2731   0008A4  D004               	goto	l5408
  2732                           
  2733                           ;Menu.c: 390:                     resetDisplay(7);
  2734   0008A6  0E07               	movlw	7
  2735   0008A8  ECE8  F00E         	call	_resetDisplay
  2736                           
  2737                           ;Menu.c: 391:                 }else{
  2738   0008AC  0012               	return	
  2739   0008AE                     l5408:
  2740                           
  2741                           ;Menu.c: 392:                     resetDisplay(70);
  2742   0008AE  0E46               	movlw	70
  2743   0008B0  ECE8  F00E         	call	_resetDisplay
  2744   0008B4  0012               	return	
  2745   0008B6                     l5410:
  2746                           
  2747                           ;Menu.c: 395:                 if(getJoystickDown()){
  2748   0008B6  EC53  F00F         	call	_getJoystickDown	;wreg free
  2749   0008BA  0900               	iorlw	0
  2750   0008BC  B4D8               	btfsc	status,2,c
  2751   0008BE  D015               	goto	l5418
  2752                           
  2753                           ;Menu.c: 396:                     if(displayPos < skipState - 1){
  2754   0008C0  0EFF               	movlw	255
  2755   0008C2  243E               	addwf	_skipState^0,w,c
  2756   0008C4  6E6D               	movwf	??_menuLoop^0,c
  2757   0008C6  6A6E               	clrf	(??_menuLoop+1)^0,c
  2758   0008C8  0EFF               	movlw	255
  2759   0008CA  226E               	addwfc	(??_menuLoop+1)^0,f,c
  2760   0008CC  5040               	movf	_displayPos^0,w,c
  2761   0008CE  6E6F               	movwf	(??_menuLoop+2)^0,c
  2762   0008D0  6A70               	clrf	(??_menuLoop+3)^0,c
  2763   0008D2  506D               	movf	??_menuLoop^0,w,c
  2764   0008D4  5C6F               	subwf	(??_menuLoop+2)^0,w,c
  2765   0008D6  5070               	movf	(??_menuLoop+3)^0,w,c
  2766   0008D8  0A80               	xorlw	128
  2767   0008DA  6E71               	movwf	(??_menuLoop+4)^0,c
  2768   0008DC  506E               	movf	(??_menuLoop+1)^0,w,c
  2769   0008DE  0A80               	xorlw	128
  2770   0008E0  5871               	subwfb	(??_menuLoop+4)^0,w,c
  2771   0008E2  B0D8               	btfsc	status,0,c
  2772   0008E4  0012               	return	
  2773                           
  2774                           ;Menu.c: 397:                         displayPos++;
  2775   0008E6  2A40               	incf	_displayPos^0,f,c
  2776   0008E8  D5DC               	goto	u4780
  2777   0008EA                     l5418:
  2778   0008EA  EC47  F00F         	call	_getJoystickUp	;wreg free
  2779   0008EE  0900               	iorlw	0
  2780   0008F0  B4D8               	btfsc	status,2,c
  2781   0008F2  D005               	goto	l5426
  2782                           
  2783                           ;Menu.c: 401:                     if(displayPos > 0){
  2784   0008F4  5040               	movf	_displayPos^0,w,c
  2785   0008F6  B4D8               	btfsc	status,2,c
  2786   0008F8  0012               	return	
  2787                           
  2788                           ;Menu.c: 402:                         displayPos--;
  2789   0008FA  0640               	decf	_displayPos^0,f,c
  2790   0008FC  D5D2               	goto	u4780
  2791   0008FE                     l5426:
  2792   0008FE  503C               	movf	_tmpPortChar^0,w,c
  2793   000900  B4D8               	btfsc	status,2,c
  2794   000902  0012               	return	
  2795                           
  2796                           ;Menu.c: 406:                     if(TI_GetTics(timer) >= 4000){
  2797   000904  5052               	movf	_timer^0,w,c
  2798   000906  EC05  F00D         	call	_TI_GetTics
  2799   00090A  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2800   00090C  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2801   00090E  E106               	bnz	u5300
  2802   000910  0EA0               	movlw	160
  2803   000912  5C53               	subwf	?_TI_GetTics^0,w,c
  2804   000914  0E0F               	movlw	15
  2805   000916  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2806   000918  A0D8               	btfss	status,0,c
  2807   00091A  0012               	return	
  2808   00091C                     u5300:
  2809                           
  2810                           ;Menu.c: 407:                         resetDisplay(5);
  2811   00091C  0E05               	movlw	5
  2812   00091E  ECE8  F00E         	call	_resetDisplay
  2813                           
  2814                           ;Menu.c: 408:                         scroll = (scroll + 1)%22;
  2815   000922  0E01               	movlw	1
  2816   000924  2425               	addwf	_scroll^0,w,c
  2817   000926  6E53               	movwf	___awmod@dividend^0,c
  2818   000928  0E00               	movlw	0
  2819   00092A  2026               	addwfc	(_scroll+1)^0,w,c
  2820   00092C  6E54               	movwf	(___awmod@dividend+1)^0,c
  2821   00092E  0E00               	movlw	0
  2822   000930  6E56               	movwf	(___awmod@divisor+1)^0,c
  2823   000932  0E16               	movlw	22
  2824   000934  6E55               	movwf	___awmod@divisor^0,c
  2825   000936  EC37  F00C         	call	___awmod	;wreg free
  2826   00093A  C053  F025         	movff	?___awmod,_scroll
  2827   00093E  C054  F026         	movff	?___awmod+1,_scroll+1
  2828                           
  2829                           ;Menu.c: 409:                         skipState = 0;
  2830   000942  0E00               	movlw	0
  2831   000944  6E3E               	movwf	_skipState^0,c
  2832                           
  2833                           ;Menu.c: 410:                         TI_ResetTics(timer);
  2834   000946  5052               	movf	_timer^0,w,c
  2835   000948  EC59  F00E         	call	_TI_ResetTics
  2836   00094C  0012               	return	
  2837   00094E                     l5438:
  2838                           
  2839                           ;Menu.c: 418:             lcdAddString(&ENDCOMMUNICATION);
  2840   00094E  0ED1               	movlw	low _ENDCOMMUNICATION
  2841   000950  6E6A               	movwf	lcdAddString@string^0,c
  2842   000952  6A6B               	clrf	(lcdAddString@string+1)^0,c
  2843   000954  EC17  F00E         	call	_lcdAddString	;wreg free
  2844                           
  2845                           ;Menu.c: 419:             if(rowIndex == 1){
  2846   000958  0442               	decf	_rowIndex^0,w,c
  2847   00095A  A4D8               	btfss	status,2,c
  2848   00095C  0012               	return	
  2849                           
  2850                           ;Menu.c: 420:                 index = 0;
  2851   00095E  0E00               	movlw	0
  2852   000960  6E3F               	movwf	_index^0,c
  2853                           
  2854                           ;Menu.c: 421:                 state = 101;
  2855   000962  0E65               	movlw	101
  2856   000964  6E3D               	movwf	_state@Menu$F788^0,c
  2857   000966  0012               	return	
  2858   000968                     l5444:
  2859                           
  2860                           ;Menu.c: 425:             LcCursorOn();
  2861   000968  ECEA  F00F         	call	_LcCursorOn	;wreg free
  2862                           
  2863                           ;Menu.c: 426:             state = 102;
  2864   00096C  0E66               	movlw	102
  2865   00096E  6E3D               	movwf	_state@Menu$F788^0,c
  2866                           
  2867                           ;Menu.c: 427:             break;
  2868   000970  0012               	return	
  2869   000972                     l5448:
  2870                           
  2871                           ;Menu.c: 429:             LcGotoXY(8,0);
  2872   000972  0E00               	movlw	0
  2873   000974  6E61               	movwf	LcGotoXY@Row^0,c
  2874   000976  0E08               	movlw	8
  2875   000978  EC4B  F00A         	call	_LcGotoXY
  2876                           
  2877                           ;Menu.c: 430:             state = 103;
  2878   00097C  0E67               	movlw	103
  2879   00097E  6E3D               	movwf	_state@Menu$F788^0,c
  2880                           
  2881                           ;Menu.c: 431:             break;
  2882   000980  0012               	return	
  2883   000982                     l5452:
  2884                           
  2885                           ;Menu.c: 433:             LcCursorOff();
  2886   000982  ECF0  F00F         	call	_LcCursorOff	;wreg free
  2887                           
  2888                           ;Menu.c: 434:             state = 104;
  2889   000986  0E68               	movlw	104
  2890   000988  6E3D               	movwf	_state@Menu$F788^0,c
  2891                           
  2892                           ;Menu.c: 435:             break;
  2893   00098A  0012               	return	
  2894   00098C                     l5456:
  2895                           
  2896                           ;Menu.c: 438:             LcPutChar(portName[index]);
  2897   00098C  503F               	movf	_index^0,w,c
  2898   00098E  0F19               	addlw	low _portName
  2899   000990  6ED9               	movwf	fsr2l,c
  2900   000992  6ADA               	clrf	fsr2h,c
  2901   000994  50DF               	movf	indf2,w,c
  2902   000996  EC83  F00B         	call	_LcPutChar
  2903                           
  2904                           ;Menu.c: 439:             index++;
  2905   00099A  2A3F               	incf	_index^0,f,c
  2906                           
  2907                           ;Menu.c: 440:             if(index == 3){
  2908   00099C  0E03               	movlw	3
  2909   00099E  183F               	xorwf	_index^0,w,c
  2910   0009A0  A4D8               	btfss	status,2,c
  2911   0009A2  0012               	return	
  2912                           
  2913                           ;Menu.c: 441:                 state = 105;
  2914   0009A4  0E69               	movlw	105
  2915   0009A6  6E3D               	movwf	_state@Menu$F788^0,c
  2916   0009A8  0012               	return	
  2917   0009AA                     l5464:
  2918                           
  2919                           ;Menu.c: 445:             LcPutChar('!');
  2920   0009AA  0E21               	movlw	33
  2921   0009AC  EC83  F00B         	call	_LcPutChar
  2922                           
  2923                           ;Menu.c: 446:             TI_ResetTics(timer);
  2924   0009B0  5052               	movf	_timer^0,w,c
  2925   0009B2  EC59  F00E         	call	_TI_ResetTics
  2926                           
  2927                           ;Menu.c: 447:             state = 106;
  2928   0009B6  0E6A               	movlw	106
  2929   0009B8  6E3D               	movwf	_state@Menu$F788^0,c
  2930                           
  2931                           ;Menu.c: 448:             break;
  2932   0009BA  0012               	return	
  2933   0009BC                     l5468:
  2934                           
  2935                           ;Menu.c: 450:             if(TI_GetTics(timer) >= 4000*2){
  2936   0009BC  5052               	movf	_timer^0,w,c
  2937   0009BE  EC05  F00D         	call	_TI_GetTics
  2938   0009C2  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2939   0009C4  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2940   0009C6  E106               	bnz	u5330
  2941   0009C8  0E40               	movlw	64
  2942   0009CA  5C53               	subwf	?_TI_GetTics^0,w,c
  2943   0009CC  0E1F               	movlw	31
  2944   0009CE  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2945   0009D0  A0D8               	btfss	status,0,c
  2946   0009D2  0012               	return	
  2947   0009D4                     u5330:
  2948   0009D4  D4A9               	goto	u4580
  2949   0009D6                     l5472:
  2950                           
  2951                           ;Menu.c: 457:             lcdAddString(&ERRORMESSAGES);
  2952   0009D6  0E4B               	movlw	low _ERRORMESSAGES
  2953   0009D8  6E6A               	movwf	lcdAddString@string^0,c
  2954   0009DA  0E01               	movlw	high _ERRORMESSAGES
  2955   0009DC  6E6B               	movwf	(lcdAddString@string+1)^0,c
  2956   0009DE  EC17  F00E         	call	_lcdAddString	;wreg free
  2957                           
  2958                           ;Menu.c: 458:             if(rowIndex == 1){
  2959   0009E2  0442               	decf	_rowIndex^0,w,c
  2960   0009E4  A4D8               	btfss	status,2,c
  2961   0009E6  0012               	return	
  2962                           
  2963                           ;Menu.c: 459:                 TI_ResetTics(timer);
  2964   0009E8  5052               	movf	_timer^0,w,c
  2965   0009EA  EC59  F00E         	call	_TI_ResetTics
  2966                           
  2967                           ;Menu.c: 460:                 state = 151;
  2968   0009EE  0E97               	movlw	151
  2969   0009F0  6E3D               	movwf	_state@Menu$F788^0,c
  2970   0009F2  0012               	return	
  2971   0009F4                     l5480:
  2972                           
  2973                           ;Menu.c: 464:             if(TI_GetTics(timer) >= 4000*3){
  2974   0009F4  5052               	movf	_timer^0,w,c
  2975   0009F6  EC05  F00D         	call	_TI_GetTics
  2976   0009FA  5056               	movf	(?_TI_GetTics+3)^0,w,c
  2977   0009FC  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  2978   0009FE  E106               	bnz	u5350
  2979   000A00  0EE0               	movlw	224
  2980   000A02  5C53               	subwf	?_TI_GetTics^0,w,c
  2981   000A04  0E2E               	movlw	46
  2982   000A06  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  2983   000A08  A0D8               	btfss	status,0,c
  2984   000A0A  0012               	return	
  2985   000A0C                     u5350:
  2986                           
  2987                           ;Menu.c: 465:                 TI_ResetTics(timer);
  2988   000A0C  5052               	movf	_timer^0,w,c
  2989   000A0E  EC59  F00E         	call	_TI_ResetTics
  2990                           
  2991                           ;Menu.c: 466:                 refreshDisplay();
  2992   000A12  EC6D  F00E         	call	_refreshDisplay	;wreg free
  2993   000A16  0012               	return	
  2994   000A18                     l5486:
  2995   000A18  503D               	movf	_state@Menu$F788^0,w,c
  2996   000A1A  6E6D               	movwf	??_menuLoop^0,c
  2997   000A1C  6A6E               	clrf	(??_menuLoop+1)^0,c
  2998                           
  2999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3000                           ; Switch size 1, requested type "simple"
  3001                           ; Number of cases is 1, Range of values is 0 to 0
  3002                           ; switch strategies available:
  3003                           ; Name         Instructions Cycles
  3004                           ; simple_byte            4     3 (average)
  3005                           ;	Chosen strategy is simple_byte
  3006   000A1E  506E               	movf	(??_menuLoop+1)^0,w,c
  3007   000A20  0A00               	xorlw	0	; case 0
  3008   000A22  A4D8               	btfss	status,2,c
  3009   000A24  0012               	return	
  3010                           
  3011                           ; Switch size 1, requested type "simple"
  3012                           ; Number of cases is 46, Range of values is 0 to 151
  3013                           ; switch strategies available:
  3014                           ; Name         Instructions Cycles
  3015                           ; simple_byte          139    70 (average)
  3016                           ;	Chosen strategy is simple_byte
  3017   000A26  506D               	movf	??_menuLoop^0,w,c
  3018   000A28  0A00               	xorlw	0	; case 0
  3019   000A2A  B4D8               	btfsc	status,2,c
  3020   000A2C  D451               	goto	l5018
  3021   000A2E  0A01               	xorlw	1	; case 1
  3022   000A30  B4D8               	btfsc	status,2,c
  3023   000A32  D469               	goto	l5038
  3024   000A34  0A03               	xorlw	3	; case 2
  3025   000A36  B4D8               	btfsc	status,2,c
  3026   000A38  D474               	goto	l5046
  3027   000A3A  0A01               	xorlw	1	; case 3
  3028   000A3C  B4D8               	btfsc	status,2,c
  3029   000A3E  D4A8               	goto	l5076
  3030   000A40  0A07               	xorlw	7	; case 4
  3031   000A42  B4D8               	btfsc	status,2,c
  3032   000A44  D4B7               	goto	l5086
  3033   000A46  0A01               	xorlw	1	; case 5
  3034   000A48  B4D8               	btfsc	status,2,c
  3035   000A4A  D4B8               	goto	l5090
  3036   000A4C  0A02               	xorlw	2	; case 7
  3037   000A4E  B4D8               	btfsc	status,2,c
  3038   000A50  D4D7               	goto	l5114
  3039   000A52  0A0F               	xorlw	15	; case 8
  3040   000A54  B4D8               	btfsc	status,2,c
  3041   000A56  D4F5               	goto	l5134
  3042   000A58  0A01               	xorlw	1	; case 9
  3043   000A5A  B4D8               	btfsc	status,2,c
  3044   000A5C  D501               	goto	l5140
  3045   000A5E  0A03               	xorlw	3	; case 10
  3046   000A60  B4D8               	btfsc	status,2,c
  3047   000A62  D509               	goto	l5146
  3048   000A64  0A01               	xorlw	1	; case 11
  3049   000A66  B4D8               	btfsc	status,2,c
  3050   000A68  D518               	goto	l5154
  3051   000A6A  0A1F               	xorlw	31	; case 20
  3052   000A6C  B4D8               	btfsc	status,2,c
  3053   000A6E  D52D               	goto	l5166
  3054   000A70  0A01               	xorlw	1	; case 21
  3055   000A72  B4D8               	btfsc	status,2,c
  3056   000A74  D539               	goto	l5176
  3057   000A76  0A03               	xorlw	3	; case 22
  3058   000A78  B4D8               	btfsc	status,2,c
  3059   000A7A  D579               	goto	l5212
  3060   000A7C  0A01               	xorlw	1	; case 23
  3061   000A7E  B4D8               	btfsc	status,2,c
  3062   000A80  D584               	goto	l5222
  3063   000A82  0A0F               	xorlw	15	; case 24
  3064   000A84  B4D8               	btfsc	status,2,c
  3065   000A86  D436               	goto	l5032
  3066   000A88  0A06               	xorlw	6	; case 30
  3067   000A8A  B4D8               	btfsc	status,2,c
  3068   000A8C  D59E               	goto	l5234
  3069   000A8E  0A01               	xorlw	1	; case 31
  3070   000A90  B4D8               	btfsc	status,2,c
  3071   000A92  D5AC               	goto	l5244
  3072   000A94  0A37               	xorlw	55	; case 40
  3073   000A96  B4D8               	btfsc	status,2,c
  3074   000A98  D5C3               	goto	l5254
  3075   000A9A  0A01               	xorlw	1	; case 41
  3076   000A9C  B4D8               	btfsc	status,2,c
  3077   000A9E  D5CD               	goto	l5260
  3078   000AA0  0A03               	xorlw	3	; case 42
  3079   000AA2  B4D8               	btfsc	status,2,c
  3080   000AA4  D5D5               	goto	l5266
  3081   000AA6  0A01               	xorlw	1	; case 43
  3082   000AA8  B4D8               	btfsc	status,2,c
  3083   000AAA  D5D7               	goto	l5270
  3084   000AAC  0A07               	xorlw	7	; case 44
  3085   000AAE  B4D8               	btfsc	status,2,c
  3086   000AB0  D5DE               	goto	l5276
  3087   000AB2  0A01               	xorlw	1	; case 45
  3088   000AB4  B4D8               	btfsc	status,2,c
  3089   000AB6  D5E9               	goto	l5286
  3090   000AB8  0A1F               	xorlw	31	; case 50
  3091   000ABA  B4D8               	btfsc	status,2,c
  3092   000ABC  D607               	goto	l5300
  3093   000ABE  0A01               	xorlw	1	; case 51
  3094   000AC0  B4D8               	btfsc	status,2,c
  3095   000AC2  D637               	goto	l5310
  3096   000AC4  0A0F               	xorlw	15	; case 60
  3097   000AC6  B4D8               	btfsc	status,2,c
  3098   000AC8  D64A               	goto	l5320
  3099   000ACA  0A01               	xorlw	1	; case 61
  3100   000ACC  B4D8               	btfsc	status,2,c
  3101   000ACE  D656               	goto	l5326
  3102   000AD0  0A03               	xorlw	3	; case 62
  3103   000AD2  B4D8               	btfsc	status,2,c
  3104   000AD4  D659               	goto	l5330
  3105   000AD6  0A78               	xorlw	120	; case 70
  3106   000AD8  B4D8               	btfsc	status,2,c
  3107   000ADA  D660               	goto	l5338
  3108   000ADC  0A01               	xorlw	1	; case 71
  3109   000ADE  B4D8               	btfsc	status,2,c
  3110   000AE0  D668               	goto	l5344
  3111   000AE2  0A0F               	xorlw	15	; case 72
  3112   000AE4  B4D8               	btfsc	status,2,c
  3113   000AE6  D670               	goto	l5350
  3114   000AE8  0A01               	xorlw	1	; case 73
  3115   000AEA  B4D8               	btfsc	status,2,c
  3116   000AEC  D67D               	goto	l5358
  3117   000AEE  0A1D               	xorlw	29	; case 84
  3118   000AF0  B4D8               	btfsc	status,2,c
  3119   000AF2  D682               	goto	l5362
  3120   000AF4  0A01               	xorlw	1	; case 85
  3121   000AF6  B4D8               	btfsc	status,2,c
  3122   000AF8  D694               	goto	l5372
  3123   000AFA  0A0F               	xorlw	15	; case 90
  3124   000AFC  B4D8               	btfsc	status,2,c
  3125   000AFE  D6B4               	goto	l5392
  3126   000B00  0A01               	xorlw	1	; case 91
  3127   000B02  B4D8               	btfsc	status,2,c
  3128   000B04  D6C1               	goto	l5400
  3129   000B06  0A3F               	xorlw	63	; case 100
  3130   000B08  B4D8               	btfsc	status,2,c
  3131   000B0A  D721               	goto	l5438
  3132   000B0C  0A01               	xorlw	1	; case 101
  3133   000B0E  B4D8               	btfsc	status,2,c
  3134   000B10  D72B               	goto	l5444
  3135   000B12  0A03               	xorlw	3	; case 102
  3136   000B14  B4D8               	btfsc	status,2,c
  3137   000B16  D72D               	goto	l5448
  3138   000B18  0A01               	xorlw	1	; case 103
  3139   000B1A  B4D8               	btfsc	status,2,c
  3140   000B1C  D732               	goto	l5452
  3141   000B1E  0A0F               	xorlw	15	; case 104
  3142   000B20  B4D8               	btfsc	status,2,c
  3143   000B22  D734               	goto	l5456
  3144   000B24  0A01               	xorlw	1	; case 105
  3145   000B26  B4D8               	btfsc	status,2,c
  3146   000B28  D740               	goto	l5464
  3147   000B2A  0A03               	xorlw	3	; case 106
  3148   000B2C  B4D8               	btfsc	status,2,c
  3149   000B2E  D746               	goto	l5468
  3150   000B30  0AFC               	xorlw	252	; case 150
  3151   000B32  B4D8               	btfsc	status,2,c
  3152   000B34  D750               	goto	l5472
  3153   000B36  0A01               	xorlw	1	; case 151
  3154   000B38  A4D8               	btfss	status,2,c
  3155   000B3A  0012               	return	
  3156   000B3C  D75B               	goto	l5480
  3157   000B3E                     __end_of_menuLoop:
  3158                           	callstack 0
  3159                           
  3160 ;; *************** function _sendTimestamp *****************
  3161 ;; Defined at:
  3162 ;;		line 239 in file "EEPROM.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMRAM   BANK0   BANK1
  3176 ;;      Params:         0       0       0
  3177 ;;      Locals:         0       0       0
  3178 ;;      Temps:          0       0       0
  3179 ;;      Totals:         0       0       0
  3180 ;;Total ram usage:        0 bytes
  3181 ;; Hardware stack levels used: 1
  3182 ;; Hardware stack levels required when called: 2
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_menuLoop
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text5
  3191   000026                     __ptext5:
  3192                           	callstack 0
  3193   000026                     _sendTimestamp:
  3194                           	callstack 27
  3195                           
  3196                           ;EEPROM.c: 240:     state = 2;
  3197                           
  3198                           ;incstack = 0
  3199   000026  0E02               	movlw	2
  3200   000028  6E2E               	movwf	_state@EEPROM$F1543^0,c
  3201   00002A  0012               	return		;funcret
  3202   00002C                     __end_of_sendTimestamp:
  3203                           	callstack 0
  3204                           
  3205 ;; *************** function _sendIndex *****************
  3206 ;; Defined at:
  3207 ;;		line 247 in file "EEPROM.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  indexPositio    1    wreg     unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  indexPositio    1    0[COMRAM] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      void 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1
  3221 ;;      Params:         0       0       0
  3222 ;;      Locals:         1       0       0
  3223 ;;      Temps:          0       0       0
  3224 ;;      Totals:         1       0       0
  3225 ;;Total ram usage:        1 bytes
  3226 ;; Hardware stack levels used: 1
  3227 ;; Hardware stack levels required when called: 2
  3228 ;; This function calls:
  3229 ;;		Nothing
  3230 ;; This function is called by:
  3231 ;;		_menuLoop
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text6
  3236   001F8C                     __ptext6:
  3237                           	callstack 0
  3238   001F8C                     _sendIndex:
  3239                           	callstack 27
  3240                           
  3241                           ;incstack = 0
  3242                           ;sendIndex@indexPosition stored from wreg
  3243   001F8C  6E53               	movwf	sendIndex@indexPosition^0,c
  3244                           
  3245                           ;EEPROM.c: 248:     indexTemp = indexPosition;
  3246   001F8E  C053  F02D         	movff	sendIndex@indexPosition,_indexTemp
  3247                           
  3248                           ;EEPROM.c: 249:     state = 30;
  3249   001F92  0E1E               	movlw	30
  3250   001F94  6E2E               	movwf	_state@EEPROM$F1543^0,c
  3251   001F96  0012               	return		;funcret
  3252   001F98                     __end_of_sendIndex:
  3253                           	callstack 0
  3254                           
  3255 ;; *************** function _saveIndex *****************
  3256 ;; Defined at:
  3257 ;;		line 243 in file "EEPROM.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1
  3271 ;;      Params:         0       0       0
  3272 ;;      Locals:         0       0       0
  3273 ;;      Temps:          0       0       0
  3274 ;;      Totals:         0       0       0
  3275 ;;Total ram usage:        0 bytes
  3276 ;; Hardware stack levels used: 1
  3277 ;; Hardware stack levels required when called: 2
  3278 ;; This function calls:
  3279 ;;		Nothing
  3280 ;; This function is called by:
  3281 ;;		_menuLoop
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text7
  3286   00002C                     __ptext7:
  3287                           	callstack 0
  3288   00002C                     _saveIndex:
  3289                           	callstack 27
  3290                           
  3291                           ;EEPROM.c: 244:     state = 10;
  3292                           
  3293                           ;incstack = 0
  3294   00002C  0E0A               	movlw	10
  3295   00002E  6E2E               	movwf	_state@EEPROM$F1543^0,c
  3296   000030  0012               	return		;funcret
  3297   000032                     __end_of_saveIndex:
  3298                           	callstack 0
  3299                           
  3300 ;; *************** function _refreshDisplay *****************
  3301 ;; Defined at:
  3302 ;;		line 511 in file "Menu.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1
  3316 ;;      Params:         0       0       0
  3317 ;;      Locals:         0       0       0
  3318 ;;      Temps:          0       0       0
  3319 ;;      Totals:         0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used: 1
  3322 ;; Hardware stack levels required when called: 6
  3323 ;; This function calls:
  3324 ;;		_resetDisplay
  3325 ;; This function is called by:
  3326 ;;		_menuLoop
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text8
  3331   001CDA                     __ptext8:
  3332                           	callstack 0
  3333   001CDA                     _refreshDisplay:
  3334                           	callstack 23
  3335                           
  3336                           ;Menu.c: 512:     if(tmpPortChar){
  3337                           
  3338                           ;incstack = 0
  3339   001CDA  503C               	movf	_tmpPortChar^0,w,c
  3340   001CDC  B4D8               	btfsc	status,2,c
  3341   001CDE  D004               	goto	l3656
  3342                           
  3343                           ;Menu.c: 513:         resetDisplay(5);
  3344   001CE0  0E05               	movlw	5
  3345   001CE2  ECE8  F00E         	call	_resetDisplay
  3346                           
  3347                           ;Menu.c: 514:     }else{
  3348   001CE6  D003               	goto	l3658
  3349   001CE8                     l3656:
  3350                           
  3351                           ;Menu.c: 515:         resetDisplay(61);
  3352   001CE8  0E3D               	movlw	61
  3353   001CEA  ECE8  F00E         	call	_resetDisplay
  3354   001CEE                     l3658:
  3355                           
  3356                           ;Menu.c: 517:     scroll = 0;
  3357   001CEE  0E00               	movlw	0
  3358   001CF0  6E26               	movwf	(_scroll+1)^0,c
  3359   001CF2  0E00               	movlw	0
  3360   001CF4  6E25               	movwf	_scroll^0,c
  3361                           
  3362                           ;Menu.c: 518:     skipState = 0;
  3363   001CF6  0E00               	movlw	0
  3364   001CF8  6E3E               	movwf	_skipState^0,c
  3365                           
  3366                           ;Menu.c: 519:     index = 0;
  3367   001CFA  0E00               	movlw	0
  3368   001CFC  6E3F               	movwf	_index^0,c
  3369   001CFE  0012               	return		;funcret
  3370   001D00                     __end_of_refreshDisplay:
  3371                           	callstack 0
  3372                           
  3373 ;; *************** function _resetDisplay *****************
  3374 ;; Defined at:
  3375 ;;		line 472 in file "Menu.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  stg             1    wreg     unsigned char 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  stg             1   21[COMRAM] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1
  3389 ;;      Params:         0       0       0
  3390 ;;      Locals:         1       0       0
  3391 ;;      Temps:          0       0       0
  3392 ;;      Totals:         1       0       0
  3393 ;;Total ram usage:        1 bytes
  3394 ;; Hardware stack levels used: 1
  3395 ;; Hardware stack levels required when called: 5
  3396 ;; This function calls:
  3397 ;;		_LcClear
  3398 ;;		_goToWaitState
  3399 ;; This function is called by:
  3400 ;;		_menuLoop
  3401 ;;		_refreshDisplay
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text9
  3406   001DD0                     __ptext9:
  3407                           	callstack 0
  3408   001DD0                     _resetDisplay:
  3409                           	callstack 24
  3410                           
  3411                           ;incstack = 0
  3412                           ;resetDisplay@stg stored from wreg
  3413   001DD0  6E68               	movwf	resetDisplay@stg^0,c
  3414                           
  3415                           ;Menu.c: 473:     LcClear();
  3416   001DD2  ECC8  F00E         	call	_LcClear	;wreg free
  3417                           
  3418                           ;Menu.c: 474:     colIndex = rowIndex = 0;
  3419   001DD6  0E00               	movlw	0
  3420   001DD8  6E42               	movwf	_rowIndex^0,c
  3421   001DDA  C042  F041         	movff	_rowIndex,_colIndex
  3422                           
  3423                           ;Menu.c: 475:     scrollIndex = 0;
  3424   001DDE  0E00               	movlw	0
  3425   001DE0  6E24               	movwf	(_scrollIndex+1)^0,c
  3426   001DE2  0E00               	movlw	0
  3427   001DE4  6E23               	movwf	_scrollIndex^0,c
  3428                           
  3429                           ;Menu.c: 476:     goToWaitState(stg);
  3430   001DE6  5068               	movf	resetDisplay@stg^0,w,c
  3431   001DE8  ECA0  F00F         	call	_goToWaitState
  3432   001DEC  0012               	return		;funcret
  3433   001DEE                     __end_of_resetDisplay:
  3434                           	callstack 0
  3435                           
  3436 ;; *************** function _goToWaitState *****************
  3437 ;; Defined at:
  3438 ;;		line 522 in file "Menu.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  stg             1    wreg     unsigned char 
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;  stg             1    0[COMRAM] unsigned char 
  3443 ;; Return value:  Size  Location     Type
  3444 ;;                  1    wreg      void 
  3445 ;; Registers used:
  3446 ;;		wreg, status,2
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMRAM   BANK0   BANK1
  3452 ;;      Params:         0       0       0
  3453 ;;      Locals:         1       0       0
  3454 ;;      Temps:          0       0       0
  3455 ;;      Totals:         1       0       0
  3456 ;;Total ram usage:        1 bytes
  3457 ;; Hardware stack levels used: 1
  3458 ;; Hardware stack levels required when called: 2
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_menuLoop
  3463 ;;		_resetDisplay
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text10
  3468   001F40                     __ptext10:
  3469                           	callstack 0
  3470   001F40                     _goToWaitState:
  3471                           	callstack 26
  3472                           
  3473                           ;incstack = 0
  3474                           ;goToWaitState@stg stored from wreg
  3475   001F40  6E53               	movwf	goToWaitState@stg^0,c
  3476                           
  3477                           ;Menu.c: 523:     stateToGo = stg;
  3478   001F42  C053  F03A         	movff	goToWaitState@stg,_stateToGo
  3479                           
  3480                           ;Menu.c: 524:     state = 24;
  3481   001F46  0E18               	movlw	24
  3482   001F48  6E3D               	movwf	_state@Menu$F788^0,c
  3483                           
  3484                           ;Menu.c: 525:     waitState = 0;
  3485   001F4A  0E00               	movlw	0
  3486   001F4C  6E3B               	movwf	_waitState^0,c
  3487   001F4E  0012               	return		;funcret
  3488   001F50                     __end_of_goToWaitState:
  3489                           	callstack 0
  3490                           
  3491 ;; *************** function _LcClear *****************
  3492 ;; Defined at:
  3493 ;;		line 113 in file "LcTLCD.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1
  3507 ;;      Params:         0       0       0
  3508 ;;      Locals:         0       0       0
  3509 ;;      Temps:          0       0       0
  3510 ;;      Totals:         0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; Hardware stack levels required when called: 4
  3514 ;; This function calls:
  3515 ;;		_CantaIR
  3516 ;;		_Espera
  3517 ;;		_WaitForBusy
  3518 ;; This function is called by:
  3519 ;;		_resetDisplay
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text11
  3524   001D90                     __ptext11:
  3525                           	callstack 0
  3526   001D90                     _LcClear:
  3527                           	callstack 24
  3528                           
  3529                           ;LcTLCD.c: 116:  WaitForBusy(); CantaIR(0x01);
  3530                           
  3531                           ;incstack = 0
  3532   001D90  EC74  F00D         	call	_WaitForBusy	;wreg free
  3533   001D94  0E01               	movlw	1
  3534   001D96  ECE6  F00D         	call	_CantaIR
  3535                           
  3536                           ;LcTLCD.c: 117:  Espera(Timer, 12);
  3537   001D9A  0E00               	movlw	0
  3538   001D9C  6E61               	movwf	(Espera@Timer+1)^0,c
  3539   001D9E  0E00               	movlw	0
  3540   001DA0  6E60               	movwf	Espera@Timer^0,c
  3541   001DA2  0E00               	movlw	0
  3542   001DA4  6E63               	movwf	(Espera@ms+1)^0,c
  3543   001DA6  0E0C               	movlw	12
  3544   001DA8  6E62               	movwf	Espera@ms^0,c
  3545   001DAA  ECB3  F00D         	call	_Espera	;wreg free
  3546   001DAE  0012               	return		;funcret
  3547   001DB0                     __end_of_LcClear:
  3548                           	callstack 0
  3549                           
  3550 ;; *************** function _lcdAddString *****************
  3551 ;; Defined at:
  3552 ;;		line 479 in file "Menu.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  string          2   23[COMRAM] PTR unsigned char 
  3555 ;;		 -> ERRORMESSAGES(20), ENDCOMMUNICATION(11), PLAYRECORDINGS(12), STARTRECORDING(14), 
  3556 ;;		 -> CURRENTTIME(14), MODIFYTIME(13), PORTNAMEMENU(12), 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1
  3568 ;;      Params:         2       0       0
  3569 ;;      Locals:         0       0       0
  3570 ;;      Temps:          0       0       0
  3571 ;;      Totals:         2       0       0
  3572 ;;Total ram usage:        2 bytes
  3573 ;; Hardware stack levels used: 1
  3574 ;; Hardware stack levels required when called: 6
  3575 ;; This function calls:
  3576 ;;		_LcPutChar
  3577 ;;		_moveOneRow
  3578 ;; This function is called by:
  3579 ;;		_menuLoop
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text12
  3584   001C2E                     __ptext12:
  3585                           	callstack 0
  3586   001C2E                     _lcdAddString:
  3587                           	callstack 23
  3588                           
  3589                           ;Menu.c: 480:     if(string[colIndex] != '\0'){
  3590                           
  3591                           ;incstack = 0
  3592   001C2E  5041               	movf	_colIndex^0,w,c
  3593   001C30  246A               	addwf	lcdAddString@string^0,w,c
  3594   001C32  6ED9               	movwf	fsr2l,c
  3595   001C34  0E00               	movlw	0
  3596   001C36  206B               	addwfc	(lcdAddString@string+1)^0,w,c
  3597   001C38  6EDA               	movwf	fsr2h,c
  3598   001C3A  50DF               	movf	indf2,w,c
  3599   001C3C  B4D8               	btfsc	status,2,c
  3600   001C3E  D00B               	goto	l5014
  3601                           
  3602                           ;Menu.c: 481:         LcPutChar(string[colIndex]);
  3603   001C40  5041               	movf	_colIndex^0,w,c
  3604   001C42  246A               	addwf	lcdAddString@string^0,w,c
  3605   001C44  6ED9               	movwf	fsr2l,c
  3606   001C46  0E00               	movlw	0
  3607   001C48  206B               	addwfc	(lcdAddString@string+1)^0,w,c
  3608   001C4A  6EDA               	movwf	fsr2h,c
  3609   001C4C  50DF               	movf	indf2,w,c
  3610   001C4E  EC83  F00B         	call	_LcPutChar
  3611                           
  3612                           ;Menu.c: 482:         colIndex++;
  3613   001C52  2A41               	incf	_colIndex^0,f,c
  3614                           
  3615                           ;Menu.c: 483:     }else{
  3616   001C54  0012               	return	
  3617   001C56                     l5014:
  3618                           
  3619                           ;Menu.c: 484:         moveOneRow();
  3620   001C56  EC21  F00F         	call	_moveOneRow	;wreg free
  3621   001C5A  0012               	return		;funcret
  3622   001C5C                     __end_of_lcdAddString:
  3623                           	callstack 0
  3624                           
  3625 ;; *************** function _joystickIdle *****************
  3626 ;; Defined at:
  3627 ;;		line 79 in file "Joystick.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, status,2
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1
  3641 ;;      Params:         0       0       0
  3642 ;;      Locals:         0       0       0
  3643 ;;      Temps:          0       0       0
  3644 ;;      Totals:         0       0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used: 1
  3647 ;; Hardware stack levels required when called: 2
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_menuLoop
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text13
  3656   001F98                     __ptext13:
  3657                           	callstack 0
  3658   001F98                     _joystickIdle:
  3659                           	callstack 27
  3660                           
  3661                           ;Joystick.c: 80:     ADCON0bits.CHS0 = 0;
  3662                           
  3663                           ;incstack = 0
  3664   001F98  94C2               	bcf	194,2,c	;volatile
  3665                           
  3666                           ;Joystick.c: 81:     ADCON0bits.CHS1 = 0;
  3667   001F9A  96C2               	bcf	194,3,c	;volatile
  3668                           
  3669                           ;Joystick.c: 82:     ADCON0bits.CHS2 = 1;
  3670   001F9C  88C2               	bsf	194,4,c	;volatile
  3671                           
  3672                           ;Joystick.c: 83:     state = 4;
  3673   001F9E  0E04               	movlw	4
  3674   001FA0  6E4B               	movwf	_state^0,c
  3675   001FA2  0012               	return		;funcret
  3676   001FA4                     __end_of_joystickIdle:
  3677                           	callstack 0
  3678                           
  3679 ;; *************** function _joystickAlive *****************
  3680 ;; Defined at:
  3681 ;;		line 86 in file "Joystick.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1
  3695 ;;      Params:         0       0       0
  3696 ;;      Locals:         0       0       0
  3697 ;;      Temps:          0       0       0
  3698 ;;      Totals:         0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used: 1
  3701 ;; Hardware stack levels required when called: 2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_menuLoop
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text14
  3710   001FA4                     __ptext14:
  3711                           	callstack 0
  3712   001FA4                     _joystickAlive:
  3713                           	callstack 27
  3714                           
  3715                           ;Joystick.c: 87:     ADCON0bits.CHS0 = 1;
  3716                           
  3717                           ;incstack = 0
  3718   001FA4  84C2               	bsf	194,2,c	;volatile
  3719                           
  3720                           ;Joystick.c: 88:     ADCON0bits.CHS1 = 0;
  3721   001FA6  96C2               	bcf	194,3,c	;volatile
  3722                           
  3723                           ;Joystick.c: 89:     ADCON0bits.CHS2 = 0;
  3724   001FA8  98C2               	bcf	194,4,c	;volatile
  3725                           
  3726                           ;Joystick.c: 90:     state = 0;
  3727   001FAA  0E00               	movlw	0
  3728   001FAC  6E4B               	movwf	_state^0,c
  3729   001FAE  0012               	return		;funcret
  3730   001FB0                     __end_of_joystickAlive:
  3731                           	callstack 0
  3732                           
  3733 ;; *************** function _isPressed *****************
  3734 ;; Defined at:
  3735 ;;		line 164 in file "Keypad.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      unsigned char 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1
  3749 ;;      Params:         0       0       0
  3750 ;;      Locals:         1       0       0
  3751 ;;      Temps:          0       0       0
  3752 ;;      Totals:         1       0       0
  3753 ;;Total ram usage:        1 bytes
  3754 ;; Hardware stack levels used: 1
  3755 ;; Hardware stack levels required when called: 2
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_menuLoop
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           	psect	text15
  3764   001E76                     __ptext15:
  3765                           	callstack 0
  3766   001E76                     _isPressed:
  3767                           	callstack 27
  3768                           
  3769                           ;Keypad.c: 166:  return keyPressed && (stateSMS == 1);
  3770                           
  3771                           ;incstack = 0
  3772   001E76  0E00               	movlw	0
  3773   001E78  6E53               	movwf	_isPressed$1194^0,c
  3774   001E7A  5030               	movf	_keyPressed^0,w,c
  3775   001E7C  B4D8               	btfsc	status,2,c
  3776   001E7E  D005               	goto	l760
  3777   001E80  0433               	decf	_stateSMS^0,w,c
  3778   001E82  A4D8               	btfss	status,2,c
  3779   001E84  D002               	goto	l760
  3780   001E86  0E01               	movlw	1
  3781   001E88  6E53               	movwf	_isPressed$1194^0,c
  3782   001E8A                     l760:
  3783   001E8A  5053               	movf	_isPressed$1194^0,w,c
  3784   001E8C  0012               	return		;funcret
  3785   001E8E                     __end_of_isPressed:
  3786                           	callstack 0
  3787                           
  3788 ;; *************** function _isNextKey *****************
  3789 ;; Defined at:
  3790 ;;		line 211 in file "Keypad.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      unsigned char 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1
  3804 ;;      Params:         0       0       0
  3805 ;;      Locals:         0       0       0
  3806 ;;      Temps:          0       0       0
  3807 ;;      Totals:         0       0       0
  3808 ;;Total ram usage:        0 bytes
  3809 ;; Hardware stack levels used: 1
  3810 ;; Hardware stack levels required when called: 2
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_menuLoop
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text16
  3819   000038                     __ptext16:
  3820                           	callstack 0
  3821   000038                     _isNextKey:
  3822                           	callstack 27
  3823                           
  3824                           ;Keypad.c: 212:     return nextKey;
  3825                           
  3826                           ;incstack = 0
  3827   000038  5035               	movf	_nextKey^0,w,c
  3828   00003A  0012               	return		;funcret
  3829   00003C                     __end_of_isNextKey:
  3830                           	callstack 0
  3831                           
  3832 ;; *************** function _isIdle *****************
  3833 ;; Defined at:
  3834 ;;		line 235 in file "EEPROM.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      unsigned char 
  3841 ;; Registers used:
  3842 ;;		wreg, status,2
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1
  3848 ;;      Params:         0       0       0
  3849 ;;      Locals:         0       0       0
  3850 ;;      Temps:          0       0       0
  3851 ;;      Totals:         0       0       0
  3852 ;;Total ram usage:        0 bytes
  3853 ;; Hardware stack levels used: 1
  3854 ;; Hardware stack levels required when called: 2
  3855 ;; This function calls:
  3856 ;;		Nothing
  3857 ;; This function is called by:
  3858 ;;		_menuLoop
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text17
  3863   001F70                     __ptext17:
  3864                           	callstack 0
  3865   001F70                     _isIdle:
  3866                           	callstack 27
  3867                           
  3868                           ;EEPROM.c: 236:     return state == 0;
  3869                           
  3870                           ;incstack = 0
  3871   001F70  502E               	movf	_state@EEPROM$F1543^0,w,c
  3872   001F72  A4D8               	btfss	status,2,c
  3873   001F74  D002               	goto	u2880
  3874   001F76  0E01               	movlw	1
  3875   001F78  0012               	return	
  3876   001F7A                     u2880:
  3877   001F7A  0E00               	movlw	0
  3878   001F7C  0012               	return		;funcret
  3879   001F7E                     __end_of_isIdle:
  3880                           	callstack 0
  3881                           
  3882 ;; *************** function _getNumRecordings *****************
  3883 ;; Defined at:
  3884 ;;		line 252 in file "EEPROM.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      unsigned char 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1
  3898 ;;      Params:         0       0       0
  3899 ;;      Locals:         2       0       0
  3900 ;;      Temps:          0       0       0
  3901 ;;      Totals:         2       0       0
  3902 ;;Total ram usage:        2 bytes
  3903 ;; Hardware stack levels used: 1
  3904 ;; Hardware stack levels required when called: 2
  3905 ;; This function calls:
  3906 ;;		Nothing
  3907 ;; This function is called by:
  3908 ;;		_menuLoop
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text18
  3913   001E28                     __ptext18:
  3914                           	callstack 0
  3915   001E28                     _getNumRecordings:
  3916                           	callstack 27
  3917                           
  3918                           ;EEPROM.c: 253:     return (indexEEPROM > 8? 8 : indexEEPROM);
  3919                           
  3920                           ;incstack = 0
  3921   001E28  0E09               	movlw	9
  3922   001E2A  602C               	cpfslt	_indexEEPROM^0,c
  3923   001E2C  D004               	goto	l3688
  3924   001E2E  C02C  F053         	movff	_indexEEPROM,_getNumRecordings$1580
  3925   001E32  6A54               	clrf	(_getNumRecordings$1580+1)^0,c
  3926   001E34  D004               	goto	l978
  3927   001E36                     l3688:
  3928   001E36  0E00               	movlw	0
  3929   001E38  6E54               	movwf	(_getNumRecordings$1580+1)^0,c
  3930   001E3A  0E08               	movlw	8
  3931   001E3C  6E53               	movwf	_getNumRecordings$1580^0,c
  3932   001E3E                     l978:
  3933   001E3E  5053               	movf	_getNumRecordings$1580^0,w,c
  3934   001E40  0012               	return		;funcret
  3935   001E42                     __end_of_getNumRecordings:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _getJoystickUp *****************
  3939 ;; Defined at:
  3940 ;;		line 75 in file "Joystick.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      unsigned char 
  3947 ;; Registers used:
  3948 ;;		wreg, status,2
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1
  3954 ;;      Params:         0       0       0
  3955 ;;      Locals:         1       0       0
  3956 ;;      Temps:          0       0       0
  3957 ;;      Totals:         1       0       0
  3958 ;;Total ram usage:        1 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 2
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_menuLoop
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text19
  3969   001E8E                     __ptext19:
  3970                           	callstack 0
  3971   001E8E                     _getJoystickUp:
  3972                           	callstack 27
  3973                           
  3974                           ;Joystick.c: 76:     return hasMoved && direction == 0;
  3975                           
  3976                           ;incstack = 0
  3977   001E8E  0E00               	movlw	0
  3978   001E90  6E53               	movwf	_getJoystickUp$269^0,c
  3979   001E92  5049               	movf	_hasMoved^0,w,c
  3980   001E94  B4D8               	btfsc	status,2,c
  3981   001E96  D005               	goto	l102
  3982   001E98  504A               	movf	_direction^0,w,c
  3983   001E9A  A4D8               	btfss	status,2,c
  3984   001E9C  D002               	goto	l102
  3985   001E9E  0E01               	movlw	1
  3986   001EA0  6E53               	movwf	_getJoystickUp$269^0,c
  3987   001EA2                     l102:
  3988   001EA2  5053               	movf	_getJoystickUp$269^0,w,c
  3989   001EA4  0012               	return		;funcret
  3990   001EA6                     __end_of_getJoystickUp:
  3991                           	callstack 0
  3992                           
  3993 ;; *************** function _getJoystickDown *****************
  3994 ;; Defined at:
  3995 ;;		line 71 in file "Joystick.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;		None
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;		None
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      unsigned char 
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1
  4009 ;;      Params:         0       0       0
  4010 ;;      Locals:         1       0       0
  4011 ;;      Temps:          0       0       0
  4012 ;;      Totals:         1       0       0
  4013 ;;Total ram usage:        1 bytes
  4014 ;; Hardware stack levels used: 1
  4015 ;; Hardware stack levels required when called: 2
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_menuLoop
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text20
  4024   001EA6                     __ptext20:
  4025                           	callstack 0
  4026   001EA6                     _getJoystickDown:
  4027                           	callstack 27
  4028                           
  4029                           ;Joystick.c: 72:     return hasMoved && direction == 1;
  4030                           
  4031                           ;incstack = 0
  4032   001EA6  0E00               	movlw	0
  4033   001EA8  6E53               	movwf	_getJoystickDown$267^0,c
  4034   001EAA  5049               	movf	_hasMoved^0,w,c
  4035   001EAC  B4D8               	btfsc	status,2,c
  4036   001EAE  D005               	goto	l97
  4037   001EB0  044A               	decf	_direction^0,w,c
  4038   001EB2  A4D8               	btfss	status,2,c
  4039   001EB4  D002               	goto	l97
  4040   001EB6  0E01               	movlw	1
  4041   001EB8  6E53               	movwf	_getJoystickDown$267^0,c
  4042   001EBA                     l97:
  4043   001EBA  5053               	movf	_getJoystickDown$267^0,w,c
  4044   001EBC  0012               	return		;funcret
  4045   001EBE                     __end_of_getJoystickDown:
  4046                           	callstack 0
  4047                           
  4048 ;; *************** function _getColumnAct *****************
  4049 ;; Defined at:
  4050 ;;		line 290 in file "LcTLCD.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;		None
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;		None
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      unsigned char 
  4057 ;; Registers used:
  4058 ;;		wreg, status,2
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1
  4064 ;;      Params:         0       0       0
  4065 ;;      Locals:         0       0       0
  4066 ;;      Temps:          0       0       0
  4067 ;;      Totals:         0       0       0
  4068 ;;Total ram usage:        0 bytes
  4069 ;; Hardware stack levels used: 1
  4070 ;; Hardware stack levels required when called: 2
  4071 ;; This function calls:
  4072 ;;		Nothing
  4073 ;; This function is called by:
  4074 ;;		_menuLoop
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text21
  4079   00003C                     __ptext21:
  4080                           	callstack 0
  4081   00003C                     _getColumnAct:
  4082                           	callstack 27
  4083                           
  4084                           ;LcTLCD.c: 291:     return ColumnAct;
  4085                           
  4086                           ;incstack = 0
  4087   00003C  5043               	movf	_ColumnAct^0,w,c
  4088   00003E  0012               	return		;funcret
  4089   000040                     __end_of_getColumnAct:
  4090                           	callstack 0
  4091                           
  4092 ;; *************** function _getCharacter *****************
  4093 ;; Defined at:
  4094 ;;		line 186 in file "Keypad.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;  digit           1    5[COMRAM] unsigned char 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      unsigned char 
  4101 ;; Registers used:
  4102 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1
  4108 ;;      Params:         0       0       0
  4109 ;;      Locals:         1       0       0
  4110 ;;      Temps:          2       0       0
  4111 ;;      Totals:         3       0       0
  4112 ;;Total ram usage:        3 bytes
  4113 ;; Hardware stack levels used: 1
  4114 ;; Hardware stack levels required when called: 4
  4115 ;; This function calls:
  4116 ;;		_getDigitValue
  4117 ;; This function is called by:
  4118 ;;		_menuLoop
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text22
  4123   001318                     __ptext22:
  4124                           	callstack 0
  4125   001318                     _getCharacter:
  4126                           	callstack 25
  4127                           
  4128                           ;Keypad.c: 187:     char digit = getDigitValue();
  4129                           
  4130                           ;incstack = 0
  4131   001318  ECF7  F00E         	call	_getDigitValue	;wreg free
  4132   00131C  6E58               	movwf	getCharacter@digit^0,c
  4133                           
  4134                           ;Keypad.c: 188:     if ((digit - '0' >= 2 && digit - '0' <= 9) || (digit - '0' == 0)){
  4135   00131E  0ED0               	movlw	208
  4136   001320  2458               	addwf	getCharacter@digit^0,w,c
  4137   001322  6E56               	movwf	??_getCharacter^0,c
  4138   001324  6A57               	clrf	(??_getCharacter+1)^0,c
  4139   001326  0EFF               	movlw	255
  4140   001328  2257               	addwfc	(??_getCharacter+1)^0,f,c
  4141   00132A  5057               	movf	(??_getCharacter+1)^0,w,c
  4142   00132C  E104               	bnz	u2750
  4143   00132E  0E02               	movlw	2
  4144   001330  5C56               	subwf	??_getCharacter^0,w,c
  4145   001332  A0D8               	btfss	status,0,c
  4146   001334  D00C               	goto	u2760
  4147   001336                     u2750:
  4148   001336  0ED0               	movlw	208
  4149   001338  2458               	addwf	getCharacter@digit^0,w,c
  4150   00133A  6E56               	movwf	??_getCharacter^0,c
  4151   00133C  6A57               	clrf	(??_getCharacter+1)^0,c
  4152   00133E  0EFF               	movlw	255
  4153   001340  2257               	addwfc	(??_getCharacter+1)^0,f,c
  4154   001342  5057               	movf	(??_getCharacter+1)^0,w,c
  4155   001344  E104               	bnz	u2760
  4156   001346  0E0A               	movlw	10
  4157   001348  5C56               	subwf	??_getCharacter^0,w,c
  4158   00134A  A0D8               	btfss	status,0,c
  4159   00134C  D00A               	goto	u2770
  4160   00134E                     u2760:
  4161   00134E  0ED0               	movlw	208
  4162   001350  2458               	addwf	getCharacter@digit^0,w,c
  4163   001352  6E56               	movwf	??_getCharacter^0,c
  4164   001354  6A57               	clrf	(??_getCharacter+1)^0,c
  4165   001356  0EFF               	movlw	255
  4166   001358  2257               	addwfc	(??_getCharacter+1)^0,f,c
  4167   00135A  5056               	movf	??_getCharacter^0,w,c
  4168   00135C  1057               	iorwf	(??_getCharacter+1)^0,w,c
  4169   00135E  A4D8               	btfss	status,2,c
  4170   001360  D03C               	goto	l3612
  4171   001362                     u2770:
  4172                           
  4173                           ;Keypad.c: 189:         if(digit - '0' == 0){
  4174   001362  0ED0               	movlw	208
  4175   001364  2458               	addwf	getCharacter@digit^0,w,c
  4176   001366  6E56               	movwf	??_getCharacter^0,c
  4177   001368  6A57               	clrf	(??_getCharacter+1)^0,c
  4178   00136A  0EFF               	movlw	255
  4179   00136C  2257               	addwfc	(??_getCharacter+1)^0,f,c
  4180   00136E  5056               	movf	??_getCharacter^0,w,c
  4181   001370  1057               	iorwf	(??_getCharacter+1)^0,w,c
  4182   001372  A4D8               	btfss	status,2,c
  4183   001374  D010               	goto	l3604
  4184                           
  4185                           ;Keypad.c: 190:             if(numPressed > 2){
  4186   001376  0E02               	movlw	2
  4187   001378  642F               	cpfsgt	_numPressed^0,c
  4188   00137A  D002               	goto	l3590
  4189                           
  4190                           ;Keypad.c: 191:                 numPressed = 1;
  4191   00137C  0E01               	movlw	1
  4192   00137E  6E2F               	movwf	_numPressed^0,c
  4193   001380                     l3590:
  4194                           
  4195                           ;Keypad.c: 193:             if(numPressed == 1){
  4196   001380  042F               	decf	_numPressed^0,w,c
  4197   001382  A4D8               	btfss	status,2,c
  4198   001384  D002               	goto	l3598
  4199                           
  4200                           ;Keypad.c: 194:                 return ' ';
  4201   001386  0E20               	movlw	32
  4202   001388  0012               	return	
  4203   00138A                     l3598:
  4204   00138A  0E02               	movlw	2
  4205   00138C  182F               	xorwf	_numPressed^0,w,c
  4206   00138E  A4D8               	btfss	status,2,c
  4207   001390  D015               	goto	l3608
  4208                           
  4209                           ;Keypad.c: 196:                 return '0';
  4210   001392  0E30               	movlw	48
  4211   001394  0012               	return	
  4212   001396                     l3604:
  4213   001396  5058               	movf	getCharacter@digit^0,w,c
  4214   001398  0D06               	mullw	6
  4215   00139A  50F3               	movf	243,w,c
  4216   00139C  0F97               	addlw	low _SMSVALUES
  4217   00139E  242F               	addwf	_numPressed^0,w,c
  4218   0013A0  6E56               	movwf	??_getCharacter^0,c
  4219   0013A2  0ED9               	movlw	217
  4220   0013A4  2656               	addwf	??_getCharacter^0,f,c
  4221   0013A6  C056  FFF6         	movff	??_getCharacter,tblptrl
  4222   0013AA                     	if	1	;There is more than 1 active tblptr byte
  4223   0013AA  0E02               	movlw	high __smallconst
  4224   0013AC  6EF7               	movwf	tblptrh,c
  4225   0013AE                     	endif
  4226   0013AE                     	if	0	;tblptru may be non-zero
  4227   0013AE                     	endif
  4228   0013AE                     	if	0	;tblptru may be non-zero
  4229   0013AE                     	endif
  4230   0013AE  0008               	tblrd		*
  4231   0013B0  50F5               	movf	tablat,w,c
  4232   0013B2  0900               	iorlw	0
  4233   0013B4  A4D8               	btfss	status,2,c
  4234   0013B6  D002               	goto	l3608
  4235                           
  4236                           ;Keypad.c: 199:             numPressed = 1;
  4237   0013B8  0E01               	movlw	1
  4238   0013BA  6E2F               	movwf	_numPressed^0,c
  4239   0013BC                     l3608:
  4240                           
  4241                           ;Keypad.c: 201:         return SMSVALUES[digit - '0' - 1][(numPressed-1)];
  4242   0013BC  5058               	movf	getCharacter@digit^0,w,c
  4243   0013BE  0D06               	mullw	6
  4244   0013C0  50F3               	movf	243,w,c
  4245   0013C2  0F97               	addlw	low _SMSVALUES
  4246   0013C4  242F               	addwf	_numPressed^0,w,c
  4247   0013C6  6E56               	movwf	??_getCharacter^0,c
  4248   0013C8  0ED9               	movlw	217
  4249   0013CA  2656               	addwf	??_getCharacter^0,f,c
  4250   0013CC  C056  FFF6         	movff	??_getCharacter,tblptrl
  4251   0013D0                     	if	1	;There is more than 1 active tblptr byte
  4252   0013D0  0E02               	movlw	high __smallconst
  4253   0013D2  6EF7               	movwf	tblptrh,c
  4254   0013D4                     	endif
  4255   0013D4                     	if	0	;tblptru may be non-zero
  4256   0013D4                     	endif
  4257   0013D4                     	if	0	;tblptru may be non-zero
  4258   0013D4                     	endif
  4259   0013D4  0008               	tblrd		*
  4260   0013D6  50F5               	movf	tablat,w,c
  4261   0013D8  0012               	return	
  4262   0013DA                     l3612:
  4263                           
  4264                           ;Keypad.c: 203:     return digit;
  4265   0013DA  5058               	movf	getCharacter@digit^0,w,c
  4266   0013DC  0012               	return		;funcret
  4267   0013DE                     __end_of_getCharacter:
  4268                           	callstack 0
  4269                           
  4270 ;; *************** function _getDigitValue *****************
  4271 ;; Defined at:
  4272 ;;		line 206 in file "Keypad.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      unsigned char 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1
  4286 ;;      Params:         0       0       0
  4287 ;;      Locals:         0       0       0
  4288 ;;      Temps:          1       0       0
  4289 ;;      Totals:         1       0       0
  4290 ;;Total ram usage:        1 bytes
  4291 ;; Hardware stack levels used: 1
  4292 ;; Hardware stack levels required when called: 3
  4293 ;; This function calls:
  4294 ;;		_getColumn
  4295 ;; This function is called by:
  4296 ;;		_menuLoop
  4297 ;;		_smsLoop
  4298 ;;		_getCharacter
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text23
  4303   001DEE                     __ptext23:
  4304                           	callstack 0
  4305   001DEE                     _getDigitValue:
  4306                           	callstack 26
  4307                           
  4308                           ;Keypad.c: 207:     return DIGITVALUES[(row*3)+getColumn()];
  4309                           
  4310                           ;incstack = 0
  4311   001DEE  EC80  F00E         	call	_getColumn	;wreg free
  4312   001DF2  5021               	movf	_row^0,w,c
  4313   001DF4  0D03               	mullw	3
  4314   001DF6  50F3               	movf	243,w,c
  4315   001DF8  0F01               	addlw	low _DIGITVALUES
  4316   001DFA  2453               	addwf	?_getColumn^0,w,c
  4317   001DFC  6E55               	movwf	??_getDigitValue^0,c
  4318   001DFE  C055  FFF6         	movff	??_getDigitValue,tblptrl
  4319   001E02                     	if	1	;There is more than 1 active tblptr byte
  4320   001E02  0E02               	movlw	high __smallconst
  4321   001E04  6EF7               	movwf	tblptrh,c
  4322   001E06                     	endif
  4323   001E06                     	if	0	;tblptru may be non-zero
  4324   001E06                     	endif
  4325   001E06                     	if	0	;tblptru may be non-zero
  4326   001E06                     	endif
  4327   001E06  0008               	tblrd		*
  4328   001E08  50F5               	movf	tablat,w,c
  4329   001E0A  0012               	return		;funcret
  4330   001E0C                     __end_of_getDigitValue:
  4331                           	callstack 0
  4332                           
  4333 ;; *************** function _getColumn *****************
  4334 ;; Defined at:
  4335 ;;		line 169 in file "Keypad.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2    0[COMRAM] int 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1
  4349 ;;      Params:         2       0       0
  4350 ;;      Locals:         0       0       0
  4351 ;;      Temps:          0       0       0
  4352 ;;      Totals:         2       0       0
  4353 ;;Total ram usage:        2 bytes
  4354 ;; Hardware stack levels used: 1
  4355 ;; Hardware stack levels required when called: 2
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_getDigitValue
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text24
  4364   001D00                     __ptext24:
  4365                           	callstack 0
  4366   001D00                     _getColumn:
  4367                           	callstack 26
  4368                           
  4369                           ;Keypad.c: 170:     if (!PORTBbits.RB3){ return 0;}
  4370                           
  4371                           ;incstack = 0
  4372   001D00  B681               	btfsc	129,3,c	;volatile
  4373   001D02  D005               	goto	l764
  4374   001D04  0E00               	movlw	0
  4375   001D06  6E54               	movwf	(?_getColumn+1)^0,c
  4376   001D08  0E00               	movlw	0
  4377   001D0A  6E53               	movwf	?_getColumn^0,c
  4378   001D0C  0012               	return	
  4379   001D0E                     l764:
  4380                           
  4381                           ;Keypad.c: 171:     if (!PORTBbits.RB1){ return 1;}
  4382   001D0E  B281               	btfsc	129,1,c	;volatile
  4383   001D10  D005               	goto	l3444
  4384   001D12  0E00               	movlw	0
  4385   001D14  6E54               	movwf	(?_getColumn+1)^0,c
  4386   001D16  0E01               	movlw	1
  4387   001D18  6E53               	movwf	?_getColumn^0,c
  4388   001D1A  0012               	return	
  4389   001D1C                     l3444:
  4390                           
  4391                           ;Keypad.c: 172:     return 2;
  4392   001D1C  0E00               	movlw	0
  4393   001D1E  6E54               	movwf	(?_getColumn+1)^0,c
  4394   001D20  0E02               	movlw	2
  4395   001D22  6E53               	movwf	?_getColumn^0,c
  4396   001D24  0012               	return		;funcret
  4397   001D26                     __end_of_getColumn:
  4398                           	callstack 0
  4399                           
  4400 ;; *************** function _displayRecordings *****************
  4401 ;; Defined at:
  4402 ;;		line 229 in file "EEPROM.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  indexPositio    1    wreg     unsigned char 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  indexPositio    1    0[COMRAM] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1
  4416 ;;      Params:         0       0       0
  4417 ;;      Locals:         1       0       0
  4418 ;;      Temps:          0       0       0
  4419 ;;      Totals:         1       0       0
  4420 ;;Total ram usage:        1 bytes
  4421 ;; Hardware stack levels used: 1
  4422 ;; Hardware stack levels required when called: 2
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_menuLoop
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text25
  4431   001F50                     __ptext25:
  4432                           	callstack 0
  4433   001F50                     _displayRecordings:
  4434                           	callstack 27
  4435                           
  4436                           ;incstack = 0
  4437                           ;displayRecordings@indexPosition stored from wreg
  4438   001F50  6E53               	movwf	displayRecordings@indexPosition^0,c
  4439                           
  4440                           ;EEPROM.c: 230:     indexTemp = indexPosition;
  4441   001F52  C053  F02D         	movff	displayRecordings@indexPosition,_indexTemp
  4442                           
  4443                           ;EEPROM.c: 231:     data = 0;
  4444   001F56  0E00               	movlw	0
  4445   001F58  6E2B               	movwf	_data^0,c
  4446                           
  4447                           ;EEPROM.c: 232:     state = 50;
  4448   001F5A  0E32               	movlw	50
  4449   001F5C  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4450   001F5E  0012               	return		;funcret
  4451   001F60                     __end_of_displayRecordings:
  4452                           	callstack 0
  4453                           
  4454 ;; *************** function _displayMenu *****************
  4455 ;; Defined at:
  4456 ;;		line 489 in file "Menu.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  string          1   23[COMRAM] PTR unsigned char 
  4459 ;;		 -> MAINMENU(138), 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1
  4471 ;;      Params:         1       0       0
  4472 ;;      Locals:         0       0       0
  4473 ;;      Temps:          2       0       0
  4474 ;;      Totals:         3       0       0
  4475 ;;Total ram usage:        3 bytes
  4476 ;; Hardware stack levels used: 1
  4477 ;; Hardware stack levels required when called: 6
  4478 ;; This function calls:
  4479 ;;		_LcPutChar
  4480 ;;		_moveOneRow
  4481 ;; This function is called by:
  4482 ;;		_menuLoop
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text26
  4487   0017FE                     __ptext26:
  4488                           	callstack 0
  4489   0017FE                     _displayMenu:
  4490                           	callstack 23
  4491                           
  4492                           ;Menu.c: 490:     if(scrollIndex < 16){
  4493                           
  4494                           ;incstack = 0
  4495   0017FE  BE24               	btfsc	(_scrollIndex+1)^0,7,c
  4496   001800  D006               	goto	u2830
  4497   001802  5024               	movf	(_scrollIndex+1)^0,w,c
  4498   001804  E131               	bnz	l3628
  4499   001806  0E10               	movlw	16
  4500   001808  5C23               	subwf	_scrollIndex^0,w,c
  4501   00180A  B0D8               	btfsc	status,0,c
  4502   00180C  D02D               	goto	l3628
  4503   00180E                     u2830:
  4504                           
  4505                           ;Menu.c: 491:         if((scrollIndex + scroll) >= 22) {
  4506   00180E  5025               	movf	_scroll^0,w,c
  4507   001810  2423               	addwf	_scrollIndex^0,w,c
  4508   001812  6E6B               	movwf	??_displayMenu^0,c
  4509   001814  5026               	movf	(_scroll+1)^0,w,c
  4510   001816  2024               	addwfc	(_scrollIndex+1)^0,w,c
  4511   001818  6E6C               	movwf	(??_displayMenu+1)^0,c
  4512   00181A  BE6C               	btfsc	(??_displayMenu+1)^0,7,c
  4513   00181C  D015               	goto	l3622
  4514   00181E  506C               	movf	(??_displayMenu+1)^0,w,c
  4515   001820  E104               	bnz	u2840
  4516   001822  0E16               	movlw	22
  4517   001824  5C6B               	subwf	??_displayMenu^0,w,c
  4518   001826  A0D8               	btfss	status,0,c
  4519   001828  D00F               	goto	l3622
  4520   00182A                     u2840:
  4521                           
  4522                           ;Menu.c: 492:             LcPutChar(string[(scrollIndex + scroll) - 22]);
  4523   00182A  506A               	movf	displayMenu@string^0,w,c
  4524   00182C  2423               	addwf	_scrollIndex^0,w,c
  4525   00182E  2425               	addwf	_scroll^0,w,c
  4526   001830  6E6B               	movwf	??_displayMenu^0,c
  4527   001832  0EEA               	movlw	234
  4528   001834  266B               	addwf	??_displayMenu^0,f,c
  4529   001836  C06B  FFF6         	movff	??_displayMenu,tblptrl
  4530   00183A                     	if	1	;There is more than 1 active tblptr byte
  4531   00183A  0E02               	movlw	high __smallconst
  4532   00183C  6EF7               	movwf	tblptrh,c
  4533   00183E                     	endif
  4534   00183E                     	if	0	;tblptru may be non-zero
  4535   00183E                     	endif
  4536   00183E                     	if	0	;tblptru may be non-zero
  4537   00183E                     	endif
  4538   00183E  0008               	tblrd		*
  4539   001840  50F5               	movf	tablat,w,c
  4540   001842  EC83  F00B         	call	_LcPutChar
  4541                           
  4542                           ;Menu.c: 493:         } else {
  4543   001846  D00C               	goto	l3624
  4544   001848                     l3622:
  4545                           
  4546                           ;Menu.c: 494:             LcPutChar(string[(scrollIndex + scroll)]);
  4547   001848  506A               	movf	displayMenu@string^0,w,c
  4548   00184A  2423               	addwf	_scrollIndex^0,w,c
  4549   00184C  2425               	addwf	_scroll^0,w,c
  4550   00184E  6E6B               	movwf	??_displayMenu^0,c
  4551   001850  C06B  FFF6         	movff	??_displayMenu,tblptrl
  4552   001854                     	if	1	;There is more than 1 active tblptr byte
  4553   001854  0E02               	movlw	high __smallconst
  4554   001856  6EF7               	movwf	tblptrh,c
  4555   001858                     	endif
  4556   001858                     	if	0	;tblptru may be non-zero
  4557   001858                     	endif
  4558   001858                     	if	0	;tblptru may be non-zero
  4559   001858                     	endif
  4560   001858  0008               	tblrd		*
  4561   00185A  50F5               	movf	tablat,w,c
  4562   00185C  EC83  F00B         	call	_LcPutChar
  4563   001860                     l3624:
  4564                           
  4565                           ;Menu.c: 496:         colIndex++;
  4566   001860  2A41               	incf	_colIndex^0,f,c
  4567                           
  4568                           ;Menu.c: 497:         scrollIndex++;
  4569   001862  4A23               	infsnz	_scrollIndex^0,f,c
  4570   001864  2A24               	incf	(_scrollIndex+1)^0,f,c
  4571                           
  4572                           ;Menu.c: 498:     }else{
  4573   001866  0012               	return	
  4574   001868                     l3628:
  4575                           
  4576                           ;Menu.c: 499:         moveOneRow();
  4577   001868  EC21  F00F         	call	_moveOneRow	;wreg free
  4578   00186C  0012               	return		;funcret
  4579   00186E                     __end_of_displayMenu:
  4580                           	callstack 0
  4581                           
  4582 ;; *************** function _moveOneRow *****************
  4583 ;; Defined at:
  4584 ;;		line 503 in file "Menu.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;		None
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;		None
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1
  4598 ;;      Params:         0       0       0
  4599 ;;      Locals:         0       0       0
  4600 ;;      Temps:          0       0       0
  4601 ;;      Totals:         0       0       0
  4602 ;;Total ram usage:        0 bytes
  4603 ;; Hardware stack levels used: 1
  4604 ;; Hardware stack levels required when called: 5
  4605 ;; This function calls:
  4606 ;;		_LcGotoXY
  4607 ;; This function is called by:
  4608 ;;		_lcdAddString
  4609 ;;		_displayMenu
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text27
  4614   001E42                     __ptext27:
  4615                           	callstack 0
  4616   001E42                     _moveOneRow:
  4617                           	callstack 23
  4618                           
  4619                           ;Menu.c: 504:     rowIndex++;
  4620                           
  4621                           ;incstack = 0
  4622   001E42  2A42               	incf	_rowIndex^0,f,c
  4623                           
  4624                           ;Menu.c: 505:     LcGotoXY(0,1);
  4625   001E44  0E01               	movlw	1
  4626   001E46  6E61               	movwf	LcGotoXY@Row^0,c
  4627   001E48  0E00               	movlw	0
  4628   001E4A  EC4B  F00A         	call	_LcGotoXY
  4629                           
  4630                           ;Menu.c: 506:     colIndex = 0;
  4631   001E4E  0E00               	movlw	0
  4632   001E50  6E41               	movwf	_colIndex^0,c
  4633                           
  4634                           ;Menu.c: 507:     scrollIndex = 0;
  4635   001E52  0E00               	movlw	0
  4636   001E54  6E24               	movwf	(_scrollIndex+1)^0,c
  4637   001E56  0E00               	movlw	0
  4638   001E58  6E23               	movwf	_scrollIndex^0,c
  4639   001E5A  0012               	return		;funcret
  4640   001E5C                     __end_of_moveOneRow:
  4641                           	callstack 0
  4642                           
  4643 ;; *************** function _chargeMemory *****************
  4644 ;; Defined at:
  4645 ;;		line 256 in file "EEPROM.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg, status,2
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1
  4659 ;;      Params:         0       0       0
  4660 ;;      Locals:         0       0       0
  4661 ;;      Temps:          0       0       0
  4662 ;;      Totals:         0       0       0
  4663 ;;Total ram usage:        0 bytes
  4664 ;; Hardware stack levels used: 1
  4665 ;; Hardware stack levels required when called: 2
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_menuLoop
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text28
  4674   001FEC                     __ptext28:
  4675                           	callstack 0
  4676   001FEC                     _chargeMemory:
  4677                           	callstack 27
  4678                           
  4679                           ;EEPROM.c: 257:     indexEEPROM = 0;
  4680                           
  4681                           ;incstack = 0
  4682   001FEC  0E00               	movlw	0
  4683   001FEE  6E2C               	movwf	_indexEEPROM^0,c
  4684                           
  4685                           ;EEPROM.c: 258:     state = 40;
  4686   001FF0  0E28               	movlw	40
  4687   001FF2  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4688   001FF4  0012               	return		;funcret
  4689   001FF6                     __end_of_chargeMemory:
  4690                           	callstack 0
  4691                           
  4692 ;; *************** function ___awmod *****************
  4693 ;; Defined at:
  4694 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awmod.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  dividend        2    0[COMRAM] int 
  4697 ;;  divisor         2    2[COMRAM] int 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  sign            1    5[COMRAM] unsigned char 
  4700 ;;  counter         1    4[COMRAM] unsigned char 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  2    0[COMRAM] int 
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, status,0
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1
  4710 ;;      Params:         4       0       0
  4711 ;;      Locals:         2       0       0
  4712 ;;      Temps:          0       0       0
  4713 ;;      Totals:         6       0       0
  4714 ;;Total ram usage:        6 bytes
  4715 ;; Hardware stack levels used: 1
  4716 ;; Hardware stack levels required when called: 2
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_menuLoop
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text29
  4725   00186E                     __ptext29:
  4726                           	callstack 0
  4727   00186E                     ___awmod:
  4728                           	callstack 27
  4729                           
  4730                           ;incstack = 0
  4731   00186E  0E00               	movlw	0
  4732   001870  6E58               	movwf	___awmod@sign^0,c
  4733   001872  AE54               	btfss	(___awmod@dividend+1)^0,7,c
  4734   001874  D006               	goto	l3758
  4735   001876  6C53               	negf	___awmod@dividend^0,c
  4736   001878  1E54               	comf	(___awmod@dividend+1)^0,f,c
  4737   00187A  B0D8               	btfsc	status,0,c
  4738   00187C  2A54               	incf	(___awmod@dividend+1)^0,f,c
  4739   00187E  0E01               	movlw	1
  4740   001880  6E58               	movwf	___awmod@sign^0,c
  4741   001882                     l3758:
  4742   001882  AE56               	btfss	(___awmod@divisor+1)^0,7,c
  4743   001884  D004               	goto	l3762
  4744   001886  6C55               	negf	___awmod@divisor^0,c
  4745   001888  1E56               	comf	(___awmod@divisor+1)^0,f,c
  4746   00188A  B0D8               	btfsc	status,0,c
  4747   00188C  2A56               	incf	(___awmod@divisor+1)^0,f,c
  4748   00188E                     l3762:
  4749   00188E  5055               	movf	___awmod@divisor^0,w,c
  4750   001890  1056               	iorwf	(___awmod@divisor+1)^0,w,c
  4751   001892  B4D8               	btfsc	status,2,c
  4752   001894  D018               	goto	l3778
  4753   001896  0E01               	movlw	1
  4754   001898  6E57               	movwf	___awmod@counter^0,c
  4755   00189A  D004               	goto	l3768
  4756   00189C                     l3766:
  4757   00189C  90D8               	bcf	status,0,c
  4758   00189E  3655               	rlcf	___awmod@divisor^0,f,c
  4759   0018A0  3656               	rlcf	(___awmod@divisor+1)^0,f,c
  4760   0018A2  2A57               	incf	___awmod@counter^0,f,c
  4761   0018A4                     l3768:
  4762   0018A4  AE56               	btfss	(___awmod@divisor+1)^0,7,c
  4763   0018A6  D7FA               	goto	l3766
  4764   0018A8                     u2970:
  4765   0018A8  5055               	movf	___awmod@divisor^0,w,c
  4766   0018AA  5C53               	subwf	___awmod@dividend^0,w,c
  4767   0018AC  5056               	movf	(___awmod@divisor+1)^0,w,c
  4768   0018AE  5854               	subwfb	(___awmod@dividend+1)^0,w,c
  4769   0018B0  A0D8               	btfss	status,0,c
  4770   0018B2  D004               	goto	l3774
  4771   0018B4  5055               	movf	___awmod@divisor^0,w,c
  4772   0018B6  5E53               	subwf	___awmod@dividend^0,f,c
  4773   0018B8  5056               	movf	(___awmod@divisor+1)^0,w,c
  4774   0018BA  5A54               	subwfb	(___awmod@dividend+1)^0,f,c
  4775   0018BC                     l3774:
  4776   0018BC  90D8               	bcf	status,0,c
  4777   0018BE  3256               	rrcf	(___awmod@divisor+1)^0,f,c
  4778   0018C0  3255               	rrcf	___awmod@divisor^0,f,c
  4779   0018C2  2E57               	decfsz	___awmod@counter^0,f,c
  4780   0018C4  D7F1               	goto	u2970
  4781   0018C6                     l3778:
  4782   0018C6  5058               	movf	___awmod@sign^0,w,c
  4783   0018C8  B4D8               	btfsc	status,2,c
  4784   0018CA  D004               	goto	l3782
  4785   0018CC  6C53               	negf	___awmod@dividend^0,c
  4786   0018CE  1E54               	comf	(___awmod@dividend+1)^0,f,c
  4787   0018D0  B0D8               	btfsc	status,0,c
  4788   0018D2  2A54               	incf	(___awmod@dividend+1)^0,f,c
  4789   0018D4                     l3782:
  4790   0018D4  C053  F053         	movff	___awmod@dividend,?___awmod
  4791   0018D8  C054  F054         	movff	___awmod@dividend+1,?___awmod+1
  4792   0018DC  0012               	return		;funcret
  4793   0018DE                     __end_of___awmod:
  4794                           	callstack 0
  4795                           
  4796 ;; *************** function _memoryLoop *****************
  4797 ;; Defined at:
  4798 ;;		line 19 in file "EEPROM.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;		None
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  1    wreg      void 
  4805 ;; Registers used:
  4806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1
  4812 ;;      Params:         0       0       0
  4813 ;;      Locals:         6       0       0
  4814 ;;      Temps:          2       0       0
  4815 ;;      Totals:         8       0       0
  4816 ;;Total ram usage:        8 bytes
  4817 ;; Hardware stack levels used: 1
  4818 ;; Hardware stack levels required when called: 6
  4819 ;; This function calls:
  4820 ;;		_LcCursorOff
  4821 ;;		_LcCursorOn
  4822 ;;		_LcGotoXY
  4823 ;;		_LcPutChar
  4824 ;;		___lbdiv
  4825 ;;		___lbmod
  4826 ;;		_checkRX
  4827 ;;		_checkTX
  4828 ;;		_displayTimestamp
  4829 ;;		_finishedDisplay
  4830 ;;		_getRX
  4831 ;;		_getSysTimestamp
  4832 ;;		_readData
  4833 ;;		_saveData
  4834 ;;		_setTX
  4835 ;;		_updateSysTimestamp
  4836 ;; This function is called by:
  4837 ;;		_main
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text30
  4842   000B3E                     __ptext30:
  4843                           	callstack 0
  4844   000B3E                     _memoryLoop:
  4845                           	callstack 24
  4846                           
  4847                           ;EEPROM.c: 20:     switch(state){
  4848                           
  4849                           ;incstack = 0
  4850   000B3E  D1DF               	goto	l4336
  4851   000B40                     l4162:
  4852                           
  4853                           ;EEPROM.c: 27:             recordings[indexEEPROM%8].timestamp = getSysTimestamp();
  4854   000B40  ECFB  F00F         	call	_getSysTimestamp	;wreg free
  4855   000B44  502C               	movf	_indexEEPROM^0,w,c
  4856   000B46  0B07               	andlw	7
  4857   000B48  0D03               	mullw	3
  4858   000B4A  50F3               	movf	243,w,c
  4859   000B4C  0F02               	addlw	low (_recordings+1)
  4860   000B4E  6ED9               	movwf	fsr2l,c
  4861   000B50  6ADA               	clrf	fsr2h,c
  4862   000B52  C053  FFDE         	movff	?_getSysTimestamp,postinc2
  4863   000B56  C054  FFDD         	movff	?_getSysTimestamp+1,postdec2
  4864                           
  4865                           ;EEPROM.c: 28:             if(EECON1bits.WR == 0){
  4866   000B5A  B2A6               	btfsc	166,1,c	;volsfr
  4867   000B5C  0012               	return	
  4868                           
  4869                           ;EEPROM.c: 29:                 saveData(0x20 + indexEEPROM%8, recordings[indexEEPROM%8].
      +                          timestamp.minutes);
  4870   000B5E  502C               	movf	_indexEEPROM^0,w,c
  4871   000B60  0B07               	andlw	7
  4872   000B62  0D03               	mullw	3
  4873   000B64  50F3               	movf	243,w,c
  4874   000B66  0F02               	addlw	low (_recordings+1)
  4875   000B68  6ED9               	movwf	fsr2l,c
  4876   000B6A  6ADA               	clrf	fsr2h,c
  4877   000B6C  50DF               	movf	indf2,w,c
  4878   000B6E  6E53               	movwf	saveData@data^0,c
  4879   000B70  502C               	movf	_indexEEPROM^0,w,c
  4880   000B72  0B07               	andlw	7
  4881   000B74  0F20               	addlw	32
  4882   000B76  ECA6  F00E         	call	_saveData
  4883                           
  4884                           ;EEPROM.c: 30:                 state = 3;
  4885   000B7A  0E03               	movlw	3
  4886   000B7C  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4887   000B7E  0012               	return	
  4888   000B80                     l886:
  4889                           
  4890                           ;EEPROM.c: 34:             if(EECON1bits.WR == 0){
  4891   000B80  B2A6               	btfsc	166,1,c	;volsfr
  4892   000B82  0012               	return	
  4893                           
  4894                           ;EEPROM.c: 35:                 saveData(0x30 + indexEEPROM%8, recordings[indexEEPROM%8].
      +                          timestamp.seconds);
  4895   000B84  502C               	movf	_indexEEPROM^0,w,c
  4896   000B86  0B07               	andlw	7
  4897   000B88  0D03               	mullw	3
  4898   000B8A  50F3               	movf	243,w,c
  4899   000B8C  0F03               	addlw	low (_recordings+2)
  4900   000B8E  6ED9               	movwf	fsr2l,c
  4901   000B90  6ADA               	clrf	fsr2h,c
  4902   000B92  50DF               	movf	indf2,w,c
  4903   000B94  6E53               	movwf	saveData@data^0,c
  4904   000B96  502C               	movf	_indexEEPROM^0,w,c
  4905   000B98  0B07               	andlw	7
  4906   000B9A  0F30               	addlw	48
  4907   000B9C  ECA6  F00E         	call	_saveData
  4908                           
  4909                           ;EEPROM.c: 36:                 state = 4;
  4910   000BA0  0E04               	movlw	4
  4911   000BA2  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4912   000BA4  0012               	return	
  4913   000BA6                     l4174:
  4914                           
  4915                           ;EEPROM.c: 40:             if(checkTX( )){
  4916   000BA6  ECDE  F00F         	call	_checkTX	;wreg free
  4917   000BAA  0900               	iorlw	0
  4918   000BAC  B4D8               	btfsc	status,2,c
  4919   000BAE  0012               	return	
  4920                           
  4921                           ;EEPROM.c: 41:                 setTX(recordings[indexEEPROM%8].timestamp.minutes);
  4922   000BB0  502C               	movf	_indexEEPROM^0,w,c
  4923   000BB2  0B07               	andlw	7
  4924   000BB4  0D03               	mullw	3
  4925   000BB6  50F3               	movf	243,w,c
  4926   000BB8  0F02               	addlw	low (_recordings+1)
  4927   000BBA  6ED9               	movwf	fsr2l,c
  4928   000BBC  6ADA               	clrf	fsr2h,c
  4929   000BBE  50DF               	movf	indf2,w,c
  4930   000BC0  EC0F  F000         	call	_setTX
  4931                           
  4932                           ;EEPROM.c: 42:                 state = 5;
  4933   000BC4  0E05               	movlw	5
  4934   000BC6  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4935   000BC8  0012               	return	
  4936   000BCA                     l4180:
  4937                           
  4938                           ;EEPROM.c: 46:             if(checkTX()){
  4939   000BCA  ECDE  F00F         	call	_checkTX	;wreg free
  4940   000BCE  0900               	iorlw	0
  4941   000BD0  B4D8               	btfsc	status,2,c
  4942   000BD2  0012               	return	
  4943                           
  4944                           ;EEPROM.c: 47:                 setTX(recordings[indexEEPROM%8].timestamp.seconds);
  4945   000BD4  502C               	movf	_indexEEPROM^0,w,c
  4946   000BD6  0B07               	andlw	7
  4947   000BD8  0D03               	mullw	3
  4948   000BDA  50F3               	movf	243,w,c
  4949   000BDC  0F03               	addlw	low (_recordings+2)
  4950   000BDE  6ED9               	movwf	fsr2l,c
  4951   000BE0  6ADA               	clrf	fsr2h,c
  4952   000BE2  50DF               	movf	indf2,w,c
  4953   000BE4  EC0F  F000         	call	_setTX
  4954   000BE8                     l4184:
  4955                           
  4956                           ;EEPROM.c: 48:                 state = 0;
  4957   000BE8  0E00               	movlw	0
  4958   000BEA  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4959   000BEC  0012               	return	
  4960   000BEE                     l4186:
  4961                           
  4962                           ;EEPROM.c: 54:             if(checkRX()){
  4963   000BEE  ECE4  F00F         	call	_checkRX	;wreg free
  4964   000BF2  0900               	iorlw	0
  4965   000BF4  B4D8               	btfsc	status,2,c
  4966   000BF6  0012               	return	
  4967                           
  4968                           ;EEPROM.c: 55:                 recordings[indexEEPROM%8].index = getRX();
  4969   000BF8  502C               	movf	_indexEEPROM^0,w,c
  4970   000BFA  0B07               	andlw	7
  4971   000BFC  0D03               	mullw	3
  4972   000BFE  50F3               	movf	243,w,c
  4973   000C00  0F01               	addlw	low _recordings
  4974   000C02  6ED9               	movwf	fsr2l,c
  4975   000C04  6ADA               	clrf	fsr2h,c
  4976   000C06  EC20  F000         	call	_getRX	;wreg free
  4977   000C0A  6EDF               	movwf	indf2,c
  4978                           
  4979                           ;EEPROM.c: 56:                 state = 11;
  4980   000C0C  0E0B               	movlw	11
  4981   000C0E  6E2E               	movwf	_state@EEPROM$F1543^0,c
  4982   000C10  0012               	return	
  4983   000C12                     l894:
  4984                           
  4985                           ;EEPROM.c: 60:             if(EECON1bits.WR == 0){
  4986   000C12  B2A6               	btfsc	166,1,c	;volsfr
  4987   000C14  0012               	return	
  4988                           
  4989                           ;EEPROM.c: 61:                 saveData(0x10 + indexEEPROM%8, recordings[indexEEPROM%8].
      +                          index);
  4990   000C16  502C               	movf	_indexEEPROM^0,w,c
  4991   000C18  0B07               	andlw	7
  4992   000C1A  0D03               	mullw	3
  4993   000C1C  50F3               	movf	243,w,c
  4994   000C1E  0F01               	addlw	low _recordings
  4995   000C20  6ED9               	movwf	fsr2l,c
  4996   000C22  6ADA               	clrf	fsr2h,c
  4997   000C24  50DF               	movf	indf2,w,c
  4998   000C26  6E53               	movwf	saveData@data^0,c
  4999   000C28  502C               	movf	_indexEEPROM^0,w,c
  5000   000C2A  0B07               	andlw	7
  5001   000C2C  0F10               	addlw	16
  5002   000C2E  ECA6  F00E         	call	_saveData
  5003                           
  5004                           ;EEPROM.c: 62:                 indexEEPROM++;
  5005   000C32  2A2C               	incf	_indexEEPROM^0,f,c
  5006                           
  5007                           ;EEPROM.c: 63:                 state = 12;
  5008   000C34  0E0C               	movlw	12
  5009   000C36  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5010   000C38  0012               	return	
  5011   000C3A                     l896:
  5012                           
  5013                           ;EEPROM.c: 67:             if(EECON1bits.WR == 0){
  5014   000C3A  B2A6               	btfsc	166,1,c	;volsfr
  5015   000C3C  0012               	return	
  5016                           
  5017                           ;EEPROM.c: 68:                 saveData(0, (indexEEPROM > 8? 8 : indexEEPROM));
  5018   000C3E  0E09               	movlw	9
  5019   000C40  602C               	cpfslt	_indexEEPROM^0,c
  5020   000C42  D004               	goto	l4202
  5021   000C44  C02C  F06C         	movff	_indexEEPROM,_memoryLoop$1563
  5022   000C48  6A6D               	clrf	(_memoryLoop$1563+1)^0,c
  5023   000C4A  D004               	goto	l4204
  5024   000C4C                     l4202:
  5025   000C4C  0E00               	movlw	0
  5026   000C4E  6E6D               	movwf	(_memoryLoop$1563+1)^0,c
  5027   000C50  0E08               	movlw	8
  5028   000C52  6E6C               	movwf	_memoryLoop$1563^0,c
  5029   000C54                     l4204:
  5030   000C54  C06C  F053         	movff	_memoryLoop$1563,saveData@data
  5031   000C58  0E00               	movlw	0
  5032   000C5A  ECA6  F00E         	call	_saveData
  5033                           
  5034                           ;EEPROM.c: 69:                 state = 13;
  5035   000C5E  0E0D               	movlw	13
  5036   000C60  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5037   000C62  0012               	return	
  5038   000C64                     l902:
  5039                           
  5040                           ;EEPROM.c: 73:             if(EECON1bits.WR == 0){
  5041   000C64  B2A6               	btfsc	166,1,c	;volsfr
  5042   000C66  0012               	return	
  5043                           
  5044                           ;EEPROM.c: 74:                 if(indexEEPROM > 8){
  5045   000C68  0E08               	movlw	8
  5046   000C6A  642C               	cpfsgt	_indexEEPROM^0,c
  5047   000C6C  D008               	goto	l4212
  5048                           
  5049                           ;EEPROM.c: 75:                     saveData(1, indexEEPROM%8 + 8);
  5050   000C6E  502C               	movf	_indexEEPROM^0,w,c
  5051   000C70  0B07               	andlw	7
  5052   000C72  0F08               	addlw	8
  5053   000C74  6E53               	movwf	saveData@data^0,c
  5054   000C76  0E01               	movlw	1
  5055   000C78  ECA6  F00E         	call	_saveData
  5056                           
  5057                           ;EEPROM.c: 76:                 }else{
  5058   000C7C  D7B5               	goto	l4184
  5059   000C7E                     l4212:
  5060                           
  5061                           ;EEPROM.c: 77:                     saveData(1,indexEEPROM%8);
  5062   000C7E  502C               	movf	_indexEEPROM^0,w,c
  5063   000C80  0B07               	andlw	7
  5064   000C82  6E53               	movwf	saveData@data^0,c
  5065   000C84  0E01               	movlw	1
  5066   000C86  ECA6  F00E         	call	_saveData
  5067   000C8A  D7AE               	goto	l4184
  5068   000C8C                     l4216:
  5069                           
  5070                           ;EEPROM.c: 85:             if(recordings[indexTemp].index/10 == 0){
  5071   000C8C  0E0A               	movlw	10
  5072   000C8E  6E53               	movwf	___lbdiv@divisor^0,c
  5073   000C90  502D               	movf	_indexTemp^0,w,c
  5074   000C92  0D03               	mullw	3
  5075   000C94  50F3               	movf	243,w,c
  5076   000C96  0F01               	addlw	low _recordings
  5077   000C98  6ED9               	movwf	fsr2l,c
  5078   000C9A  6ADA               	clrf	fsr2h,c
  5079   000C9C  50DF               	movf	indf2,w,c
  5080   000C9E  EC96  F00D         	call	___lbdiv
  5081   000CA2  0900               	iorlw	0
  5082   000CA4  A4D8               	btfss	status,2,c
  5083   000CA6  D003               	goto	l4220
  5084   000CA8                     u3580:
  5085                           
  5086                           ;EEPROM.c: 86:                 state = 31;
  5087   000CA8  0E1F               	movlw	31
  5088   000CAA  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5089                           
  5090                           ;EEPROM.c: 87:             } else if(checkTX()){
  5091   000CAC  0012               	return	
  5092   000CAE                     l4220:
  5093   000CAE  ECDE  F00F         	call	_checkTX	;wreg free
  5094   000CB2  0900               	iorlw	0
  5095   000CB4  B4D8               	btfsc	status,2,c
  5096   000CB6  0012               	return	
  5097                           
  5098                           ;EEPROM.c: 88:                 setTX((recordings[indexTemp].index/10) + '0');
  5099   000CB8  0E0A               	movlw	10
  5100   000CBA  6E53               	movwf	___lbdiv@divisor^0,c
  5101   000CBC  502D               	movf	_indexTemp^0,w,c
  5102   000CBE  0D03               	mullw	3
  5103   000CC0  50F3               	movf	243,w,c
  5104   000CC2  0F01               	addlw	low _recordings
  5105   000CC4  6ED9               	movwf	fsr2l,c
  5106   000CC6  6ADA               	clrf	fsr2h,c
  5107   000CC8  50DF               	movf	indf2,w,c
  5108   000CCA  EC96  F00D         	call	___lbdiv
  5109   000CCE  0F30               	addlw	48
  5110   000CD0  EC0F  F000         	call	_setTX
  5111   000CD4  D7E9               	goto	u3580
  5112   000CD6                     l4226:
  5113                           
  5114                           ;EEPROM.c: 93:             if(checkTX()){
  5115   000CD6  ECDE  F00F         	call	_checkTX	;wreg free
  5116   000CDA  0900               	iorlw	0
  5117   000CDC  B4D8               	btfsc	status,2,c
  5118   000CDE  0012               	return	
  5119                           
  5120                           ;EEPROM.c: 94:                 setTX((recordings[indexTemp].index%10) + '0');
  5121   000CE0  0E0A               	movlw	10
  5122   000CE2  6E53               	movwf	___lbmod@divisor^0,c
  5123   000CE4  502D               	movf	_indexTemp^0,w,c
  5124   000CE6  0D03               	mullw	3
  5125   000CE8  50F3               	movf	243,w,c
  5126   000CEA  0F01               	addlw	low _recordings
  5127   000CEC  6ED9               	movwf	fsr2l,c
  5128   000CEE  6ADA               	clrf	fsr2h,c
  5129   000CF0  50DF               	movf	indf2,w,c
  5130   000CF2  EC44  F00E         	call	___lbmod
  5131   000CF6  0F30               	addlw	48
  5132   000CF8  EC0F  F000         	call	_setTX
  5133                           
  5134                           ;EEPROM.c: 95:                 state = 32;
  5135   000CFC  0E20               	movlw	32
  5136   000CFE  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5137   000D00  0012               	return	
  5138   000D02                     l4232:
  5139                           
  5140                           ;EEPROM.c: 99:             if(checkTX()){
  5141   000D02  ECDE  F00F         	call	_checkTX	;wreg free
  5142   000D06  0900               	iorlw	0
  5143   000D08  B4D8               	btfsc	status,2,c
  5144   000D0A  0012               	return	
  5145                           
  5146                           ;EEPROM.c: 100:                 setTX('\0');
  5147   000D0C  0E00               	movlw	0
  5148   000D0E  EC0F  F000         	call	_setTX
  5149   000D12  D76A               	goto	l4184
  5150   000D14                     l914:
  5151                           
  5152                           ;EEPROM.c: 107:             if(EECON1bits.RD == 0){
  5153   000D14  B0A6               	btfsc	166,0,c	;volsfr
  5154   000D16  0012               	return	
  5155                           
  5156                           ;EEPROM.c: 108:                 indexTemp = readData(0);
  5157   000D18  0E00               	movlw	0
  5158   000D1A  ECB0  F00F         	call	_readData
  5159   000D1E  6E2D               	movwf	_indexTemp^0,c
  5160                           
  5161                           ;EEPROM.c: 109:                 state = indexTemp == 0xFF? 0:41;
  5162   000D20  282D               	incf	_indexTemp^0,w,c
  5163   000D22  B4D8               	btfsc	status,2,c
  5164   000D24  D004               	goto	l4244
  5165   000D26  0E00               	movlw	0
  5166   000D28  6E6F               	movwf	(_memoryLoop$1564+1)^0,c
  5167   000D2A  0E29               	movlw	41
  5168   000D2C  D003               	goto	L3
  5169   000D2E                     l4244:
  5170   000D2E  0E00               	movlw	0
  5171   000D30  6E6F               	movwf	(_memoryLoop$1564+1)^0,c
  5172   000D32  0E00               	movlw	0
  5173   000D34                     L3:
  5174   000D34  6E6E               	movwf	_memoryLoop$1564^0,c
  5175   000D36  C06E  F02E         	movff	_memoryLoop$1564,_state@EEPROM$F1543
  5176   000D3A  0012               	return	
  5177   000D3C                     l920:
  5178                           
  5179                           ;EEPROM.c: 113:             if(EECON1bits.RD == 0){
  5180   000D3C  B0A6               	btfsc	166,0,c	;volsfr
  5181   000D3E  0012               	return	
  5182                           
  5183                           ;EEPROM.c: 114:                 recordings[indexEEPROM].index = readData(0x10 + indexEEP
      +                          ROM);
  5184   000D40  502C               	movf	_indexEEPROM^0,w,c
  5185   000D42  0D03               	mullw	3
  5186   000D44  50F3               	movf	243,w,c
  5187   000D46  0F01               	addlw	low _recordings
  5188   000D48  6ED9               	movwf	fsr2l,c
  5189   000D4A  6ADA               	clrf	fsr2h,c
  5190   000D4C  502C               	movf	_indexEEPROM^0,w,c
  5191   000D4E  0F10               	addlw	16
  5192   000D50  ECB0  F00F         	call	_readData
  5193   000D54  6EDF               	movwf	indf2,c
  5194                           
  5195                           ;EEPROM.c: 115:                 state = 42;
  5196   000D56  0E2A               	movlw	42
  5197   000D58  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5198   000D5A  0012               	return	
  5199   000D5C                     l922:
  5200                           
  5201                           ;EEPROM.c: 119:             if(EECON1bits.RD == 0){
  5202   000D5C  B0A6               	btfsc	166,0,c	;volsfr
  5203   000D5E  0012               	return	
  5204                           
  5205                           ;EEPROM.c: 120:                 recordings[indexEEPROM].timestamp.minutes = readData(0x2
      +                          0 + indexEEPROM);
  5206   000D60  502C               	movf	_indexEEPROM^0,w,c
  5207   000D62  0D03               	mullw	3
  5208   000D64  50F3               	movf	243,w,c
  5209   000D66  0F02               	addlw	low (_recordings+1)
  5210   000D68  6ED9               	movwf	fsr2l,c
  5211   000D6A  6ADA               	clrf	fsr2h,c
  5212   000D6C  502C               	movf	_indexEEPROM^0,w,c
  5213   000D6E  0F20               	addlw	32
  5214   000D70  ECB0  F00F         	call	_readData
  5215   000D74  6EDF               	movwf	indf2,c
  5216                           
  5217                           ;EEPROM.c: 121:                 state = 43;
  5218   000D76  0E2B               	movlw	43
  5219   000D78  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5220   000D7A  0012               	return	
  5221   000D7C                     l924:
  5222                           
  5223                           ;EEPROM.c: 125:             if(EECON1bits.RD == 0){
  5224   000D7C  B0A6               	btfsc	166,0,c	;volsfr
  5225   000D7E  0012               	return	
  5226                           
  5227                           ;EEPROM.c: 126:                 recordings[indexEEPROM].timestamp.seconds = readData(0x3
      +                          0 + indexEEPROM);
  5228   000D80  502C               	movf	_indexEEPROM^0,w,c
  5229   000D82  0D03               	mullw	3
  5230   000D84  50F3               	movf	243,w,c
  5231   000D86  0F03               	addlw	low (_recordings+2)
  5232   000D88  6ED9               	movwf	fsr2l,c
  5233   000D8A  6ADA               	clrf	fsr2h,c
  5234   000D8C  502C               	movf	_indexEEPROM^0,w,c
  5235   000D8E  0F30               	addlw	48
  5236   000D90  ECB0  F00F         	call	_readData
  5237   000D94  6EDF               	movwf	indf2,c
  5238                           
  5239                           ;EEPROM.c: 127:                 indexEEPROM++;
  5240   000D96  2A2C               	incf	_indexEEPROM^0,f,c
  5241                           
  5242                           ;EEPROM.c: 128:                 state = 44;
  5243   000D98  0E2C               	movlw	44
  5244   000D9A  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5245   000D9C  0012               	return	
  5246   000D9E                     l4262:
  5247                           
  5248                           ;EEPROM.c: 132:             if(indexEEPROM == indexTemp){
  5249   000D9E  502D               	movf	_indexTemp^0,w,c
  5250   000DA0  182C               	xorwf	_indexEEPROM^0,w,c
  5251   000DA2  A4D8               	btfss	status,2,c
  5252   000DA4  D003               	goto	l4266
  5253                           
  5254                           ;EEPROM.c: 133:                 state = 45;
  5255   000DA6  0E2D               	movlw	45
  5256   000DA8  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5257                           
  5258                           ;EEPROM.c: 134:             }else{
  5259   000DAA  0012               	return	
  5260   000DAC                     l4266:
  5261                           
  5262                           ;EEPROM.c: 135:                 state = 41;
  5263   000DAC  0E29               	movlw	41
  5264   000DAE  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5265   000DB0  0012               	return	
  5266   000DB2                     l929:
  5267                           
  5268                           ;EEPROM.c: 139:             if(EECON1bits.RD == 0){
  5269   000DB2  B0A6               	btfsc	166,0,c	;volsfr
  5270   000DB4  0012               	return	
  5271                           
  5272                           ;EEPROM.c: 140:                 indexEEPROM = readData(1);
  5273   000DB6  0E01               	movlw	1
  5274   000DB8  ECB0  F00F         	call	_readData
  5275   000DBC  6E2C               	movwf	_indexEEPROM^0,c
  5276   000DBE  D714               	goto	l4184
  5277   000DC0                     l4272:
  5278                           
  5279                           ;EEPROM.c: 148:             LcPutChar('I');
  5280   000DC0  0E49               	movlw	73
  5281   000DC2  EC83  F00B         	call	_LcPutChar
  5282                           
  5283                           ;EEPROM.c: 149:             if(recordings[indexTemp].index/10 == 0){
  5284   000DC6  0E0A               	movlw	10
  5285   000DC8  6E53               	movwf	___lbdiv@divisor^0,c
  5286   000DCA  502D               	movf	_indexTemp^0,w,c
  5287   000DCC  0D03               	mullw	3
  5288   000DCE  50F3               	movf	243,w,c
  5289   000DD0  0F01               	addlw	low _recordings
  5290   000DD2  6ED9               	movwf	fsr2l,c
  5291   000DD4  6ADA               	clrf	fsr2h,c
  5292   000DD6  50DF               	movf	indf2,w,c
  5293   000DD8  EC96  F00D         	call	___lbdiv
  5294   000DDC  0900               	iorlw	0
  5295   000DDE  A4D8               	btfss	status,2,c
  5296   000DE0  D003               	goto	l4276
  5297   000DE2                     u3690:
  5298                           
  5299                           ;EEPROM.c: 150:                 state = 52;
  5300   000DE2  0E34               	movlw	52
  5301   000DE4  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5302                           
  5303                           ;EEPROM.c: 151:             }else{
  5304   000DE6  0012               	return	
  5305   000DE8                     l4276:
  5306                           
  5307                           ;EEPROM.c: 152:                 state = 51;
  5308   000DE8  0E33               	movlw	51
  5309   000DEA  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5310   000DEC  0012               	return	
  5311   000DEE                     l4278:
  5312                           
  5313                           ;EEPROM.c: 156:             LcPutChar((recordings[indexTemp].index/10) + '0');
  5314   000DEE  0E0A               	movlw	10
  5315   000DF0  6E53               	movwf	___lbdiv@divisor^0,c
  5316   000DF2  502D               	movf	_indexTemp^0,w,c
  5317   000DF4  0D03               	mullw	3
  5318   000DF6  50F3               	movf	243,w,c
  5319   000DF8  0F01               	addlw	low _recordings
  5320   000DFA  6ED9               	movwf	fsr2l,c
  5321   000DFC  6ADA               	clrf	fsr2h,c
  5322   000DFE  50DF               	movf	indf2,w,c
  5323   000E00  EC96  F00D         	call	___lbdiv
  5324   000E04  0F30               	addlw	48
  5325   000E06  EC83  F00B         	call	_LcPutChar
  5326   000E0A  D7EB               	goto	u3690
  5327   000E0C                     l4282:
  5328                           
  5329                           ;EEPROM.c: 160:             LcPutChar((recordings[indexTemp].index%10) + '0');
  5330   000E0C  0E0A               	movlw	10
  5331   000E0E  6E53               	movwf	___lbmod@divisor^0,c
  5332   000E10  502D               	movf	_indexTemp^0,w,c
  5333   000E12  0D03               	mullw	3
  5334   000E14  50F3               	movf	243,w,c
  5335   000E16  0F01               	addlw	low _recordings
  5336   000E18  6ED9               	movwf	fsr2l,c
  5337   000E1A  6ADA               	clrf	fsr2h,c
  5338   000E1C  50DF               	movf	indf2,w,c
  5339   000E1E  EC44  F00E         	call	___lbmod
  5340   000E22  0F30               	addlw	48
  5341   000E24  EC83  F00B         	call	_LcPutChar
  5342                           
  5343                           ;EEPROM.c: 161:             state = 53;
  5344   000E28  0E35               	movlw	53
  5345   000E2A  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5346                           
  5347                           ;EEPROM.c: 162:             break;
  5348   000E2C  0012               	return	
  5349   000E2E                     l4286:
  5350                           
  5351                           ;EEPROM.c: 164:             LcPutChar(' ');
  5352   000E2E  0E20               	movlw	32
  5353   000E30  EC83  F00B         	call	_LcPutChar
  5354                           
  5355                           ;EEPROM.c: 165:             updateSysTimestamp(recordings[indexTemp].timestamp,indexTemp
      +                           + 1);
  5356   000E34  502D               	movf	_indexTemp^0,w,c
  5357   000E36  0D03               	mullw	3
  5358   000E38  50F3               	movf	243,w,c
  5359   000E3A  0F02               	addlw	low (_recordings+1)
  5360   000E3C  6ED9               	movwf	fsr2l,c
  5361   000E3E  6ADA               	clrf	fsr2h,c
  5362   000E40  CFDE F054          	movff	postinc2,updateSysTimestamp@time
  5363   000E44  CFDD F055          	movff	postdec2,updateSysTimestamp@time+1
  5364   000E48  282D               	incf	_indexTemp^0,w,c
  5365   000E4A  6E56               	movwf	updateSysTimestamp@i^0,c
  5366   000E4C  EC2E  F00E         	call	_updateSysTimestamp	;wreg free
  5367                           
  5368                           ;EEPROM.c: 166:             state = 54;
  5369   000E50  0E36               	movlw	54
  5370   000E52  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5371                           
  5372                           ;EEPROM.c: 167:             break;
  5373   000E54  0012               	return	
  5374   000E56                     l4290:
  5375                           
  5376                           ;EEPROM.c: 169:             LcPutChar('-');
  5377   000E56  0E2D               	movlw	45
  5378   000E58  EC83  F00B         	call	_LcPutChar
  5379                           
  5380                           ;EEPROM.c: 170:             state = 55;
  5381   000E5C  0E37               	movlw	55
  5382   000E5E  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5383                           
  5384                           ;EEPROM.c: 171:             break;
  5385   000E60  0012               	return	
  5386   000E62                     l4294:
  5387                           
  5388                           ;EEPROM.c: 173:             LcPutChar(' ');
  5389   000E62  0E20               	movlw	32
  5390   000E64  EC83  F00B         	call	_LcPutChar
  5391                           
  5392                           ;EEPROM.c: 174:             state = 56;
  5393   000E68  0E38               	movlw	56
  5394   000E6A  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5395                           
  5396                           ;EEPROM.c: 175:             break;
  5397   000E6C  0012               	return	
  5398   000E6E                     l4298:
  5399                           
  5400                           ;EEPROM.c: 177:             displayTimestamp(indexTemp + 1);
  5401   000E6E  282D               	incf	_indexTemp^0,w,c
  5402   000E70  ECD8  F00F         	call	_displayTimestamp
  5403                           
  5404                           ;EEPROM.c: 178:             state = 57;
  5405   000E74  0E39               	movlw	57
  5406   000E76  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5407                           
  5408                           ;EEPROM.c: 179:             break;
  5409   000E78  0012               	return	
  5410   000E7A                     l4302:
  5411                           
  5412                           ;EEPROM.c: 181:             if(finishedDisplay() && !data && indexTemp != (indexEEPROM >
      +                           8? 7 : indexEEPROM - 1)){
  5413   000E7A  ECBF  F00F         	call	_finishedDisplay	;wreg free
  5414   000E7E  0900               	iorlw	0
  5415   000E80  B4D8               	btfsc	status,2,c
  5416   000E82  D021               	goto	l4318
  5417   000E84  502B               	movf	_data^0,w,c
  5418   000E86  A4D8               	btfss	status,2,c
  5419   000E88  D01E               	goto	l4318
  5420   000E8A  0E09               	movlw	9
  5421   000E8C  602C               	cpfslt	_indexEEPROM^0,c
  5422   000E8E  D007               	goto	l4310
  5423   000E90  0EFF               	movlw	255
  5424   000E92  242C               	addwf	_indexEEPROM^0,w,c
  5425   000E94  6E70               	movwf	_memoryLoop$1566^0,c
  5426   000E96  6A71               	clrf	(_memoryLoop$1566+1)^0,c
  5427   000E98  0EFF               	movlw	255
  5428   000E9A  2271               	addwfc	(_memoryLoop$1566+1)^0,f,c
  5429   000E9C  D004               	goto	l4312
  5430   000E9E                     l4310:
  5431   000E9E  0E00               	movlw	0
  5432   000EA0  6E71               	movwf	(_memoryLoop$1566+1)^0,c
  5433   000EA2  0E07               	movlw	7
  5434   000EA4  6E70               	movwf	_memoryLoop$1566^0,c
  5435   000EA6                     l4312:
  5436   000EA6  502D               	movf	_indexTemp^0,w,c
  5437   000EA8  6E6A               	movwf	??_memoryLoop^0,c
  5438   000EAA  6A6B               	clrf	(??_memoryLoop+1)^0,c
  5439   000EAC  5070               	movf	_memoryLoop$1566^0,w,c
  5440   000EAE  186A               	xorwf	??_memoryLoop^0,w,c
  5441   000EB0  E104               	bnz	u3730
  5442   000EB2  5071               	movf	(_memoryLoop$1566+1)^0,w,c
  5443   000EB4  186B               	xorwf	(??_memoryLoop+1)^0,w,c
  5444   000EB6  B4D8               	btfsc	status,2,c
  5445   000EB8  D006               	goto	l4318
  5446   000EBA                     u3730:
  5447                           
  5448                           ;EEPROM.c: 182:                 data = 1;
  5449   000EBA  0E01               	movlw	1
  5450   000EBC  6E2B               	movwf	_data^0,c
  5451                           
  5452                           ;EEPROM.c: 183:                 state = 58;
  5453   000EBE  0E3A               	movlw	58
  5454   000EC0  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5455                           
  5456                           ;EEPROM.c: 184:                 indexTemp++;
  5457   000EC2  2A2D               	incf	_indexTemp^0,f,c
  5458                           
  5459                           ;EEPROM.c: 185:             }else if(finishedDisplay()){
  5460   000EC4  0012               	return	
  5461   000EC6                     l4318:
  5462   000EC6  ECBF  F00F         	call	_finishedDisplay	;wreg free
  5463   000ECA  0900               	iorlw	0
  5464   000ECC  B4D8               	btfsc	status,2,c
  5465   000ECE  0012               	return	
  5466                           
  5467                           ;EEPROM.c: 186:                 data = 0;
  5468   000ED0  0E00               	movlw	0
  5469   000ED2  6E2B               	movwf	_data^0,c
  5470                           
  5471                           ;EEPROM.c: 187:                 state = 0;
  5472   000ED4  0E00               	movlw	0
  5473   000ED6  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5474   000ED8  0012               	return	
  5475   000EDA                     l4322:
  5476                           
  5477                           ;EEPROM.c: 191:             LcCursorOn();
  5478   000EDA  ECEA  F00F         	call	_LcCursorOn	;wreg free
  5479                           
  5480                           ;EEPROM.c: 192:             state = 59;
  5481   000EDE  0E3B               	movlw	59
  5482   000EE0  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5483                           
  5484                           ;EEPROM.c: 193:             break;
  5485   000EE2  0012               	return	
  5486   000EE4                     l4326:
  5487                           
  5488                           ;EEPROM.c: 195:             LcGotoXY(0,1);
  5489   000EE4  0E01               	movlw	1
  5490   000EE6  6E61               	movwf	LcGotoXY@Row^0,c
  5491   000EE8  0E00               	movlw	0
  5492   000EEA  EC4B  F00A         	call	_LcGotoXY
  5493                           
  5494                           ;EEPROM.c: 196:             state = 60;
  5495   000EEE  0E3C               	movlw	60
  5496   000EF0  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5497                           
  5498                           ;EEPROM.c: 197:             break;
  5499   000EF2  0012               	return	
  5500   000EF4                     l4330:
  5501                           
  5502                           ;EEPROM.c: 199:             LcCursorOff();
  5503   000EF4  ECF0  F00F         	call	_LcCursorOff	;wreg free
  5504                           
  5505                           ;EEPROM.c: 200:             state = 50;
  5506   000EF8  0E32               	movlw	50
  5507   000EFA  6E2E               	movwf	_state@EEPROM$F1543^0,c
  5508                           
  5509                           ;EEPROM.c: 201:             break;
  5510   000EFC  0012               	return	
  5511   000EFE                     l4336:
  5512   000EFE  502E               	movf	_state@EEPROM$F1543^0,w,c
  5513   000F00  6E6A               	movwf	??_memoryLoop^0,c
  5514   000F02  6A6B               	clrf	(??_memoryLoop+1)^0,c
  5515                           
  5516                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5517                           ; Switch size 1, requested type "simple"
  5518                           ; Number of cases is 1, Range of values is 0 to 0
  5519                           ; switch strategies available:
  5520                           ; Name         Instructions Cycles
  5521                           ; simple_byte            4     3 (average)
  5522                           ;	Chosen strategy is simple_byte
  5523   000F04  506B               	movf	(??_memoryLoop+1)^0,w,c
  5524   000F06  0A00               	xorlw	0	; case 0
  5525   000F08  A4D8               	btfss	status,2,c
  5526   000F0A  0012               	return	
  5527                           
  5528                           ; Switch size 1, requested type "simple"
  5529                           ; Number of cases is 29, Range of values is 0 to 60
  5530                           ; switch strategies available:
  5531                           ; Name         Instructions Cycles
  5532                           ; simple_byte           88    45 (average)
  5533                           ;	Chosen strategy is simple_byte
  5534   000F0C  506A               	movf	??_memoryLoop^0,w,c
  5535   000F0E  0A00               	xorlw	0	; case 0
  5536   000F10  B4D8               	btfsc	status,2,c
  5537   000F12  0012               	return	
  5538   000F14  0A02               	xorlw	2	; case 2
  5539   000F16  B4D8               	btfsc	status,2,c
  5540   000F18  D613               	goto	l4162
  5541   000F1A  0A01               	xorlw	1	; case 3
  5542   000F1C  B4D8               	btfsc	status,2,c
  5543   000F1E  D630               	goto	l886
  5544   000F20  0A07               	xorlw	7	; case 4
  5545   000F22  B4D8               	btfsc	status,2,c
  5546   000F24  D640               	goto	l4174
  5547   000F26  0A01               	xorlw	1	; case 5
  5548   000F28  B4D8               	btfsc	status,2,c
  5549   000F2A  D64F               	goto	l4180
  5550   000F2C  0A0F               	xorlw	15	; case 10
  5551   000F2E  B4D8               	btfsc	status,2,c
  5552   000F30  D65E               	goto	l4186
  5553   000F32  0A01               	xorlw	1	; case 11
  5554   000F34  B4D8               	btfsc	status,2,c
  5555   000F36  D66D               	goto	l894
  5556   000F38  0A07               	xorlw	7	; case 12
  5557   000F3A  B4D8               	btfsc	status,2,c
  5558   000F3C  D67E               	goto	l896
  5559   000F3E  0A01               	xorlw	1	; case 13
  5560   000F40  B4D8               	btfsc	status,2,c
  5561   000F42  D690               	goto	l902
  5562   000F44  0A13               	xorlw	19	; case 30
  5563   000F46  B4D8               	btfsc	status,2,c
  5564   000F48  D6A1               	goto	l4216
  5565   000F4A  0A01               	xorlw	1	; case 31
  5566   000F4C  B4D8               	btfsc	status,2,c
  5567   000F4E  D6C3               	goto	l4226
  5568   000F50  0A3F               	xorlw	63	; case 32
  5569   000F52  B4D8               	btfsc	status,2,c
  5570   000F54  D6D6               	goto	l4232
  5571   000F56  0A08               	xorlw	8	; case 40
  5572   000F58  B4D8               	btfsc	status,2,c
  5573   000F5A  D6DC               	goto	l914
  5574   000F5C  0A01               	xorlw	1	; case 41
  5575   000F5E  B4D8               	btfsc	status,2,c
  5576   000F60  D6ED               	goto	l920
  5577   000F62  0A03               	xorlw	3	; case 42
  5578   000F64  B4D8               	btfsc	status,2,c
  5579   000F66  D6FA               	goto	l922
  5580   000F68  0A01               	xorlw	1	; case 43
  5581   000F6A  B4D8               	btfsc	status,2,c
  5582   000F6C  D707               	goto	l924
  5583   000F6E  0A07               	xorlw	7	; case 44
  5584   000F70  B4D8               	btfsc	status,2,c
  5585   000F72  D715               	goto	l4262
  5586   000F74  0A01               	xorlw	1	; case 45
  5587   000F76  B4D8               	btfsc	status,2,c
  5588   000F78  D71C               	goto	l929
  5589   000F7A  0A1F               	xorlw	31	; case 50
  5590   000F7C  B4D8               	btfsc	status,2,c
  5591   000F7E  D720               	goto	l4272
  5592   000F80  0A01               	xorlw	1	; case 51
  5593   000F82  B4D8               	btfsc	status,2,c
  5594   000F84  D734               	goto	l4278
  5595   000F86  0A07               	xorlw	7	; case 52
  5596   000F88  B4D8               	btfsc	status,2,c
  5597   000F8A  D740               	goto	l4282
  5598   000F8C  0A01               	xorlw	1	; case 53
  5599   000F8E  B4D8               	btfsc	status,2,c
  5600   000F90  D74E               	goto	l4286
  5601   000F92  0A03               	xorlw	3	; case 54
  5602   000F94  B4D8               	btfsc	status,2,c
  5603   000F96  D75F               	goto	l4290
  5604   000F98  0A01               	xorlw	1	; case 55
  5605   000F9A  B4D8               	btfsc	status,2,c
  5606   000F9C  D762               	goto	l4294
  5607   000F9E  0A0F               	xorlw	15	; case 56
  5608   000FA0  B4D8               	btfsc	status,2,c
  5609   000FA2  D765               	goto	l4298
  5610   000FA4  0A01               	xorlw	1	; case 57
  5611   000FA6  B4D8               	btfsc	status,2,c
  5612   000FA8  D768               	goto	l4302
  5613   000FAA  0A03               	xorlw	3	; case 58
  5614   000FAC  B4D8               	btfsc	status,2,c
  5615   000FAE  D795               	goto	l4322
  5616   000FB0  0A01               	xorlw	1	; case 59
  5617   000FB2  B4D8               	btfsc	status,2,c
  5618   000FB4  D797               	goto	l4326
  5619   000FB6  0A07               	xorlw	7	; case 60
  5620   000FB8  A4D8               	btfss	status,2,c
  5621   000FBA  0012               	return	
  5622   000FBC  D79B               	goto	l4330
  5623   000FBE                     __end_of_memoryLoop:
  5624                           	callstack 0
  5625                           
  5626 ;; *************** function _updateSysTimestamp *****************
  5627 ;; Defined at:
  5628 ;;		line 59 in file "SystemTimer.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  time            2    1[COMRAM] struct .
  5631 ;;  i               1    3[COMRAM] unsigned char 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1
  5643 ;;      Params:         3       0       0
  5644 ;;      Locals:         0       0       0
  5645 ;;      Temps:          0       0       0
  5646 ;;      Totals:         3       0       0
  5647 ;;Total ram usage:        3 bytes
  5648 ;; Hardware stack levels used: 1
  5649 ;; Hardware stack levels required when called: 3
  5650 ;; This function calls:
  5651 ;;		_TI_ResetTics
  5652 ;; This function is called by:
  5653 ;;		_menuLoop
  5654 ;;		_memoryLoop
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text31
  5659   001C5C                     __ptext31:
  5660                           	callstack 0
  5661   001C5C                     _updateSysTimestamp:
  5662                           	callstack 26
  5663                           
  5664                           ;SystemTimer.c: 60:     index = i;
  5665                           
  5666                           ;incstack = 0
  5667   001C5C  C056  F036         	movff	updateSysTimestamp@i,_index@SystemTimer$F936
  5668                           
  5669                           ;SystemTimer.c: 61:     timestamp[index].minutes = time.minutes;
  5670   001C60  5036               	movf	_index@SystemTimer$F936^0,w,c
  5671   001C62  0D02               	mullw	2
  5672   001C64  50F3               	movf	243,w,c
  5673   001C66  0FDC               	addlw	low _timestamp
  5674   001C68  6ED9               	movwf	fsr2l,c
  5675   001C6A  6ADA               	clrf	fsr2h,c
  5676   001C6C  C054  FFDF         	movff	updateSysTimestamp@time,indf2
  5677                           
  5678                           ;SystemTimer.c: 62:     timestamp[index].seconds = time.seconds;
  5679   001C70  5036               	movf	_index@SystemTimer$F936^0,w,c
  5680   001C72  0D02               	mullw	2
  5681   001C74  50F3               	movf	243,w,c
  5682   001C76  0FDD               	addlw	low (_timestamp+1)
  5683   001C78  6ED9               	movwf	fsr2l,c
  5684   001C7A  6ADA               	clrf	fsr2h,c
  5685   001C7C  C055  FFDF         	movff	updateSysTimestamp@time+1,indf2
  5686                           
  5687                           ;SystemTimer.c: 63:     TI_ResetTics(sysTmr);
  5688   001C80  504E               	movf	_sysTmr^0,w,c
  5689   001C82  EC59  F00E         	call	_TI_ResetTics
  5690   001C86  0012               	return		;funcret
  5691   001C88                     __end_of_updateSysTimestamp:
  5692                           	callstack 0
  5693                           
  5694 ;; *************** function _setTX *****************
  5695 ;; Defined at:
  5696 ;;		line 18 in file "SIO.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;  letter          1    wreg     unsigned char 
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  letter          1    0[COMRAM] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  1    wreg      void 
  5703 ;; Registers used:
  5704 ;;		wreg
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1
  5710 ;;      Params:         0       0       0
  5711 ;;      Locals:         1       0       0
  5712 ;;      Temps:          0       0       0
  5713 ;;      Totals:         1       0       0
  5714 ;;Total ram usage:        1 bytes
  5715 ;; Hardware stack levels used: 1
  5716 ;; Hardware stack levels required when called: 2
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_menuLoop
  5721 ;;		_memoryLoop
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text32
  5726   00001E                     __ptext32:
  5727                           	callstack 0
  5728   00001E                     _setTX:
  5729                           	callstack 27
  5730                           
  5731                           ;incstack = 0
  5732                           ;setTX@letter stored from wreg
  5733   00001E  6E53               	movwf	setTX@letter^0,c
  5734                           
  5735                           ;SIO.c: 19:     TXREG = letter;
  5736   000020  C053  FFAD         	movff	setTX@letter,4013	;volatile
  5737   000024  0012               	return		;funcret
  5738   000026                     __end_of_setTX:
  5739                           	callstack 0
  5740                           
  5741 ;; *************** function _saveData *****************
  5742 ;; Defined at:
  5743 ;;		line 206 in file "EEPROM.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  address         1    wreg     unsigned char 
  5746 ;;  data            1    0[COMRAM] unsigned char 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  address         1    1[COMRAM] unsigned char 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMRAM   BANK0   BANK1
  5758 ;;      Params:         1       0       0
  5759 ;;      Locals:         1       0       0
  5760 ;;      Temps:          0       0       0
  5761 ;;      Totals:         2       0       0
  5762 ;;Total ram usage:        2 bytes
  5763 ;; Hardware stack levels used: 1
  5764 ;; Hardware stack levels required when called: 2
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_memoryLoop
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text33
  5773   001D4C                     __ptext33:
  5774                           	callstack 0
  5775   001D4C                     _saveData:
  5776                           	callstack 27
  5777                           
  5778                           ;incstack = 0
  5779                           ;saveData@address stored from wreg
  5780   001D4C  6E54               	movwf	saveData@address^0,c
  5781                           
  5782                           ;EEPROM.c: 207:     EEADR = address;
  5783   001D4E  C054  FFA9         	movff	saveData@address,4009	;volatile
  5784                           
  5785                           ;EEPROM.c: 208:     EEDATA = data;
  5786   001D52  C053  FFA8         	movff	saveData@data,4008	;volatile
  5787                           
  5788                           ;EEPROM.c: 209:     EECON1bits.EEPGD = 0;
  5789   001D56  9EA6               	bcf	166,7,c	;volsfr
  5790                           
  5791                           ;EEPROM.c: 210:     EECON1bits.CFGS = 0;
  5792   001D58  9CA6               	bcf	166,6,c	;volsfr
  5793                           
  5794                           ;EEPROM.c: 211:     EECON1bits.WREN = 1;
  5795   001D5A  84A6               	bsf	166,2,c	;volsfr
  5796                           
  5797                           ;EEPROM.c: 212:     INTCONbits.GIE = 0;
  5798   001D5C  9EF2               	bcf	242,7,c	;volatile
  5799                           
  5800                           ;EEPROM.c: 213:     EECON2 = 0x55;
  5801   001D5E  0E55               	movlw	85
  5802   001D60  6EA7               	movwf	167,c	;volsfr
  5803                           
  5804                           ;EEPROM.c: 214:     EECON2 = 0xAA;
  5805   001D62  0EAA               	movlw	170
  5806   001D64  6EA7               	movwf	167,c	;volsfr
  5807                           
  5808                           ;EEPROM.c: 215:     EECON1bits.WR = 1;
  5809   001D66  82A6               	bsf	166,1,c	;volsfr
  5810                           
  5811                           ;EEPROM.c: 216:     INTCONbits.GIE = 1;
  5812   001D68  8EF2               	bsf	242,7,c	;volatile
  5813                           
  5814                           ;EEPROM.c: 217:     EECON1bits.WREN = 0;
  5815   001D6A  94A6               	bcf	166,2,c	;volsfr
  5816   001D6C  0012               	return		;funcret
  5817   001D6E                     __end_of_saveData:
  5818                           	callstack 0
  5819                           
  5820 ;; *************** function _readData *****************
  5821 ;; Defined at:
  5822 ;;		line 221 in file "EEPROM.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  address         1    wreg     unsigned char 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  address         1    0[COMRAM] unsigned char 
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      unsigned char 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1
  5836 ;;      Params:         0       0       0
  5837 ;;      Locals:         1       0       0
  5838 ;;      Temps:          0       0       0
  5839 ;;      Totals:         1       0       0
  5840 ;;Total ram usage:        1 bytes
  5841 ;; Hardware stack levels used: 1
  5842 ;; Hardware stack levels required when called: 2
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_memoryLoop
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text34
  5851   001F60                     __ptext34:
  5852                           	callstack 0
  5853   001F60                     _readData:
  5854                           	callstack 27
  5855                           
  5856                           ;incstack = 0
  5857                           ;readData@address stored from wreg
  5858   001F60  6E53               	movwf	readData@address^0,c
  5859                           
  5860                           ;EEPROM.c: 222:     EEADR = address;
  5861   001F62  C053  FFA9         	movff	readData@address,4009	;volatile
  5862                           
  5863                           ;EEPROM.c: 223:     EECON1bits.EEPGD = 0;
  5864   001F66  9EA6               	bcf	166,7,c	;volsfr
  5865                           
  5866                           ;EEPROM.c: 224:     EECON1bits.CFGS = 0;
  5867   001F68  9CA6               	bcf	166,6,c	;volsfr
  5868                           
  5869                           ;EEPROM.c: 225:     EECON1bits.RD = 1;
  5870   001F6A  80A6               	bsf	166,0,c	;volsfr
  5871                           
  5872                           ;EEPROM.c: 226:     return EEDATA;
  5873   001F6C  50A8               	movf	168,w,c	;volatile
  5874   001F6E  0012               	return		;funcret
  5875   001F70                     __end_of_readData:
  5876                           	callstack 0
  5877                           
  5878 ;; *************** function _getSysTimestamp *****************
  5879 ;; Defined at:
  5880 ;;		line 80 in file "SystemTimer.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  2    0[COMRAM] struct .
  5887 ;; Registers used:
  5888 ;;		None
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1
  5894 ;;      Params:         2       0       0
  5895 ;;      Locals:         0       0       0
  5896 ;;      Temps:          0       0       0
  5897 ;;      Totals:         2       0       0
  5898 ;;Total ram usage:        2 bytes
  5899 ;; Hardware stack levels used: 1
  5900 ;; Hardware stack levels required when called: 2
  5901 ;; This function calls:
  5902 ;;		Nothing
  5903 ;; This function is called by:
  5904 ;;		_memoryLoop
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text35
  5909   001FF6                     __ptext35:
  5910                           	callstack 0
  5911   001FF6                     _getSysTimestamp:
  5912                           	callstack 27
  5913                           
  5914                           ;SystemTimer.c: 81:     return timestamp[0];
  5915                           
  5916                           ;incstack = 0
  5917   001FF6  C0DC  F053         	movff	_timestamp,?_getSysTimestamp
  5918   001FFA  C0DD  F054         	movff	_timestamp+1,?_getSysTimestamp+1
  5919   001FFE  0012               	return		;funcret
  5920   002000                     __end_of_getSysTimestamp:
  5921                           	callstack 0
  5922                           
  5923 ;; *************** function _getRX *****************
  5924 ;; Defined at:
  5925 ;;		line 30 in file "SIO.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      unsigned char 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1
  5939 ;;      Params:         0       0       0
  5940 ;;      Locals:         0       0       0
  5941 ;;      Temps:          0       0       0
  5942 ;;      Totals:         0       0       0
  5943 ;;Total ram usage:        0 bytes
  5944 ;; Hardware stack levels used: 1
  5945 ;; Hardware stack levels required when called: 2
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_menuLoop
  5950 ;;		_memoryLoop
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text36
  5955   000040                     __ptext36:
  5956                           	callstack 0
  5957   000040                     _getRX:
  5958                           	callstack 27
  5959                           
  5960                           ;SIO.c: 31:     return RCREG;
  5961                           
  5962                           ;incstack = 0
  5963   000040  50AE               	movf	174,w,c	;volatile
  5964   000042  0012               	return		;funcret
  5965   000044                     __end_of_getRX:
  5966                           	callstack 0
  5967                           
  5968 ;; *************** function _finishedDisplay *****************
  5969 ;; Defined at:
  5970 ;;		line 89 in file "SystemTimer.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;		None
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;		None
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      unsigned char 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1
  5984 ;;      Params:         0       0       0
  5985 ;;      Locals:         0       0       0
  5986 ;;      Temps:          0       0       0
  5987 ;;      Totals:         0       0       0
  5988 ;;Total ram usage:        0 bytes
  5989 ;; Hardware stack levels used: 1
  5990 ;; Hardware stack levels required when called: 2
  5991 ;; This function calls:
  5992 ;;		Nothing
  5993 ;; This function is called by:
  5994 ;;		_memoryLoop
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text37
  5999   001F7E                     __ptext37:
  6000                           	callstack 0
  6001   001F7E                     _finishedDisplay:
  6002                           	callstack 27
  6003                           
  6004                           ;SystemTimer.c: 90:     return state == 0;
  6005                           
  6006                           ;incstack = 0
  6007   001F7E  5037               	movf	_state@SystemTimer$F935^0,w,c
  6008   001F80  A4D8               	btfss	status,2,c
  6009   001F82  D002               	goto	u2920
  6010   001F84  0E01               	movlw	1
  6011   001F86  0012               	return	
  6012   001F88                     u2920:
  6013   001F88  0E00               	movlw	0
  6014   001F8A  0012               	return		;funcret
  6015   001F8C                     __end_of_finishedDisplay:
  6016                           	callstack 0
  6017                           
  6018 ;; *************** function _displayTimestamp *****************
  6019 ;; Defined at:
  6020 ;;		line 75 in file "SystemTimer.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  i               1    wreg     unsigned char 
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  i               1    0[COMRAM] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		wreg, status,2
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1
  6034 ;;      Params:         0       0       0
  6035 ;;      Locals:         1       0       0
  6036 ;;      Temps:          0       0       0
  6037 ;;      Totals:         1       0       0
  6038 ;;Total ram usage:        1 bytes
  6039 ;; Hardware stack levels used: 1
  6040 ;; Hardware stack levels required when called: 2
  6041 ;; This function calls:
  6042 ;;		Nothing
  6043 ;; This function is called by:
  6044 ;;		_menuLoop
  6045 ;;		_memoryLoop
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text38
  6050   001FB0                     __ptext38:
  6051                           	callstack 0
  6052   001FB0                     _displayTimestamp:
  6053                           	callstack 27
  6054                           
  6055                           ;incstack = 0
  6056                           ;displayTimestamp@i stored from wreg
  6057   001FB0  6E53               	movwf	displayTimestamp@i^0,c
  6058                           
  6059                           ;SystemTimer.c: 76:     index = i;
  6060   001FB2  C053  F036         	movff	displayTimestamp@i,_index@SystemTimer$F936
  6061                           
  6062                           ;SystemTimer.c: 77:     state = 8;
  6063   001FB6  0E08               	movlw	8
  6064   001FB8  6E37               	movwf	_state@SystemTimer$F935^0,c
  6065   001FBA  0012               	return		;funcret
  6066   001FBC                     __end_of_displayTimestamp:
  6067                           	callstack 0
  6068                           
  6069 ;; *************** function _checkTX *****************
  6070 ;; Defined at:
  6071 ;;		line 22 in file "SIO.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;		None
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;		None
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      unsigned char 
  6078 ;; Registers used:
  6079 ;;		wreg
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1
  6085 ;;      Params:         0       0       0
  6086 ;;      Locals:         0       0       0
  6087 ;;      Temps:          0       0       0
  6088 ;;      Totals:         0       0       0
  6089 ;;Total ram usage:        0 bytes
  6090 ;; Hardware stack levels used: 1
  6091 ;; Hardware stack levels required when called: 2
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_menuLoop
  6096 ;;		_memoryLoop
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text39
  6101   001FBC                     __ptext39:
  6102                           	callstack 0
  6103   001FBC                     _checkTX:
  6104                           	callstack 27
  6105                           
  6106                           ;SIO.c: 23:     return TXSTAbits.TRMT;
  6107                           
  6108                           ;incstack = 0
  6109   001FBC  A2AC               	btfss	172,1,c	;volatile
  6110   001FBE  D002               	goto	u2850
  6111   001FC0  0E01               	movlw	1
  6112   001FC2  0012               	return	
  6113   001FC4                     u2850:
  6114   001FC4  0E00               	movlw	0
  6115   001FC6  0012               	return		;funcret
  6116   001FC8                     __end_of_checkTX:
  6117                           	callstack 0
  6118                           
  6119 ;; *************** function _checkRX *****************
  6120 ;; Defined at:
  6121 ;;		line 26 in file "SIO.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      unsigned char 
  6128 ;; Registers used:
  6129 ;;		wreg
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1
  6135 ;;      Params:         0       0       0
  6136 ;;      Locals:         0       0       0
  6137 ;;      Temps:          0       0       0
  6138 ;;      Totals:         0       0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used: 1
  6141 ;; Hardware stack levels required when called: 2
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_menuLoop
  6146 ;;		_memoryLoop
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text40
  6151   001FC8                     __ptext40:
  6152                           	callstack 0
  6153   001FC8                     _checkRX:
  6154                           	callstack 27
  6155                           
  6156                           ;SIO.c: 27:     return PIR1bits.RCIF;
  6157                           
  6158                           ;incstack = 0
  6159   001FC8  AA9E               	btfss	158,5,c	;volatile
  6160   001FCA  D002               	goto	u2860
  6161   001FCC  0E01               	movlw	1
  6162   001FCE  0012               	return	
  6163   001FD0                     u2860:
  6164   001FD0  0E00               	movlw	0
  6165   001FD2  0012               	return		;funcret
  6166   001FD4                     __end_of_checkRX:
  6167                           	callstack 0
  6168                           
  6169 ;; *************** function ___lbmod *****************
  6170 ;; Defined at:
  6171 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lbmod.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  dividend        1    wreg     unsigned char 
  6174 ;;  divisor         1    0[COMRAM] unsigned char 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  dividend        1    1[COMRAM] unsigned char 
  6177 ;;  rem             1    3[COMRAM] unsigned char 
  6178 ;;  counter         1    2[COMRAM] unsigned char 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      unsigned char 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1
  6188 ;;      Params:         1       0       0
  6189 ;;      Locals:         3       0       0
  6190 ;;      Temps:          0       0       0
  6191 ;;      Totals:         4       0       0
  6192 ;;Total ram usage:        4 bytes
  6193 ;; Hardware stack levels used: 1
  6194 ;; Hardware stack levels required when called: 2
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_sysTimerLoop
  6199 ;;		_memoryLoop
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text41
  6204   001C88                     __ptext41:
  6205                           	callstack 0
  6206   001C88                     ___lbmod:
  6207                           	callstack 27
  6208                           
  6209                           ;incstack = 0
  6210                           ;___lbmod@dividend stored from wreg
  6211   001C88  6E54               	movwf	___lbmod@dividend^0,c
  6212   001C8A  0E08               	movlw	8
  6213   001C8C  6E55               	movwf	___lbmod@counter^0,c
  6214   001C8E  0E00               	movlw	0
  6215   001C90  6E56               	movwf	___lbmod@rem^0,c
  6216   001C92                     l3814:
  6217   001C92  90D8               	bcf	status,0,c
  6218   001C94  3454               	rlcf	___lbmod@dividend^0,w,c
  6219   001C96  3456               	rlcf	___lbmod@rem^0,w,c
  6220   001C98  6E56               	movwf	___lbmod@rem^0,c
  6221   001C9A  90D8               	bcf	status,0,c
  6222   001C9C  3654               	rlcf	___lbmod@dividend^0,f,c
  6223   001C9E  5053               	movf	___lbmod@divisor^0,w,c
  6224   001CA0  5C56               	subwf	___lbmod@rem^0,w,c
  6225   001CA2  A0D8               	btfss	status,0,c
  6226   001CA4  D002               	goto	l3822
  6227   001CA6  5053               	movf	___lbmod@divisor^0,w,c
  6228   001CA8  5E56               	subwf	___lbmod@rem^0,f,c
  6229   001CAA                     l3822:
  6230   001CAA  2E55               	decfsz	___lbmod@counter^0,f,c
  6231   001CAC  D7F2               	goto	l3814
  6232   001CAE  5056               	movf	___lbmod@rem^0,w,c
  6233   001CB0  0012               	return		;funcret
  6234   001CB2                     __end_of___lbmod:
  6235                           	callstack 0
  6236                           
  6237 ;; *************** function ___lbdiv *****************
  6238 ;; Defined at:
  6239 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lbdiv.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  dividend        1    wreg     unsigned char 
  6242 ;;  divisor         1    0[COMRAM] unsigned char 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  dividend        1    1[COMRAM] unsigned char 
  6245 ;;  quotient        1    3[COMRAM] unsigned char 
  6246 ;;  counter         1    2[COMRAM] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      unsigned char 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1
  6256 ;;      Params:         1       0       0
  6257 ;;      Locals:         3       0       0
  6258 ;;      Temps:          0       0       0
  6259 ;;      Totals:         4       0       0
  6260 ;;Total ram usage:        4 bytes
  6261 ;; Hardware stack levels used: 1
  6262 ;; Hardware stack levels required when called: 2
  6263 ;; This function calls:
  6264 ;;		Nothing
  6265 ;; This function is called by:
  6266 ;;		_sysTimerLoop
  6267 ;;		_memoryLoop
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text42
  6272   001B2C                     __ptext42:
  6273                           	callstack 0
  6274   001B2C                     ___lbdiv:
  6275                           	callstack 27
  6276                           
  6277                           ;incstack = 0
  6278                           ;___lbdiv@dividend stored from wreg
  6279   001B2C  6E54               	movwf	___lbdiv@dividend^0,c
  6280   001B2E  0E00               	movlw	0
  6281   001B30  6E56               	movwf	___lbdiv@quotient^0,c
  6282   001B32  5053               	movf	___lbdiv@divisor^0,w,c
  6283   001B34  B4D8               	btfsc	status,2,c
  6284   001B36  D015               	goto	l3808
  6285   001B38  0E01               	movlw	1
  6286   001B3A  6E55               	movwf	___lbdiv@counter^0,c
  6287   001B3C  D003               	goto	l3796
  6288   001B3E                     l3792:
  6289   001B3E  90D8               	bcf	status,0,c
  6290   001B40  3653               	rlcf	___lbdiv@divisor^0,f,c
  6291   001B42  2A55               	incf	___lbdiv@counter^0,f,c
  6292   001B44                     l3796:
  6293   001B44  AE53               	btfss	___lbdiv@divisor^0,7,c
  6294   001B46  D7FB               	goto	l3792
  6295   001B48                     u3010:
  6296   001B48  90D8               	bcf	status,0,c
  6297   001B4A  3656               	rlcf	___lbdiv@quotient^0,f,c
  6298   001B4C  5053               	movf	___lbdiv@divisor^0,w,c
  6299   001B4E  5C54               	subwf	___lbdiv@dividend^0,w,c
  6300   001B50  A0D8               	btfss	status,0,c
  6301   001B52  D003               	goto	l3804
  6302   001B54  5053               	movf	___lbdiv@divisor^0,w,c
  6303   001B56  5E54               	subwf	___lbdiv@dividend^0,f,c
  6304   001B58  8056               	bsf	___lbdiv@quotient^0,0,c
  6305   001B5A                     l3804:
  6306   001B5A  90D8               	bcf	status,0,c
  6307   001B5C  3253               	rrcf	___lbdiv@divisor^0,f,c
  6308   001B5E  2E55               	decfsz	___lbdiv@counter^0,f,c
  6309   001B60  D7F3               	goto	u3010
  6310   001B62                     l3808:
  6311   001B62  5056               	movf	___lbdiv@quotient^0,w,c
  6312   001B64  0012               	return		;funcret
  6313   001B66                     __end_of___lbdiv:
  6314                           	callstack 0
  6315                           
  6316 ;; *************** function _LcPutChar *****************
  6317 ;; Defined at:
  6318 ;;		line 161 in file "LcTLCD.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  c               1    wreg     unsigned char 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  c               1   22[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1
  6332 ;;      Params:         0       0       0
  6333 ;;      Locals:         1       0       0
  6334 ;;      Temps:          0       0       0
  6335 ;;      Totals:         1       0       0
  6336 ;;Total ram usage:        1 bytes
  6337 ;; Hardware stack levels used: 1
  6338 ;; Hardware stack levels required when called: 5
  6339 ;; This function calls:
  6340 ;;		_CantaData
  6341 ;;		_LcGotoXY
  6342 ;;		_WaitForBusy
  6343 ;; This function is called by:
  6344 ;;		_menuLoop
  6345 ;;		_lcdAddString
  6346 ;;		_displayMenu
  6347 ;;		_sysTimerLoop
  6348 ;;		_memoryLoop
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text43
  6353   001706                     __ptext43:
  6354                           	callstack 0
  6355   001706                     _LcPutChar:
  6356                           	callstack 24
  6357                           
  6358                           ;incstack = 0
  6359                           ;LcPutChar@c stored from wreg
  6360   001706  6E69               	movwf	LcPutChar@c^0,c
  6361                           
  6362                           ;LcTLCD.c: 171:  WaitForBusy(); CantaData(c);
  6363   001708  EC74  F00D         	call	_WaitForBusy	;wreg free
  6364   00170C  5069               	movf	LcPutChar@c^0,w,c
  6365   00170E  ECCD  F00D         	call	_CantaData
  6366                           
  6367                           ;LcTLCD.c: 173:  ++ColumnAct;
  6368   001712  2A43               	incf	_ColumnAct^0,f,c
  6369                           
  6370                           ;LcTLCD.c: 174:  if (Rows == 3) {
  6371   001714  0E03               	movlw	3
  6372   001716  1846               	xorwf	_Rows^0,w,c
  6373   001718  A4D8               	btfss	status,2,c
  6374   00171A  D011               	goto	l3466
  6375                           
  6376                           ;LcTLCD.c: 175:   if (ColumnAct >= 20) {
  6377   00171C  0E13               	movlw	19
  6378   00171E  6443               	cpfsgt	_ColumnAct^0,c
  6379   001720  0012               	return	
  6380                           
  6381                           ;LcTLCD.c: 176:    ColumnAct = 0;
  6382   001722  0E00               	movlw	0
  6383   001724  6E43               	movwf	_ColumnAct^0,c
  6384                           
  6385                           ;LcTLCD.c: 177:    if (++RowAct >= 4) RowAct = 0;
  6386   001726  2A44               	incf	_RowAct^0,f,c
  6387   001728  0E03               	movlw	3
  6388   00172A  6444               	cpfsgt	_RowAct^0,c
  6389   00172C  D002               	goto	l3464
  6390   00172E  0E00               	movlw	0
  6391   001730  6E44               	movwf	_RowAct^0,c
  6392   001732                     l3464:
  6393                           
  6394                           ;LcTLCD.c: 178:    LcGotoXY(ColumnAct, RowAct);
  6395   001732  C044  F061         	movff	_RowAct,LcGotoXY@Row
  6396   001736  5043               	movf	_ColumnAct^0,w,c
  6397   001738  EC4B  F00A         	call	_LcGotoXY
  6398   00173C  0012               	return	
  6399   00173E                     l3466:
  6400                           
  6401                           ;LcTLCD.c: 181:  if (Rows == 2) {
  6402   00173E  0E02               	movlw	2
  6403   001740  1846               	xorwf	_Rows^0,w,c
  6404   001742  A4D8               	btfss	status,2,c
  6405   001744  D011               	goto	l3478
  6406                           
  6407                           ;LcTLCD.c: 182:   if (ColumnAct >= 40) {
  6408   001746  0E27               	movlw	39
  6409   001748  6443               	cpfsgt	_ColumnAct^0,c
  6410   00174A  0012               	return	
  6411                           
  6412                           ;LcTLCD.c: 183:    ColumnAct = 0;
  6413   00174C  0E00               	movlw	0
  6414   00174E  6E43               	movwf	_ColumnAct^0,c
  6415                           
  6416                           ;LcTLCD.c: 184:    if (++RowAct >= 2) RowAct = 0;
  6417   001750  2A44               	incf	_RowAct^0,f,c
  6418   001752  0E01               	movlw	1
  6419   001754  6444               	cpfsgt	_RowAct^0,c
  6420   001756  D002               	goto	l3476
  6421   001758  0E00               	movlw	0
  6422   00175A  6E44               	movwf	_RowAct^0,c
  6423   00175C                     l3476:
  6424                           
  6425                           ;LcTLCD.c: 185:    LcGotoXY(ColumnAct, RowAct);
  6426   00175C  C044  F061         	movff	_RowAct,LcGotoXY@Row
  6427   001760  5043               	movf	_ColumnAct^0,w,c
  6428   001762  EC4B  F00A         	call	_LcGotoXY
  6429   001766  0012               	return	
  6430   001768                     l3478:
  6431                           
  6432                           ;LcTLCD.c: 188:  if (RowAct == 1) {
  6433   001768  0444               	decf	_RowAct^0,w,c
  6434   00176A  A4D8               	btfss	status,2,c
  6435   00176C  0012               	return	
  6436                           
  6437                           ;LcTLCD.c: 189:   if (ColumnAct >= 40) ColumnAct = 0;
  6438   00176E  0E27               	movlw	39
  6439   001770  6443               	cpfsgt	_ColumnAct^0,c
  6440   001772  D002               	goto	l3484
  6441   001774  0E00               	movlw	0
  6442   001776  6E43               	movwf	_ColumnAct^0,c
  6443   001778                     l3484:
  6444                           
  6445                           ;LcTLCD.c: 190:   LcGotoXY(ColumnAct, RowAct);
  6446   001778  C044  F061         	movff	_RowAct,LcGotoXY@Row
  6447   00177C  5043               	movf	_ColumnAct^0,w,c
  6448   00177E  EC4B  F00A         	call	_LcGotoXY
  6449   001782  0012               	return		;funcret
  6450   001784                     __end_of_LcPutChar:
  6451                           	callstack 0
  6452                           
  6453 ;; *************** function _LcGotoXY *****************
  6454 ;; Defined at:
  6455 ;;		line 134 in file "LcTLCD.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  Column          1    wreg     unsigned char 
  6458 ;;  Row             1   14[COMRAM] unsigned char 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  Column          1   21[COMRAM] unsigned char 
  6461 ;;  Fisics          2   19[COMRAM] int 
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1
  6471 ;;      Params:         1       0       0
  6472 ;;      Locals:         5       0       0
  6473 ;;      Temps:          2       0       0
  6474 ;;      Totals:         8       0       0
  6475 ;;Total ram usage:        8 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; Hardware stack levels required when called: 4
  6478 ;; This function calls:
  6479 ;;		_CantaIR
  6480 ;;		_WaitForBusy
  6481 ;; This function is called by:
  6482 ;;		_LcPutChar
  6483 ;;		_menuLoop
  6484 ;;		_moveOneRow
  6485 ;;		_memoryLoop
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text44
  6490   001496                     __ptext44:
  6491                           	callstack 0
  6492   001496                     _LcGotoXY:
  6493                           	callstack 24
  6494                           
  6495                           ;incstack = 0
  6496                           ;LcGotoXY@Column stored from wreg
  6497   001496  6E68               	movwf	LcGotoXY@Column^0,c
  6498                           
  6499                           ;LcTLCD.c: 138:  int Fisics;;LcTLCD.c: 140:  switch (Rows) {
  6500   001498  D036               	goto	l3396
  6501   00149A                     l3374:
  6502                           
  6503                           ;LcTLCD.c: 142:    Fisics = Column + (!Row ? 0 : 0x40); break;
  6504   00149A  5061               	movf	LcGotoXY@Row^0,w,c
  6505   00149C  B4D8               	btfsc	status,2,c
  6506   00149E  D004               	goto	l3378
  6507   0014A0  0E00               	movlw	0
  6508   0014A2  6E65               	movwf	(_LcGotoXY$556+1)^0,c
  6509   0014A4  0E40               	movlw	64
  6510   0014A6  D003               	goto	L4
  6511   0014A8                     l3378:
  6512   0014A8  0E00               	movlw	0
  6513   0014AA  6E65               	movwf	(_LcGotoXY$556+1)^0,c
  6514   0014AC  0E00               	movlw	0
  6515   0014AE                     L4:
  6516   0014AE  6E64               	movwf	_LcGotoXY$556^0,c
  6517   0014B0  5068               	movf	LcGotoXY@Column^0,w,c
  6518   0014B2  2464               	addwf	_LcGotoXY$556^0,w,c
  6519   0014B4  6E66               	movwf	LcGotoXY@Fisics^0,c
  6520   0014B6  0E00               	movlw	0
  6521   0014B8  2065               	addwfc	(_LcGotoXY$556+1)^0,w,c
  6522   0014BA  6E67               	movwf	(LcGotoXY@Fisics+1)^0,c
  6523   0014BC  D036               	goto	l3398
  6524   0014BE                     l209:
  6525                           
  6526                           ;LcTLCD.c: 144:    Fisics = Column;
  6527   0014BE  C068  F066         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6528   0014C2  6A67               	clrf	(LcGotoXY@Fisics+1)^0,c
  6529                           
  6530                           ;LcTLCD.c: 145:    if (Row == 1) Fisics += 0x40; else
  6531   0014C4  0461               	decf	LcGotoXY@Row^0,w,c
  6532   0014C6  A4D8               	btfss	status,2,c
  6533   0014C8  D002               	goto	l3386
  6534   0014CA  0E40               	movlw	64
  6535   0014CC  D005               	goto	L5
  6536   0014CE                     l3386:
  6537                           
  6538                           ;LcTLCD.c: 146:    if (Row == 2) Fisics += Columns; else
  6539   0014CE  0E02               	movlw	2
  6540   0014D0  1861               	xorwf	LcGotoXY@Row^0,w,c
  6541   0014D2  A4D8               	btfss	status,2,c
  6542   0014D4  D004               	goto	l3390
  6543   0014D6  5045               	movf	_Columns^0,w,c
  6544   0014D8                     L5:
  6545   0014D8  2666               	addwf	LcGotoXY@Fisics^0,f,c
  6546   0014DA  0E00               	movlw	0
  6547   0014DC  D00E               	goto	L6
  6548   0014DE                     l3390:
  6549                           
  6550                           ;LcTLCD.c: 147:    if (Row == 3) Fisics += 0x40+Columns;
  6551   0014DE  0E03               	movlw	3
  6552   0014E0  1861               	xorwf	LcGotoXY@Row^0,w,c
  6553   0014E2  A4D8               	btfss	status,2,c
  6554   0014E4  D022               	goto	l3398
  6555   0014E6  5045               	movf	_Columns^0,w,c
  6556   0014E8  6E62               	movwf	??_LcGotoXY^0,c
  6557   0014EA  6A63               	clrf	(??_LcGotoXY+1)^0,c
  6558   0014EC  0E40               	movlw	64
  6559   0014EE  2662               	addwf	??_LcGotoXY^0,f,c
  6560   0014F0  0E00               	movlw	0
  6561   0014F2  2263               	addwfc	(??_LcGotoXY+1)^0,f,c
  6562   0014F4  5062               	movf	??_LcGotoXY^0,w,c
  6563   0014F6  2666               	addwf	LcGotoXY@Fisics^0,f,c
  6564   0014F8  5063               	movf	(??_LcGotoXY+1)^0,w,c
  6565   0014FA                     L6:
  6566   0014FA  2267               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  6567                           
  6568                           ;LcTLCD.c: 148:    break;
  6569   0014FC  D016               	goto	l3398
  6570   0014FE                     l216:
  6571                           
  6572                           ;LcTLCD.c: 151:    Fisics = Column; break;
  6573   0014FE  C068  F066         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  6574   001502  6A67               	clrf	(LcGotoXY@Fisics+1)^0,c
  6575   001504  D012               	goto	l3398
  6576   001506                     l3396:
  6577   001506  5046               	movf	_Rows^0,w,c
  6578   001508  6E62               	movwf	??_LcGotoXY^0,c
  6579   00150A  6A63               	clrf	(??_LcGotoXY+1)^0,c
  6580                           
  6581                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6582                           ; Switch size 1, requested type "simple"
  6583                           ; Number of cases is 1, Range of values is 0 to 0
  6584                           ; switch strategies available:
  6585                           ; Name         Instructions Cycles
  6586                           ; simple_byte            4     3 (average)
  6587                           ;	Chosen strategy is simple_byte
  6588   00150C  5063               	movf	(??_LcGotoXY+1)^0,w,c
  6589   00150E  0A00               	xorlw	0	; case 0
  6590   001510  A4D8               	btfss	status,2,c
  6591   001512  D7F5               	goto	l216
  6592                           
  6593                           ; Switch size 1, requested type "simple"
  6594                           ; Number of cases is 3, Range of values is 1 to 4
  6595                           ; switch strategies available:
  6596                           ; Name         Instructions Cycles
  6597                           ; simple_byte           10     6 (average)
  6598                           ;	Chosen strategy is simple_byte
  6599   001514  5062               	movf	??_LcGotoXY^0,w,c
  6600   001516  0A01               	xorlw	1	; case 1
  6601   001518  B4D8               	btfsc	status,2,c
  6602   00151A  D7F1               	goto	l216
  6603   00151C  0A03               	xorlw	3	; case 2
  6604   00151E  B4D8               	btfsc	status,2,c
  6605   001520  D7BC               	goto	l3374
  6606   001522  0A06               	xorlw	6	; case 4
  6607   001524  B4D8               	btfsc	status,2,c
  6608   001526  D7CB               	goto	l209
  6609   001528  D7EA               	goto	l216
  6610   00152A                     l3398:
  6611                           
  6612                           ;LcTLCD.c: 154:  WaitForBusy();
  6613   00152A  EC74  F00D         	call	_WaitForBusy	;wreg free
  6614                           
  6615                           ;LcTLCD.c: 155:  CantaIR(0x80 | Fisics);
  6616   00152E  5066               	movf	LcGotoXY@Fisics^0,w,c
  6617   001530  0980               	iorlw	128
  6618   001532  ECE6  F00D         	call	_CantaIR
  6619                           
  6620                           ;LcTLCD.c: 157:  RowAct = Row;
  6621   001536  C061  F044         	movff	LcGotoXY@Row,_RowAct
  6622                           
  6623                           ;LcTLCD.c: 158:  ColumnAct = Column;
  6624   00153A  C068  F043         	movff	LcGotoXY@Column,_ColumnAct
  6625   00153E  0012               	return		;funcret
  6626   001540                     __end_of_LcGotoXY:
  6627                           	callstack 0
  6628                           
  6629 ;; *************** function _CantaData *****************
  6630 ;; Defined at:
  6631 ;;		line 245 in file "LcTLCD.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  Data            1    wreg     unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  Data            1    2[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      void 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1
  6645 ;;      Params:         0       0       0
  6646 ;;      Locals:         1       0       0
  6647 ;;      Temps:          0       0       0
  6648 ;;      Totals:         1       0       0
  6649 ;;Total ram usage:        1 bytes
  6650 ;; Hardware stack levels used: 1
  6651 ;; Hardware stack levels required when called: 3
  6652 ;; This function calls:
  6653 ;;		_CantaPartAlta
  6654 ;;		_CantaPartBaixa
  6655 ;; This function is called by:
  6656 ;;		_LcPutChar
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           	psect	text45
  6661   001B9A                     __ptext45:
  6662                           	callstack 0
  6663   001B9A                     _CantaData:
  6664                           	callstack 25
  6665                           
  6666                           ;incstack = 0
  6667                           ;CantaData@Data stored from wreg
  6668   001B9A  6E55               	movwf	CantaData@Data^0,c
  6669                           
  6670                           ;LcTLCD.c: 246:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  6671   001B9C  9695               	bcf	149,3,c	;volatile
  6672   001B9E  9495               	bcf	149,2,c	;volatile
  6673   001BA0  9295               	bcf	149,1,c	;volatile
  6674   001BA2  9095               	bcf	149,0,c	;volatile
  6675                           
  6676                           ;LcTLCD.c: 247:  (LATDbits.LATD4 = 1);
  6677   001BA4  888C               	bsf	140,4,c	;volatile
  6678                           
  6679                           ;LcTLCD.c: 248:  (LATDbits.LATD5 = 0);
  6680   001BA6  9A8C               	bcf	140,5,c	;volatile
  6681                           
  6682                           ;LcTLCD.c: 249:  (LATDbits.LATD6 = 1);
  6683   001BA8  8C8C               	bsf	140,6,c	;volatile
  6684                           
  6685                           ;LcTLCD.c: 250:  CantaPartAlta(Data);
  6686   001BAA  5055               	movf	CantaData@Data^0,w,c
  6687   001BAC  ECA3  F00C         	call	_CantaPartAlta
  6688                           
  6689                           ;LcTLCD.c: 251:  (LATDbits.LATD6 = 1);
  6690   001BB0  8C8C               	bsf	140,6,c	;volatile
  6691                           
  6692                           ;LcTLCD.c: 252:  (LATDbits.LATD6 = 0);
  6693   001BB2  9C8C               	bcf	140,6,c	;volatile
  6694                           
  6695                           ;LcTLCD.c: 253:  (LATDbits.LATD6 = 0);
  6696   001BB4  9C8C               	bcf	140,6,c	;volatile
  6697                           
  6698                           ;LcTLCD.c: 254:  (LATDbits.LATD6 = 1);
  6699   001BB6  8C8C               	bsf	140,6,c	;volatile
  6700                           
  6701                           ;LcTLCD.c: 255:  CantaPartBaixa(Data);
  6702   001BB8  5055               	movf	CantaData@Data^0,w,c
  6703   001BBA  EC6F  F00C         	call	_CantaPartBaixa
  6704                           
  6705                           ;LcTLCD.c: 256:  (LATDbits.LATD6 = 1);
  6706   001BBE  8C8C               	bsf	140,6,c	;volatile
  6707                           
  6708                           ;LcTLCD.c: 257:  (LATDbits.LATD6 = 0);
  6709   001BC0  9C8C               	bcf	140,6,c	;volatile
  6710                           
  6711                           ;LcTLCD.c: 258:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  6712   001BC2  8695               	bsf	149,3,c	;volatile
  6713   001BC4  8495               	bsf	149,2,c	;volatile
  6714   001BC6  8295               	bsf	149,1,c	;volatile
  6715   001BC8  8095               	bsf	149,0,c	;volatile
  6716   001BCA  0012               	return		;funcret
  6717   001BCC                     __end_of_CantaData:
  6718                           	callstack 0
  6719                           
  6720 ;; *************** function _LcCursorOn *****************
  6721 ;; Defined at:
  6722 ;;		line 120 in file "LcTLCD.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      void 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1
  6736 ;;      Params:         0       0       0
  6737 ;;      Locals:         0       0       0
  6738 ;;      Temps:          0       0       0
  6739 ;;      Totals:         0       0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used: 1
  6742 ;; Hardware stack levels required when called: 4
  6743 ;; This function calls:
  6744 ;;		_CantaIR
  6745 ;;		_WaitForBusy
  6746 ;; This function is called by:
  6747 ;;		_menuLoop
  6748 ;;		_memoryLoop
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text46
  6753   001FD4                     __ptext46:
  6754                           	callstack 0
  6755   001FD4                     _LcCursorOn:
  6756                           	callstack 25
  6757                           
  6758                           ;LcTLCD.c: 123:  WaitForBusy();
  6759                           
  6760                           ;incstack = 0
  6761   001FD4  EC74  F00D         	call	_WaitForBusy	;wreg free
  6762                           
  6763                           ;LcTLCD.c: 124:  CantaIR(0x08 | 0x04 | 0x02);
  6764   001FD8  0E0E               	movlw	14
  6765   001FDA  ECE6  F00D         	call	_CantaIR
  6766   001FDE  0012               	return		;funcret
  6767   001FE0                     __end_of_LcCursorOn:
  6768                           	callstack 0
  6769                           
  6770 ;; *************** function _LcCursorOff *****************
  6771 ;; Defined at:
  6772 ;;		line 127 in file "LcTLCD.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1
  6786 ;;      Params:         0       0       0
  6787 ;;      Locals:         0       0       0
  6788 ;;      Temps:          0       0       0
  6789 ;;      Totals:         0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used: 1
  6792 ;; Hardware stack levels required when called: 4
  6793 ;; This function calls:
  6794 ;;		_CantaIR
  6795 ;;		_WaitForBusy
  6796 ;; This function is called by:
  6797 ;;		_menuLoop
  6798 ;;		_memoryLoop
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text47
  6803   001FE0                     __ptext47:
  6804                           	callstack 0
  6805   001FE0                     _LcCursorOff:
  6806                           	callstack 25
  6807                           
  6808                           ;LcTLCD.c: 130:  WaitForBusy();
  6809                           
  6810                           ;incstack = 0
  6811   001FE0  EC74  F00D         	call	_WaitForBusy	;wreg free
  6812                           
  6813                           ;LcTLCD.c: 131:  CantaIR(0x08 | 0x04);
  6814   001FE4  0E0C               	movlw	12
  6815   001FE6  ECE6  F00D         	call	_CantaIR
  6816   001FEA  0012               	return		;funcret
  6817   001FEC                     __end_of_LcCursorOff:
  6818                           	callstack 0
  6819                           
  6820 ;; *************** function _keypadLoop *****************
  6821 ;; Defined at:
  6822 ;;		line 38 in file "Keypad.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      void 
  6829 ;; Registers used:
  6830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1
  6836 ;;      Params:         0       0       0
  6837 ;;      Locals:         0       0       0
  6838 ;;      Temps:          2       0       0
  6839 ;;      Totals:         2       0       0
  6840 ;;Total ram usage:        2 bytes
  6841 ;; Hardware stack levels used: 1
  6842 ;; Hardware stack levels required when called: 4
  6843 ;; This function calls:
  6844 ;;		_TI_GetTics
  6845 ;;		_TI_ResetTics
  6846 ;;		_getDigit
  6847 ;;		_playMusic
  6848 ;;		_stopMusic
  6849 ;; This function is called by:
  6850 ;;		_main
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text48
  6855   000FBE                     __ptext48:
  6856                           	callstack 0
  6857   000FBE                     _keypadLoop:
  6858                           	callstack 26
  6859                           
  6860                           ;Keypad.c: 40:     switch (state){
  6861                           
  6862                           ;incstack = 0
  6863   000FBE  D086               	goto	l4076
  6864   000FC0                     l718:
  6865                           
  6866                           ;Keypad.c: 43:             if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  6867   000FC0  B681               	btfsc	129,3,c	;volatile
  6868   000FC2  A281               	btfss	129,1,c	;volatile
  6869   000FC4  D00D               	goto	l3998
  6870   000FC6  AA81               	btfss	129,5,c	;volatile
  6871   000FC8  D00B               	goto	l3998
  6872                           
  6873                           ;Keypad.c: 44:                 LATBbits.LATB2=0;
  6874   000FCA  948A               	bcf	138,2,c	;volatile
  6875                           
  6876                           ;Keypad.c: 45:                 LATBbits.LATB7=1;
  6877   000FCC  8E8A               	bsf	138,7,c	;volatile
  6878                           
  6879                           ;Keypad.c: 46:                 LATBbits.LATB6=1;
  6880   000FCE  8C8A               	bsf	138,6,c	;volatile
  6881                           
  6882                           ;Keypad.c: 47:                 LATBbits.LATB4=1;
  6883   000FD0  888A               	bsf	138,4,c	;volatile
  6884                           
  6885                           ;Keypad.c: 48:                 state=1;
  6886   000FD2  0E01               	movlw	1
  6887   000FD4  6E34               	movwf	_state@Keypad$F1158^0,c
  6888                           
  6889                           ;Keypad.c: 49:                 row=0;
  6890   000FD6  0E00               	movlw	0
  6891   000FD8  6E22               	movwf	(_row+1)^0,c
  6892   000FDA  0E00               	movlw	0
  6893   000FDC  6E21               	movwf	_row^0,c
  6894                           
  6895                           ;Keypad.c: 50:             }else{
  6896   000FDE  0012               	return	
  6897   000FE0                     l3998:
  6898                           
  6899                           ;Keypad.c: 51:                 state=4;
  6900   000FE0  0E04               	movlw	4
  6901   000FE2  6E34               	movwf	_state@Keypad$F1158^0,c
  6902   000FE4  0012               	return	
  6903   000FE6                     l722:
  6904                           
  6905                           ;Keypad.c: 55:            if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  6906   000FE6  B681               	btfsc	129,3,c	;volatile
  6907   000FE8  A281               	btfss	129,1,c	;volatile
  6908   000FEA  D7FA               	goto	l3998
  6909   000FEC  AA81               	btfss	129,5,c	;volatile
  6910   000FEE  D7F8               	goto	l3998
  6911                           
  6912                           ;Keypad.c: 56:                 LATBbits.LATB2=1;
  6913   000FF0  848A               	bsf	138,2,c	;volatile
  6914                           
  6915                           ;Keypad.c: 57:                 LATBbits.LATB7=0;
  6916   000FF2  9E8A               	bcf	138,7,c	;volatile
  6917                           
  6918                           ;Keypad.c: 58:                 LATBbits.LATB6=1;
  6919   000FF4  8C8A               	bsf	138,6,c	;volatile
  6920                           
  6921                           ;Keypad.c: 59:                 LATBbits.LATB4=1;
  6922   000FF6  888A               	bsf	138,4,c	;volatile
  6923                           
  6924                           ;Keypad.c: 60:                 state=2;
  6925   000FF8  0E02               	movlw	2
  6926   000FFA  6E34               	movwf	_state@Keypad$F1158^0,c
  6927                           
  6928                           ;Keypad.c: 61:                 row=1;
  6929   000FFC  0E00               	movlw	0
  6930   000FFE  6E22               	movwf	(_row+1)^0,c
  6931   001000  0E01               	movlw	1
  6932   001002  6E21               	movwf	_row^0,c
  6933                           
  6934                           ;Keypad.c: 63:             }else{
  6935   001004  0012               	return	
  6936   001006                     l725:
  6937                           
  6938                           ;Keypad.c: 68:             if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  6939   001006  B681               	btfsc	129,3,c	;volatile
  6940   001008  A281               	btfss	129,1,c	;volatile
  6941   00100A  D7EA               	goto	l3998
  6942   00100C  AA81               	btfss	129,5,c	;volatile
  6943   00100E  D7E8               	goto	l3998
  6944                           
  6945                           ;Keypad.c: 69:                 LATBbits.LATB2=1;
  6946   001010  848A               	bsf	138,2,c	;volatile
  6947                           
  6948                           ;Keypad.c: 70:                 LATBbits.LATB7=1;
  6949   001012  8E8A               	bsf	138,7,c	;volatile
  6950                           
  6951                           ;Keypad.c: 71:                 LATBbits.LATB6=0;
  6952   001014  9C8A               	bcf	138,6,c	;volatile
  6953                           
  6954                           ;Keypad.c: 72:                 LATBbits.LATB4=1;
  6955   001016  888A               	bsf	138,4,c	;volatile
  6956                           
  6957                           ;Keypad.c: 73:                 state=3;
  6958   001018  0E03               	movlw	3
  6959   00101A  6E34               	movwf	_state@Keypad$F1158^0,c
  6960                           
  6961                           ;Keypad.c: 74:                 row=2;
  6962   00101C  0E00               	movlw	0
  6963   00101E  6E22               	movwf	(_row+1)^0,c
  6964   001020  0E02               	movlw	2
  6965   001022  6E21               	movwf	_row^0,c
  6966                           
  6967                           ;Keypad.c: 75:             }else{
  6968   001024  0012               	return	
  6969   001026                     l728:
  6970                           
  6971                           ;Keypad.c: 80:             if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  6972   001026  B681               	btfsc	129,3,c	;volatile
  6973   001028  A281               	btfss	129,1,c	;volatile
  6974   00102A  D7DA               	goto	l3998
  6975   00102C  AA81               	btfss	129,5,c	;volatile
  6976   00102E  D7D8               	goto	l3998
  6977                           
  6978                           ;Keypad.c: 81:                 LATBbits.LATB2=1;
  6979   001030  848A               	bsf	138,2,c	;volatile
  6980                           
  6981                           ;Keypad.c: 82:                 LATBbits.LATB7=1;
  6982   001032  8E8A               	bsf	138,7,c	;volatile
  6983                           
  6984                           ;Keypad.c: 83:                 LATBbits.LATB6=1;
  6985   001034  8C8A               	bsf	138,6,c	;volatile
  6986                           
  6987                           ;Keypad.c: 84:                 LATBbits.LATB4=0;
  6988   001036  988A               	bcf	138,4,c	;volatile
  6989                           
  6990                           ;Keypad.c: 85:                 row=3;
  6991   001038  0E00               	movlw	0
  6992   00103A  6E22               	movwf	(_row+1)^0,c
  6993   00103C  0E03               	movlw	3
  6994   00103E  6E21               	movwf	_row^0,c
  6995                           
  6996                           ;Keypad.c: 86:                 state=0;
  6997   001040  0E00               	movlw	0
  6998   001042  6E34               	movwf	_state@Keypad$F1158^0,c
  6999                           
  7000                           ;Keypad.c: 87:             }else{
  7001   001044  0012               	return	
  7002   001046                     l4030:
  7003                           
  7004                           ;Keypad.c: 92:             state=5;
  7005   001046  0E05               	movlw	5
  7006   001048  6E34               	movwf	_state@Keypad$F1158^0,c
  7007                           
  7008                           ;Keypad.c: 93:             TI_ResetTics(debouncerTimer);
  7009   00104A  504D               	movf	_debouncerTimer^0,w,c
  7010   00104C  EC59  F00E         	call	_TI_ResetTics
  7011                           
  7012                           ;Keypad.c: 94:             break;
  7013   001050  0012               	return	
  7014   001052                     l4034:
  7015                           
  7016                           ;Keypad.c: 96:             if (TI_GetTics(debouncerTimer) >= 64){
  7017   001052  504D               	movf	_debouncerTimer^0,w,c
  7018   001054  EC05  F00D         	call	_TI_GetTics
  7019   001058  5056               	movf	(?_TI_GetTics+3)^0,w,c
  7020   00105A  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  7021   00105C  1054               	iorwf	(?_TI_GetTics+1)^0,w,c
  7022   00105E  E104               	bnz	u3310
  7023   001060  0E40               	movlw	64
  7024   001062  5C53               	subwf	?_TI_GetTics^0,w,c
  7025   001064  A0D8               	btfss	status,0,c
  7026   001066  0012               	return	
  7027   001068                     u3310:
  7028                           
  7029                           ;Keypad.c: 97:                 if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  7030   001068  B681               	btfsc	129,3,c	;volatile
  7031   00106A  A281               	btfss	129,1,c	;volatile
  7032   00106C  D005               	goto	l4044
  7033   00106E  AA81               	btfss	129,5,c	;volatile
  7034   001070  D003               	goto	l4044
  7035   001072                     u3340:
  7036                           
  7037                           ;Keypad.c: 98:                     state = 0;
  7038   001072  0E00               	movlw	0
  7039   001074  6E34               	movwf	_state@Keypad$F1158^0,c
  7040                           
  7041                           ;Keypad.c: 99:                 } else{
  7042   001076  0012               	return	
  7043   001078                     l4044:
  7044                           
  7045                           ;Keypad.c: 100:                     keyPressed = 1;
  7046   001078  0E01               	movlw	1
  7047   00107A  6E30               	movwf	_keyPressed^0,c
  7048                           
  7049                           ;Keypad.c: 101:                     playMusic(getDigit());
  7050   00107C  ECB7  F00E         	call	_getDigit	;wreg free
  7051   001080  EC97  F00F         	call	_playMusic
  7052   001084                     l4048:
  7053                           
  7054                           ;Keypad.c: 102:                     state = 6;
  7055   001084  0E06               	movlw	6
  7056   001086  6E34               	movwf	_state@Keypad$F1158^0,c
  7057   001088  0012               	return	
  7058   00108A                     l736:
  7059                           
  7060                           ;Keypad.c: 107:             if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  7061   00108A  A681               	btfss	129,3,c	;volatile
  7062   00108C  0012               	return	
  7063   00108E  A281               	btfss	129,1,c	;volatile
  7064   001090  0012               	return	
  7065   001092  AA81               	btfss	129,5,c	;volatile
  7066   001094  0012               	return	
  7067                           
  7068                           ;Keypad.c: 108:                 TI_ResetTics(debouncerTimer);
  7069   001096  504D               	movf	_debouncerTimer^0,w,c
  7070   001098  EC59  F00E         	call	_TI_ResetTics
  7071                           
  7072                           ;Keypad.c: 109:                 state = 7;
  7073   00109C  0E07               	movlw	7
  7074   00109E  6E34               	movwf	_state@Keypad$F1158^0,c
  7075   0010A0  0012               	return	
  7076   0010A2                     l4058:
  7077                           
  7078                           ;Keypad.c: 113:             if (TI_GetTics(debouncerTimer) >= 64){
  7079   0010A2  504D               	movf	_debouncerTimer^0,w,c
  7080   0010A4  EC05  F00D         	call	_TI_GetTics
  7081   0010A8  5056               	movf	(?_TI_GetTics+3)^0,w,c
  7082   0010AA  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  7083   0010AC  1054               	iorwf	(?_TI_GetTics+1)^0,w,c
  7084   0010AE  E104               	bnz	u3380
  7085   0010B0  0E40               	movlw	64
  7086   0010B2  5C53               	subwf	?_TI_GetTics^0,w,c
  7087   0010B4  A0D8               	btfss	status,0,c
  7088   0010B6  0012               	return	
  7089   0010B8                     u3380:
  7090                           
  7091                           ;Keypad.c: 114:                 if (PORTBbits.RB3 && PORTBbits.RB1 && PORTBbits.RB5){
  7092   0010B8  B681               	btfsc	129,3,c	;volatile
  7093   0010BA  A281               	btfss	129,1,c	;volatile
  7094   0010BC  D7E3               	goto	l4048
  7095   0010BE  AA81               	btfss	129,5,c	;volatile
  7096   0010C0  D7E1               	goto	l4048
  7097                           
  7098                           ;Keypad.c: 115:                     stopMusic();
  7099   0010C2  EC19  F000         	call	_stopMusic	;wreg free
  7100                           
  7101                           ;Keypad.c: 116:                     keyPressed = 0;
  7102   0010C6  0E00               	movlw	0
  7103   0010C8  6E30               	movwf	_keyPressed^0,c
  7104   0010CA  D7D3               	goto	u3340
  7105   0010CC                     l4076:
  7106   0010CC  5034               	movf	_state@Keypad$F1158^0,w,c
  7107   0010CE  6E60               	movwf	??_keypadLoop^0,c
  7108   0010D0  6A61               	clrf	(??_keypadLoop+1)^0,c
  7109                           
  7110                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7111                           ; Switch size 1, requested type "simple"
  7112                           ; Number of cases is 1, Range of values is 0 to 0
  7113                           ; switch strategies available:
  7114                           ; Name         Instructions Cycles
  7115                           ; simple_byte            4     3 (average)
  7116                           ;	Chosen strategy is simple_byte
  7117   0010D2  5061               	movf	(??_keypadLoop+1)^0,w,c
  7118   0010D4  0A00               	xorlw	0	; case 0
  7119   0010D6  A4D8               	btfss	status,2,c
  7120   0010D8  0012               	return	
  7121                           
  7122                           ; Switch size 1, requested type "simple"
  7123                           ; Number of cases is 8, Range of values is 0 to 7
  7124                           ; switch strategies available:
  7125                           ; Name         Instructions Cycles
  7126                           ; simple_byte           25    13 (average)
  7127                           ;	Chosen strategy is simple_byte
  7128   0010DA  5060               	movf	??_keypadLoop^0,w,c
  7129   0010DC  0A00               	xorlw	0	; case 0
  7130   0010DE  B4D8               	btfsc	status,2,c
  7131   0010E0  D76F               	goto	l718
  7132   0010E2  0A01               	xorlw	1	; case 1
  7133   0010E4  B4D8               	btfsc	status,2,c
  7134   0010E6  D77F               	goto	l722
  7135   0010E8  0A03               	xorlw	3	; case 2
  7136   0010EA  B4D8               	btfsc	status,2,c
  7137   0010EC  D78C               	goto	l725
  7138   0010EE  0A01               	xorlw	1	; case 3
  7139   0010F0  B4D8               	btfsc	status,2,c
  7140   0010F2  D799               	goto	l728
  7141   0010F4  0A07               	xorlw	7	; case 4
  7142   0010F6  B4D8               	btfsc	status,2,c
  7143   0010F8  D7A6               	goto	l4030
  7144   0010FA  0A01               	xorlw	1	; case 5
  7145   0010FC  B4D8               	btfsc	status,2,c
  7146   0010FE  D7A9               	goto	l4034
  7147   001100  0A03               	xorlw	3	; case 6
  7148   001102  B4D8               	btfsc	status,2,c
  7149   001104  D7C2               	goto	l736
  7150   001106  0A01               	xorlw	1	; case 7
  7151   001108  A4D8               	btfss	status,2,c
  7152   00110A  0012               	return	
  7153   00110C  D7CA               	goto	l4058
  7154   00110E                     __end_of_keypadLoop:
  7155                           	callstack 0
  7156                           
  7157 ;; *************** function _stopMusic *****************
  7158 ;; Defined at:
  7159 ;;		line 41 in file "Audio.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;		None
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;		None
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      void 
  7166 ;; Registers used:
  7167 ;;		wreg, status,2
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1
  7173 ;;      Params:         0       0       0
  7174 ;;      Locals:         0       0       0
  7175 ;;      Temps:          0       0       0
  7176 ;;      Totals:         0       0       0
  7177 ;;Total ram usage:        0 bytes
  7178 ;; Hardware stack levels used: 1
  7179 ;; Hardware stack levels required when called: 2
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_menuLoop
  7184 ;;		_keypadLoop
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text49
  7189   000032                     __ptext49:
  7190                           	callstack 0
  7191   000032                     _stopMusic:
  7192                           	callstack 27
  7193                           
  7194                           ;Audio.c: 42:     state = 0;
  7195                           
  7196                           ;incstack = 0
  7197   000032  0E00               	movlw	0
  7198   000034  6E39               	movwf	_state@Audio$F899^0,c
  7199   000036  0012               	return		;funcret
  7200   000038                     __end_of_stopMusic:
  7201                           	callstack 0
  7202                           
  7203 ;; *************** function _playMusic *****************
  7204 ;; Defined at:
  7205 ;;		line 45 in file "Audio.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;  aux             1    wreg     unsigned char 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  aux             1    1[COMRAM] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1
  7219 ;;      Params:         0       0       0
  7220 ;;      Locals:         1       0       0
  7221 ;;      Temps:          0       0       0
  7222 ;;      Totals:         1       0       0
  7223 ;;Total ram usage:        1 bytes
  7224 ;; Hardware stack levels used: 1
  7225 ;; Hardware stack levels required when called: 3
  7226 ;; This function calls:
  7227 ;;		_TI_ResetTics
  7228 ;; This function is called by:
  7229 ;;		_menuLoop
  7230 ;;		_keypadLoop
  7231 ;; This function uses a non-reentrant model
  7232 ;;
  7233                           
  7234                           	psect	text50
  7235   001F2E                     __ptext50:
  7236                           	callstack 0
  7237   001F2E                     _playMusic:
  7238                           	callstack 26
  7239                           
  7240                           ;incstack = 0
  7241                           ;playMusic@aux stored from wreg
  7242   001F2E  6E54               	movwf	playMusic@aux^0,c
  7243                           
  7244                           ;Audio.c: 46:     TI_ResetTics(pTime);
  7245   001F30  5050               	movf	_pTime^0,w,c
  7246   001F32  EC59  F00E         	call	_TI_ResetTics
  7247                           
  7248                           ;Audio.c: 47:     period = aux;
  7249   001F36  C054  F038         	movff	playMusic@aux,_period
  7250                           
  7251                           ;Audio.c: 48:     state = 1;
  7252   001F3A  0E01               	movlw	1
  7253   001F3C  6E39               	movwf	_state@Audio$F899^0,c
  7254   001F3E  0012               	return		;funcret
  7255   001F40                     __end_of_playMusic:
  7256                           	callstack 0
  7257                           
  7258 ;; *************** function _getDigit *****************
  7259 ;; Defined at:
  7260 ;;		line 175 in file "Keypad.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;		None
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;		None
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      unsigned char 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0, prodl, prodh
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1
  7274 ;;      Params:         0       0       0
  7275 ;;      Locals:         0       0       0
  7276 ;;      Temps:          0       0       0
  7277 ;;      Totals:         0       0       0
  7278 ;;Total ram usage:        0 bytes
  7279 ;; Hardware stack levels used: 1
  7280 ;; Hardware stack levels required when called: 2
  7281 ;; This function calls:
  7282 ;;		Nothing
  7283 ;; This function is called by:
  7284 ;;		_keypadLoop
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text51
  7289   001D6E                     __ptext51:
  7290                           	callstack 0
  7291   001D6E                     _getDigit:
  7292                           	callstack 27
  7293                           
  7294                           ;Keypad.c: 176:    if (!PORTBbits.RB1) {
  7295                           
  7296                           ;incstack = 0
  7297   001D6E  B281               	btfsc	129,1,c	;volatile
  7298   001D70  D004               	goto	l769
  7299                           
  7300                           ;Keypad.c: 177:         return row*3;
  7301   001D72  5021               	movf	_row^0,w,c
  7302   001D74  0D03               	mullw	3
  7303   001D76  50F3               	movf	243,w,c
  7304   001D78  0012               	return	
  7305   001D7A                     l769:
  7306   001D7A  B681               	btfsc	129,3,c	;volatile
  7307   001D7C  D004               	goto	l2094
  7308                           
  7309                           ;Keypad.c: 179:         return (row*3)+1;
  7310   001D7E  5021               	movf	_row^0,w,c
  7311   001D80  0D03               	mullw	3
  7312   001D82  28F3               	incf	243,w,c
  7313   001D84  0012               	return	
  7314   001D86                     l2094:
  7315                           
  7316                           ;Keypad.c: 181:         return (row*3)+2;
  7317   001D86  5021               	movf	_row^0,w,c
  7318   001D88  0D03               	mullw	3
  7319   001D8A  50F3               	movf	243,w,c
  7320   001D8C  0F02               	addlw	2
  7321   001D8E  0012               	return		;funcret
  7322   001D90                     __end_of_getDigit:
  7323                           	callstack 0
  7324                           
  7325 ;; *************** function _joystickLoop *****************
  7326 ;; Defined at:
  7327 ;;		line 25 in file "Joystick.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;		None
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, status,2, status,0
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1
  7341 ;;      Params:         0       0       0
  7342 ;;      Locals:         1       0       0
  7343 ;;      Temps:          2       0       0
  7344 ;;      Totals:         3       0       0
  7345 ;;Total ram usage:        3 bytes
  7346 ;; Hardware stack levels used: 1
  7347 ;; Hardware stack levels required when called: 2
  7348 ;; This function calls:
  7349 ;;		Nothing
  7350 ;; This function is called by:
  7351 ;;		_main
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text52
  7356   0013DE                     __ptext52:
  7357                           	callstack 0
  7358   0013DE                     _joystickLoop:
  7359                           	callstack 28
  7360                           
  7361                           ;Joystick.c: 26:     switch (state){
  7362                           
  7363                           ;incstack = 0
  7364   0013DE  D043               	goto	l3982
  7365   0013E0                     l76:
  7366                           
  7367                           ;Joystick.c: 28:             if (ADCON0bits.GO_DONE == 0){
  7368   0013E0  B2C2               	btfsc	194,1,c	;volatile
  7369   0013E2  0012               	return	
  7370                           
  7371                           ;Joystick.c: 29:                 y = ADRESH;
  7372   0013E4  CFC4 F047          	movff	4036,_y	;volatile
  7373                           
  7374                           ;Joystick.c: 30:                 ADCON0bits.CHS0=1;
  7375   0013E8  84C2               	bsf	194,2,c	;volatile
  7376                           
  7377                           ;Joystick.c: 31:                 ADCON0bits.CHS1=0;
  7378   0013EA  96C2               	bcf	194,3,c	;volatile
  7379                           
  7380                           ;Joystick.c: 32:                 ADCON0bits.GO_DONE=1;
  7381   0013EC  82C2               	bsf	194,1,c	;volatile
  7382                           
  7383                           ;Joystick.c: 33:                 state = 1;
  7384   0013EE  0E01               	movlw	1
  7385   0013F0  6E4B               	movwf	_state^0,c
  7386   0013F2  0012               	return	
  7387   0013F4                     l79:
  7388                           
  7389                           ;Joystick.c: 37:             if (ADCON0bits.GO_DONE == 0){
  7390   0013F4  B2C2               	btfsc	194,1,c	;volatile
  7391   0013F6  0012               	return	
  7392                           
  7393                           ;Joystick.c: 38:                 x = ADRESH;
  7394   0013F8  CFC4 F048          	movff	4036,_x	;volatile
  7395                           
  7396                           ;Joystick.c: 39:                 ADCON0bits.CHS0=0;
  7397   0013FC  94C2               	bcf	194,2,c	;volatile
  7398                           
  7399                           ;Joystick.c: 40:                 ADCON0bits.CHS1=1;
  7400   0013FE  86C2               	bsf	194,3,c	;volatile
  7401                           
  7402                           ;Joystick.c: 41:                 state = 2;
  7403   001400  0E02               	movlw	2
  7404   001402  6E4B               	movwf	_state^0,c
  7405   001404  0012               	return	
  7406   001406                     l3948:
  7407                           
  7408                           ;Joystick.c: 45:             state = 3;
  7409   001406  0E03               	movlw	3
  7410   001408  6E4B               	movwf	_state^0,c
  7411                           
  7412                           ;Joystick.c: 46:             if (hasMoved) {
  7413   00140A  5049               	movf	_hasMoved^0,w,c
  7414   00140C  B4D8               	btfsc	status,2,c
  7415   00140E  D009               	goto	l3956
  7416                           
  7417                           ;Joystick.c: 47:                 if (y >= 100 && y <= 150) {
  7418   001410  0E63               	movlw	99
  7419   001412  6447               	cpfsgt	_y^0,c
  7420   001414  0012               	return	
  7421   001416  0E97               	movlw	151
  7422   001418  6047               	cpfslt	_y^0,c
  7423   00141A  0012               	return	
  7424                           
  7425                           ;Joystick.c: 48:                     hasMoved = 0;
  7426   00141C  0E00               	movlw	0
  7427   00141E  6E49               	movwf	_hasMoved^0,c
  7428   001420  0012               	return	
  7429   001422                     l3956:
  7430                           
  7431                           ;Joystick.c: 51:                 if (x <= 30 || x >= 220 || y <= 30 || y >= 220) {
  7432   001422  0E1E               	movlw	30
  7433   001424  6448               	cpfsgt	_x^0,c
  7434   001426  D009               	goto	u3160
  7435   001428  0EDC               	movlw	220
  7436   00142A  6048               	cpfslt	_x^0,c
  7437   00142C  D006               	goto	u3160
  7438   00142E  0E1E               	movlw	30
  7439   001430  6447               	cpfsgt	_y^0,c
  7440   001432  D003               	goto	u3160
  7441   001434  0EDB               	movlw	219
  7442   001436  6447               	cpfsgt	_y^0,c
  7443   001438  0012               	return	
  7444   00143A                     u3160:
  7445                           
  7446                           ;Joystick.c: 52:                     direction = (x <= 30 || y <= 30) ? 0 : 1;
  7447   00143A  0E00               	movlw	0
  7448   00143C  6E55               	movwf	_joystickLoop$265^0,c
  7449   00143E  0E1E               	movlw	30
  7450   001440  6448               	cpfsgt	_x^0,c
  7451   001442  D005               	goto	l3972
  7452   001444  0E1E               	movlw	30
  7453   001446  6447               	cpfsgt	_y^0,c
  7454   001448  D002               	goto	l3972
  7455   00144A  0E01               	movlw	1
  7456   00144C  6E55               	movwf	_joystickLoop$265^0,c
  7457   00144E                     l3972:
  7458   00144E  C055  F04A         	movff	_joystickLoop$265,_direction
  7459                           
  7460                           ;Joystick.c: 53:                     hasMoved = 1;
  7461   001452  0E01               	movlw	1
  7462   001454  6E49               	movwf	_hasMoved^0,c
  7463   001456  0012               	return	
  7464   001458                     l3974:
  7465                           
  7466                           ;Joystick.c: 58:             state = 0;
  7467   001458  0E00               	movlw	0
  7468   00145A  6E4B               	movwf	_state^0,c
  7469                           
  7470                           ;Joystick.c: 59:             ADCON0bits.GO_DONE=1;
  7471   00145C  82C2               	bsf	194,1,c	;volatile
  7472                           
  7473                           ;Joystick.c: 60:             break;
  7474   00145E  0012               	return	
  7475   001460                     l3978:
  7476                           
  7477                           ;Joystick.c: 64:             state = 0;
  7478   001460  0E00               	movlw	0
  7479   001462  6E4B               	movwf	_state^0,c
  7480                           
  7481                           ;Joystick.c: 65:             break;
  7482   001464  0012               	return	
  7483   001466                     l3982:
  7484   001466  504B               	movf	_state^0,w,c
  7485   001468  6E53               	movwf	??_joystickLoop^0,c
  7486   00146A  6A54               	clrf	(??_joystickLoop+1)^0,c
  7487                           
  7488                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7489                           ; Switch size 1, requested type "simple"
  7490                           ; Number of cases is 1, Range of values is 0 to 0
  7491                           ; switch strategies available:
  7492                           ; Name         Instructions Cycles
  7493                           ; simple_byte            4     3 (average)
  7494                           ;	Chosen strategy is simple_byte
  7495   00146C  5054               	movf	(??_joystickLoop+1)^0,w,c
  7496   00146E  0A00               	xorlw	0	; case 0
  7497   001470  A4D8               	btfss	status,2,c
  7498   001472  D7F6               	goto	l3978
  7499                           
  7500                           ; Switch size 1, requested type "simple"
  7501                           ; Number of cases is 5, Range of values is 0 to 4
  7502                           ; switch strategies available:
  7503                           ; Name         Instructions Cycles
  7504                           ; simple_byte           16     9 (average)
  7505                           ;	Chosen strategy is simple_byte
  7506   001474  5053               	movf	??_joystickLoop^0,w,c
  7507   001476  0A00               	xorlw	0	; case 0
  7508   001478  B4D8               	btfsc	status,2,c
  7509   00147A  D7B2               	goto	l76
  7510   00147C  0A01               	xorlw	1	; case 1
  7511   00147E  B4D8               	btfsc	status,2,c
  7512   001480  D7B9               	goto	l79
  7513   001482  0A03               	xorlw	3	; case 2
  7514   001484  B4D8               	btfsc	status,2,c
  7515   001486  D7BF               	goto	l3948
  7516   001488  0A01               	xorlw	1	; case 3
  7517   00148A  B4D8               	btfsc	status,2,c
  7518   00148C  D7E5               	goto	l3974
  7519   00148E  0A07               	xorlw	7	; case 4
  7520   001490  B4D8               	btfsc	status,2,c
  7521   001492  0012               	return		;funcret
  7522   001494  D7E5               	goto	l3978
  7523   001496                     __end_of_joystickLoop:
  7524                           	callstack 0
  7525                           
  7526 ;; *************** function _initSysTimer *****************
  7527 ;; Defined at:
  7528 ;;		line 12 in file "SystemTimer.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;		None
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  1    wreg      void 
  7535 ;; Registers used:
  7536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 3F/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMRAM   BANK0   BANK1
  7542 ;;      Params:         0       0       0
  7543 ;;      Locals:         0       0       0
  7544 ;;      Temps:          0       0       0
  7545 ;;      Totals:         0       0       0
  7546 ;;Total ram usage:        0 bytes
  7547 ;; Hardware stack levels used: 1
  7548 ;; Hardware stack levels required when called: 3
  7549 ;; This function calls:
  7550 ;;		_TI_NewTimer
  7551 ;; This function is called by:
  7552 ;;		_main
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text53
  7557   001E5C                     __ptext53:
  7558                           	callstack 0
  7559   001E5C                     _initSysTimer:
  7560                           	callstack 27
  7561                           
  7562                           ;SystemTimer.c: 13:     TI_NewTimer(&sysTmr);
  7563                           
  7564                           ;incstack = 0
  7565   001E5C  0E4E               	movlw	low _sysTmr
  7566   001E5E  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7567   001E60  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7568   001E62  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7569                           
  7570                           ;SystemTimer.c: 14:     timestamp[0].minutes = 0;
  7571   001E66  0E00               	movlw	0
  7572   001E68  0100               	movlb	0	; () banked
  7573   001E6A  6FDC               	movwf	_timestamp& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;SystemTimer.c: 15:     timestamp[0].seconds = 0;
  7577   001E6C  0E00               	movlw	0
  7578   001E6E  6FDD               	movwf	(_timestamp+1)& (0+255),b
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;SystemTimer.c: 16:     state = 0;
  7582   001E70  0E00               	movlw	0
  7583   001E72  6E37               	movwf	_state@SystemTimer$F935^0,c
  7584                           
  7585                           ; BSR set to: 0
  7586   001E74  0012               	return		;funcret
  7587   001E76                     __end_of_initSysTimer:
  7588                           	callstack 0
  7589                           
  7590 ;; *************** function _initSIO *****************
  7591 ;; Defined at:
  7592 ;;		line 3 in file "SIO.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2
  7601 ;; Tracked objects:
  7602 ;;		On entry : 3F/0
  7603 ;;		On exit  : 3F/0
  7604 ;;		Unchanged: 3F/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1
  7606 ;;      Params:         0       0       0
  7607 ;;      Locals:         0       0       0
  7608 ;;      Temps:          0       0       0
  7609 ;;      Totals:         0       0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used: 1
  7612 ;; Hardware stack levels required when called: 2
  7613 ;; This function calls:
  7614 ;;		Nothing
  7615 ;; This function is called by:
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text54
  7621   001E0C                     __ptext54:
  7622                           	callstack 0
  7623   001E0C                     _initSIO:
  7624                           	callstack 28
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;SIO.c: 4:     SPBRGH = 0;
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;incstack = 0
  7631   001E0C  0E00               	movlw	0
  7632   001E0E  6EB0               	movwf	176,c	;volatile
  7633                           
  7634                           ;SIO.c: 5:     SPBRG = 172;
  7635   001E10  0EAC               	movlw	172
  7636   001E12  6EAF               	movwf	175,c	;volatile
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;SIO.c: 6:     BAUDCONbits.BRG16 = 1;
  7640   001E14  86B8               	bsf	184,3,c	;volatile
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;SIO.c: 7:     BAUDCONbits.ABDEN = 0;
  7644   001E16  90B8               	bcf	184,0,c	;volatile
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;SIO.c: 8:     TXSTAbits.BRGH = 1;
  7648   001E18  84AC               	bsf	172,2,c	;volatile
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;SIO.c: 9:     TXSTAbits.SYNC = 0;
  7652   001E1A  98AC               	bcf	172,4,c	;volatile
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;SIO.c: 10:     TXSTAbits.TXEN = 1;
  7656   001E1C  8AAC               	bsf	172,5,c	;volatile
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;SIO.c: 11:     RCSTAbits.SPEN = 1;
  7660   001E1E  8EAB               	bsf	171,7,c	;volatile
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;SIO.c: 12:     RCSTAbits.CREN = 1;
  7664   001E20  88AB               	bsf	171,4,c	;volatile
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;SIO.c: 14:     TRISCbits.RC6 = 1;
  7668   001E22  8C94               	bsf	148,6,c	;volatile
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;SIO.c: 15:     TRISCbits.RC7 = 1;
  7672   001E24  8E94               	bsf	148,7,c	;volatile
  7673                           
  7674                           ; BSR set to: 0
  7675   001E26  0012               	return		;funcret
  7676   001E28                     __end_of_initSIO:
  7677                           	callstack 0
  7678                           
  7679 ;; *************** function _initMenu *****************
  7680 ;; Defined at:
  7681 ;;		line 40 in file "Menu.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1
  7695 ;;      Params:         0       0       0
  7696 ;;      Locals:         0       0       0
  7697 ;;      Temps:          0       0       0
  7698 ;;      Totals:         0       0       0
  7699 ;;Total ram usage:        0 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; Hardware stack levels required when called: 3
  7702 ;; This function calls:
  7703 ;;		_TI_NewTimer
  7704 ;; This function is called by:
  7705 ;;		_main
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           	psect	text55
  7710   001F04                     __ptext55:
  7711                           	callstack 0
  7712   001F04                     _initMenu:
  7713                           	callstack 27
  7714                           
  7715                           ;Menu.c: 41:     TI_NewTimer(&timer);
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;incstack = 0
  7719   001F04  0E52               	movlw	low _timer
  7720   001F06  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7721   001F08  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7722   001F0A  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7723                           
  7724                           ;Menu.c: 42:     TI_NewTimer(&songTimer);
  7725   001F0E  0E51               	movlw	low _songTimer
  7726   001F10  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7727   001F12  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7728   001F14  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7729   001F18  0012               	return		;funcret
  7730   001F1A                     __end_of_initMenu:
  7731                           	callstack 0
  7732                           
  7733 ;; *************** function _initKeypad *****************
  7734 ;; Defined at:
  7735 ;;		line 21 in file "Keypad.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;		None
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;		None
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  1    wreg      void 
  7742 ;; Registers used:
  7743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1
  7749 ;;      Params:         0       0       0
  7750 ;;      Locals:         0       0       0
  7751 ;;      Temps:          0       0       0
  7752 ;;      Totals:         0       0       0
  7753 ;;Total ram usage:        0 bytes
  7754 ;; Hardware stack levels used: 1
  7755 ;; Hardware stack levels required when called: 3
  7756 ;; This function calls:
  7757 ;;		_TI_NewTimer
  7758 ;; This function is called by:
  7759 ;;		_main
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text56
  7764   001D26                     __ptext56:
  7765                           	callstack 0
  7766   001D26                     _initKeypad:
  7767                           	callstack 27
  7768                           
  7769                           ;Keypad.c: 22:     INTCON2bits.RBPU = 0;
  7770                           
  7771                           ;incstack = 0
  7772   001D26  9EF1               	bcf	241,7,c	;volatile
  7773                           
  7774                           ;Keypad.c: 24:     TRISBbits.TRISB1 = 1;
  7775   001D28  8293               	bsf	147,1,c	;volatile
  7776                           
  7777                           ;Keypad.c: 25:     TRISBbits.TRISB2 = 0;
  7778   001D2A  9493               	bcf	147,2,c	;volatile
  7779                           
  7780                           ;Keypad.c: 26:     TRISBbits.TRISB3 = 1;
  7781   001D2C  8693               	bsf	147,3,c	;volatile
  7782                           
  7783                           ;Keypad.c: 27:     TRISBbits.TRISB4 = 0;
  7784   001D2E  9893               	bcf	147,4,c	;volatile
  7785                           
  7786                           ;Keypad.c: 28:     TRISBbits.TRISB5 = 1;
  7787   001D30  8A93               	bsf	147,5,c	;volatile
  7788                           
  7789                           ;Keypad.c: 29:     TRISBbits.TRISB6 = 0;
  7790   001D32  9C93               	bcf	147,6,c	;volatile
  7791                           
  7792                           ;Keypad.c: 30:     TRISBbits.TRISB7 = 0;
  7793   001D34  9E93               	bcf	147,7,c	;volatile
  7794                           
  7795                           ;Keypad.c: 31:     TI_NewTimer(&debouncerTimer);
  7796   001D36  0E4D               	movlw	low _debouncerTimer
  7797   001D38  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7798   001D3A  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7799   001D3C  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7800                           
  7801                           ;Keypad.c: 32:     TI_NewTimer(&SMSTimer);
  7802   001D40  0E4C               	movlw	low _SMSTimer
  7803   001D42  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7804   001D44  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7805   001D46  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7806   001D4A  0012               	return		;funcret
  7807   001D4C                     __end_of_initKeypad:
  7808                           	callstack 0
  7809                           
  7810 ;; *************** function _initJoystick *****************
  7811 ;; Defined at:
  7812 ;;		line 10 in file "Joystick.c"
  7813 ;; Parameters:    Size  Location     Type
  7814 ;;		None
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;		None
  7817 ;; Return value:  Size  Location     Type
  7818 ;;                  1    wreg      void 
  7819 ;; Registers used:
  7820 ;;		wreg, status,2
  7821 ;; Tracked objects:
  7822 ;;		On entry : 0/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMRAM   BANK0   BANK1
  7826 ;;      Params:         0       0       0
  7827 ;;      Locals:         0       0       0
  7828 ;;      Temps:          0       0       0
  7829 ;;      Totals:         0       0       0
  7830 ;;Total ram usage:        0 bytes
  7831 ;; Hardware stack levels used: 1
  7832 ;; Hardware stack levels required when called: 2
  7833 ;; This function calls:
  7834 ;;		Nothing
  7835 ;; This function is called by:
  7836 ;;		_main
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text57
  7841   001DB0                     __ptext57:
  7842                           	callstack 0
  7843   001DB0                     _initJoystick:
  7844                           	callstack 28
  7845                           
  7846                           ;Joystick.c: 11:     TRISAbits.TRISA0 = 1;
  7847                           
  7848                           ;incstack = 0
  7849   001DB0  8092               	bsf	146,0,c	;volatile
  7850                           
  7851                           ;Joystick.c: 12:     TRISAbits.TRISA1 = 1;
  7852   001DB2  8292               	bsf	146,1,c	;volatile
  7853                           
  7854                           ;Joystick.c: 13:     ADCON0 = 0x03;
  7855   001DB4  0E03               	movlw	3
  7856   001DB6  6EC2               	movwf	194,c	;volatile
  7857                           
  7858                           ;Joystick.c: 14:     ADCON1 = 0x0C;
  7859   001DB8  0E0C               	movlw	12
  7860   001DBA  6EC1               	movwf	193,c	;volatile
  7861                           
  7862                           ;Joystick.c: 15:     ADCON2 = 0x44;
  7863   001DBC  0E44               	movlw	68
  7864   001DBE  6EC0               	movwf	192,c	;volatile
  7865                           
  7866                           ;Joystick.c: 17:     hasMoved = 0;
  7867   001DC0  0E00               	movlw	0
  7868   001DC2  6E49               	movwf	_hasMoved^0,c
  7869                           
  7870                           ;Joystick.c: 18:     ADCON0bits.GO_DONE=1;
  7871   001DC4  82C2               	bsf	194,1,c	;volatile
  7872                           
  7873                           ;Joystick.c: 19:     ADCON0bits.CHS0=1;
  7874   001DC6  84C2               	bsf	194,2,c	;volatile
  7875                           
  7876                           ;Joystick.c: 20:     ADCON0bits.CHS1=0;
  7877   001DC8  96C2               	bcf	194,3,c	;volatile
  7878                           
  7879                           ;Joystick.c: 21:     state = 0;
  7880   001DCA  0E00               	movlw	0
  7881   001DCC  6E4B               	movwf	_state^0,c
  7882   001DCE  0012               	return		;funcret
  7883   001DD0                     __end_of_initJoystick:
  7884                           	callstack 0
  7885                           
  7886 ;; *************** function _initAudio *****************
  7887 ;; Defined at:
  7888 ;;		line 10 in file "Audio.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;		None
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;		None
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1
  7902 ;;      Params:         0       0       0
  7903 ;;      Locals:         0       0       0
  7904 ;;      Temps:          0       0       0
  7905 ;;      Totals:         0       0       0
  7906 ;;Total ram usage:        0 bytes
  7907 ;; Hardware stack levels used: 1
  7908 ;; Hardware stack levels required when called: 3
  7909 ;; This function calls:
  7910 ;;		_TI_NewTimer
  7911 ;; This function is called by:
  7912 ;;		_main
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text58
  7917   001EBE                     __ptext58:
  7918                           	callstack 0
  7919   001EBE                     _initAudio:
  7920                           	callstack 27
  7921                           
  7922                           ;Audio.c: 11:     TRISCbits.TRISC2 = 0;
  7923                           
  7924                           ;incstack = 0
  7925   001EBE  9494               	bcf	148,2,c	;volatile
  7926                           
  7927                           ;Audio.c: 12:     TI_NewTimer(&pTime);
  7928   001EC0  0E50               	movlw	low _pTime
  7929   001EC2  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7930   001EC4  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7931   001EC6  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7932                           
  7933                           ;Audio.c: 13:     TI_NewTimer(&songTime);
  7934   001ECA  0E4F               	movlw	low _songTime
  7935   001ECC  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  7936   001ECE  6A54               	clrf	(TI_NewTimer@TimerHandle+1)^0,c
  7937   001ED0  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  7938   001ED4  0012               	return		;funcret
  7939   001ED6                     __end_of_initAudio:
  7940                           	callstack 0
  7941                           
  7942 ;; *************** function _audioLoop *****************
  7943 ;; Defined at:
  7944 ;;		line 16 in file "Audio.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;		None
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1
  7958 ;;      Params:         0       0       0
  7959 ;;      Locals:         0       0       0
  7960 ;;      Temps:          4       0       0
  7961 ;;      Totals:         4       0       0
  7962 ;;Total ram usage:        4 bytes
  7963 ;; Hardware stack levels used: 1
  7964 ;; Hardware stack levels required when called: 3
  7965 ;; This function calls:
  7966 ;;		_TI_GetTics
  7967 ;;		_TI_ResetTics
  7968 ;; This function is called by:
  7969 ;;		_main
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text59
  7974   001540                     __ptext59:
  7975                           	callstack 0
  7976   001540                     _audioLoop:
  7977                           	callstack 27
  7978                           
  7979                           ;Audio.c: 17:     switch(state){
  7980                           
  7981                           ;incstack = 0
  7982   001540  D040               	goto	l3932
  7983   001542                     l598:
  7984                           
  7985                           ;Audio.c: 20:             LATCbits.LATC2=0;
  7986   001542  948B               	bcf	139,2,c	;volatile
  7987                           
  7988                           ;Audio.c: 21:             break;
  7989   001544  0012               	return	
  7990   001546                     l3914:
  7991                           
  7992                           ;Audio.c: 23:             if (TI_GetTics(pTime)>= (period+1)){
  7993   001546  0E01               	movlw	1
  7994   001548  2438               	addwf	_period^0,w,c
  7995   00154A  6E60               	movwf	??_audioLoop^0,c
  7996   00154C  6A61               	clrf	(??_audioLoop+1)^0,c
  7997   00154E  0E00               	movlw	0
  7998   001550  2261               	addwfc	(??_audioLoop+1)^0,f,c
  7999   001552  6A62               	clrf	(??_audioLoop+2)^0,c
  8000   001554  BE61               	btfsc	(??_audioLoop+1)^0,7,c
  8001   001556  0662               	decf	(??_audioLoop+2)^0,f,c
  8002   001558  5062               	movf	(??_audioLoop+2)^0,w,c
  8003   00155A  6E63               	movwf	(??_audioLoop+3)^0,c
  8004   00155C  5050               	movf	_pTime^0,w,c
  8005   00155E  EC05  F00D         	call	_TI_GetTics
  8006   001562  5060               	movf	??_audioLoop^0,w,c
  8007   001564  5C53               	subwf	?_TI_GetTics^0,w,c
  8008   001566  5061               	movf	(??_audioLoop+1)^0,w,c
  8009   001568  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  8010   00156A  5062               	movf	(??_audioLoop+2)^0,w,c
  8011   00156C  5855               	subwfb	(?_TI_GetTics+2)^0,w,c
  8012   00156E  5063               	movf	(??_audioLoop+3)^0,w,c
  8013   001570  5856               	subwfb	(?_TI_GetTics+3)^0,w,c
  8014   001572  A0D8               	btfss	status,0,c
  8015   001574  0012               	return	
  8016                           
  8017                           ;Audio.c: 24:                 TI_ResetTics(pTime);
  8018   001576  5050               	movf	_pTime^0,w,c
  8019   001578  EC59  F00E         	call	_TI_ResetTics
  8020                           
  8021                           ;Audio.c: 25:                 LATCbits.LATC2=1;
  8022   00157C  848B               	bsf	139,2,c	;volatile
  8023                           
  8024                           ;Audio.c: 26:                 state = 2;
  8025   00157E  0E02               	movlw	2
  8026   001580  6E39               	movwf	_state@Audio$F899^0,c
  8027   001582  0012               	return	
  8028   001584                     l3922:
  8029                           
  8030                           ;Audio.c: 30:             if (TI_GetTics(pTime)>= (period+1)){
  8031   001584  0E01               	movlw	1
  8032   001586  2438               	addwf	_period^0,w,c
  8033   001588  6E60               	movwf	??_audioLoop^0,c
  8034   00158A  6A61               	clrf	(??_audioLoop+1)^0,c
  8035   00158C  0E00               	movlw	0
  8036   00158E  2261               	addwfc	(??_audioLoop+1)^0,f,c
  8037   001590  6A62               	clrf	(??_audioLoop+2)^0,c
  8038   001592  BE61               	btfsc	(??_audioLoop+1)^0,7,c
  8039   001594  0662               	decf	(??_audioLoop+2)^0,f,c
  8040   001596  5062               	movf	(??_audioLoop+2)^0,w,c
  8041   001598  6E63               	movwf	(??_audioLoop+3)^0,c
  8042   00159A  5050               	movf	_pTime^0,w,c
  8043   00159C  EC05  F00D         	call	_TI_GetTics
  8044   0015A0  5060               	movf	??_audioLoop^0,w,c
  8045   0015A2  5C53               	subwf	?_TI_GetTics^0,w,c
  8046   0015A4  5061               	movf	(??_audioLoop+1)^0,w,c
  8047   0015A6  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  8048   0015A8  5062               	movf	(??_audioLoop+2)^0,w,c
  8049   0015AA  5855               	subwfb	(?_TI_GetTics+2)^0,w,c
  8050   0015AC  5063               	movf	(??_audioLoop+3)^0,w,c
  8051   0015AE  5856               	subwfb	(?_TI_GetTics+3)^0,w,c
  8052   0015B0  A0D8               	btfss	status,0,c
  8053   0015B2  0012               	return	
  8054                           
  8055                           ;Audio.c: 31:                 TI_ResetTics(pTime);
  8056   0015B4  5050               	movf	_pTime^0,w,c
  8057   0015B6  EC59  F00E         	call	_TI_ResetTics
  8058                           
  8059                           ;Audio.c: 32:                 LATCbits.LATC2=0;
  8060   0015BA  948B               	bcf	139,2,c	;volatile
  8061                           
  8062                           ;Audio.c: 33:                 state = 1;
  8063   0015BC  0E01               	movlw	1
  8064   0015BE  6E39               	movwf	_state@Audio$F899^0,c
  8065   0015C0  0012               	return	
  8066   0015C2                     l3932:
  8067   0015C2  5039               	movf	_state@Audio$F899^0,w,c
  8068   0015C4  6E60               	movwf	??_audioLoop^0,c
  8069   0015C6  6A61               	clrf	(??_audioLoop+1)^0,c
  8070                           
  8071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8072                           ; Switch size 1, requested type "simple"
  8073                           ; Number of cases is 1, Range of values is 0 to 0
  8074                           ; switch strategies available:
  8075                           ; Name         Instructions Cycles
  8076                           ; simple_byte            4     3 (average)
  8077                           ;	Chosen strategy is simple_byte
  8078   0015C8  5061               	movf	(??_audioLoop+1)^0,w,c
  8079   0015CA  0A00               	xorlw	0	; case 0
  8080   0015CC  A4D8               	btfss	status,2,c
  8081   0015CE  0012               	return	
  8082                           
  8083                           ; Switch size 1, requested type "simple"
  8084                           ; Number of cases is 3, Range of values is 0 to 2
  8085                           ; switch strategies available:
  8086                           ; Name         Instructions Cycles
  8087                           ; simple_byte           10     6 (average)
  8088                           ;	Chosen strategy is simple_byte
  8089   0015D0  5060               	movf	??_audioLoop^0,w,c
  8090   0015D2  0A00               	xorlw	0	; case 0
  8091   0015D4  B4D8               	btfsc	status,2,c
  8092   0015D6  D7B5               	goto	l598
  8093   0015D8  0A01               	xorlw	1	; case 1
  8094   0015DA  B4D8               	btfsc	status,2,c
  8095   0015DC  D7B4               	goto	l3914
  8096   0015DE  0A03               	xorlw	3	; case 2
  8097   0015E0  A4D8               	btfss	status,2,c
  8098   0015E2  0012               	return	
  8099   0015E4  D7CF               	goto	l3922
  8100   0015E6                     __end_of_audioLoop:
  8101                           	callstack 0
  8102                           
  8103 ;; *************** function _TI_Init *****************
  8104 ;; Defined at:
  8105 ;;		line 33 in file "Timer.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  counter         1    0[COMRAM] unsigned char 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1
  8119 ;;      Params:         0       0       0
  8120 ;;      Locals:         1       0       0
  8121 ;;      Temps:          0       0       0
  8122 ;;      Totals:         1       0       0
  8123 ;;Total ram usage:        1 bytes
  8124 ;; Hardware stack levels used: 1
  8125 ;; Hardware stack levels required when called: 2
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_main
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text60
  8134   001BFE                     __ptext60:
  8135                           	callstack 0
  8136   001BFE                     _TI_Init:
  8137                           	callstack 28
  8138                           
  8139                           ;Timer.c: 35:  for (unsigned char counter=0; counter<15; counter++) {
  8140                           
  8141                           ;incstack = 0
  8142   001BFE  0E00               	movlw	0
  8143   001C00  6E53               	movwf	TI_Init@counter^0,c
  8144   001C02                     l3834:
  8145                           
  8146                           ;Timer.c: 36:   Timers[counter].Busy=0;
  8147   001C02  5053               	movf	TI_Init@counter^0,w,c
  8148   001C04  0D05               	mullw	5
  8149   001C06  0E04               	movlw	low (_Timers+4)
  8150   001C08  24F3               	addwf	243,w,c
  8151   001C0A  6ED9               	movwf	fsr2l,c
  8152   001C0C  0E01               	movlw	high (_Timers+4)
  8153   001C0E  20F4               	addwfc	prodh,w,c
  8154   001C10  6EDA               	movwf	fsr2h,c
  8155   001C12  6ADF               	clrf	indf2,c
  8156                           
  8157                           ;Timer.c: 37:  }
  8158   001C14  2A53               	incf	TI_Init@counter^0,f,c
  8159   001C16  0E0E               	movlw	14
  8160   001C18  6453               	cpfsgt	TI_Init@counter^0,c
  8161   001C1A  D7F3               	goto	l3834
  8162                           
  8163                           ;Timer.c: 38:  T0CON=0x82;
  8164   001C1C  0E82               	movlw	130
  8165   001C1E  6ED5               	movwf	213,c	;volatile
  8166                           
  8167                           ;Timer.c: 39:     TMR0=65223;
  8168   001C20  0EFE               	movlw	254
  8169   001C22  6ED7               	movwf	215,c	;volatile
  8170   001C24  0EC7               	movlw	199
  8171   001C26  6ED6               	movwf	214,c	;volatile
  8172                           
  8173                           ;Timer.c: 40:  INTCONbits.TMR0IF = 0;
  8174   001C28  94F2               	bcf	242,2,c	;volatile
  8175                           
  8176                           ;Timer.c: 41:  INTCONbits.TMR0IE = 1;
  8177   001C2A  8AF2               	bsf	242,5,c	;volatile
  8178   001C2C  0012               	return		;funcret
  8179   001C2E                     __end_of_TI_Init:
  8180                           	callstack 0
  8181                           
  8182 ;; *************** function _LcInit *****************
  8183 ;; Defined at:
  8184 ;;		line 68 in file "LcTLCD.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;  rows            1    wreg     unsigned char 
  8187 ;;  columns         1   21[COMRAM] unsigned char 
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;  rows            1   22[COMRAM] unsigned char 
  8190 ;;  i               2   23[COMRAM] int 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1
  8200 ;;      Params:         1       0       0
  8201 ;;      Locals:         3       0       0
  8202 ;;      Temps:          0       0       0
  8203 ;;      Totals:         4       0       0
  8204 ;;Total ram usage:        4 bytes
  8205 ;; Hardware stack levels used: 1
  8206 ;; Hardware stack levels required when called: 4
  8207 ;; This function calls:
  8208 ;;		_CantaIR
  8209 ;;		_EscriuPrimeraOrdre
  8210 ;;		_Espera
  8211 ;;		_TI_NewTimer
  8212 ;;		_WaitForBusy
  8213 ;; This function is called by:
  8214 ;;		_main
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text61
  8219   001216                     __ptext61:
  8220                           	callstack 0
  8221   001216                     _LcInit:
  8222                           	callstack 26
  8223                           
  8224                           ;incstack = 0
  8225                           ;LcInit@rows stored from wreg
  8226   001216  6E69               	movwf	LcInit@rows^0,c
  8227                           
  8228                           ;LcTLCD.c: 74:  int i;;LcTLCD.c: 75:     TI_NewTimer(Timer);
  8229   001218  0E00               	movlw	0
  8230   00121A  6E53               	movwf	TI_NewTimer@TimerHandle^0,c
  8231   00121C  0E00               	movlw	0
  8232   00121E  6E54               	movwf	(TI_NewTimer@TimerHandle+1)^0,c
  8233   001220  EC2D  F00D         	call	_TI_NewTimer	;wreg free
  8234                           
  8235                           ;LcTLCD.c: 76:  Rows = rows; Columns = columns;
  8236   001224  C069  F046         	movff	LcInit@rows,_Rows
  8237   001228  C068  F045         	movff	LcInit@columns,_Columns
  8238                           
  8239                           ;LcTLCD.c: 77:  RowAct = ColumnAct = 0;
  8240   00122C  0E00               	movlw	0
  8241   00122E  6E43               	movwf	_ColumnAct^0,c
  8242   001230  C043  F044         	movff	_ColumnAct,_RowAct
  8243                           
  8244                           ;LcTLCD.c: 78:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = 0);
  8245   001234  9C95               	bcf	149,6,c	;volatile
  8246   001236  9A95               	bcf	149,5,c	;volatile
  8247   001238  9895               	bcf	149,4,c	;volatile
  8248                           
  8249                           ;LcTLCD.c: 79:  for (i = 0; i < 2; i++) {
  8250   00123A  0E00               	movlw	0
  8251   00123C  6E6B               	movwf	(LcInit@i+1)^0,c
  8252   00123E  0E00               	movlw	0
  8253   001240  6E6A               	movwf	LcInit@i^0,c
  8254   001242                     l3866:
  8255                           
  8256                           ;LcTLCD.c: 80:   Espera(Timer, 400);
  8257   001242  0E00               	movlw	0
  8258   001244  6E61               	movwf	(Espera@Timer+1)^0,c
  8259   001246  0E00               	movlw	0
  8260   001248  6E60               	movwf	Espera@Timer^0,c
  8261   00124A  0E01               	movlw	1
  8262   00124C  6E63               	movwf	(Espera@ms+1)^0,c
  8263   00124E  0E90               	movlw	144
  8264   001250  6E62               	movwf	Espera@ms^0,c
  8265   001252  ECB3  F00D         	call	_Espera	;wreg free
  8266                           
  8267                           ;LcTLCD.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  8268   001256  0E03               	movlw	3
  8269   001258  ECC2  F00B         	call	_EscriuPrimeraOrdre
  8270                           
  8271                           ;LcTLCD.c: 84:   Espera(Timer, 200);
  8272   00125C  0E00               	movlw	0
  8273   00125E  6E61               	movwf	(Espera@Timer+1)^0,c
  8274   001260  0E00               	movlw	0
  8275   001262  6E60               	movwf	Espera@Timer^0,c
  8276   001264  0E00               	movlw	0
  8277   001266  6E63               	movwf	(Espera@ms+1)^0,c
  8278   001268  0EC8               	movlw	200
  8279   00126A  6E62               	movwf	Espera@ms^0,c
  8280   00126C  ECB3  F00D         	call	_Espera	;wreg free
  8281                           
  8282                           ;LcTLCD.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  8283   001270  0E03               	movlw	3
  8284   001272  ECC2  F00B         	call	_EscriuPrimeraOrdre
  8285                           
  8286                           ;LcTLCD.c: 86:   Espera(Timer, 4);
  8287   001276  0E00               	movlw	0
  8288   001278  6E61               	movwf	(Espera@Timer+1)^0,c
  8289   00127A  0E00               	movlw	0
  8290   00127C  6E60               	movwf	Espera@Timer^0,c
  8291   00127E  0E00               	movlw	0
  8292   001280  6E63               	movwf	(Espera@ms+1)^0,c
  8293   001282  0E04               	movlw	4
  8294   001284  6E62               	movwf	Espera@ms^0,c
  8295   001286  ECB3  F00D         	call	_Espera	;wreg free
  8296                           
  8297                           ;LcTLCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  8298   00128A  0E03               	movlw	3
  8299   00128C  ECC2  F00B         	call	_EscriuPrimeraOrdre
  8300                           
  8301                           ;LcTLCD.c: 88:   Espera(Timer, 4);
  8302   001290  0E00               	movlw	0
  8303   001292  6E61               	movwf	(Espera@Timer+1)^0,c
  8304   001294  0E00               	movlw	0
  8305   001296  6E60               	movwf	Espera@Timer^0,c
  8306   001298  0E00               	movlw	0
  8307   00129A  6E63               	movwf	(Espera@ms+1)^0,c
  8308   00129C  0E04               	movlw	4
  8309   00129E  6E62               	movwf	Espera@ms^0,c
  8310   0012A0  ECB3  F00D         	call	_Espera	;wreg free
  8311                           
  8312                           ;LcTLCD.c: 91:   EscriuPrimeraOrdre(0x02);
  8313   0012A4  0E02               	movlw	2
  8314   0012A6  ECC2  F00B         	call	_EscriuPrimeraOrdre
  8315                           
  8316                           ;LcTLCD.c: 92:   Espera(Timer, 4);
  8317   0012AA  0E00               	movlw	0
  8318   0012AC  6E61               	movwf	(Espera@Timer+1)^0,c
  8319   0012AE  0E00               	movlw	0
  8320   0012B0  6E60               	movwf	Espera@Timer^0,c
  8321   0012B2  0E00               	movlw	0
  8322   0012B4  6E63               	movwf	(Espera@ms+1)^0,c
  8323   0012B6  0E04               	movlw	4
  8324   0012B8  6E62               	movwf	Espera@ms^0,c
  8325   0012BA  ECB3  F00D         	call	_Espera	;wreg free
  8326                           
  8327                           ;LcTLCD.c: 93:   CantaIR(0x20 | 0x08);
  8328   0012BE  0E28               	movlw	40
  8329   0012C0  ECE6  F00D         	call	_CantaIR
  8330                           
  8331                           ;LcTLCD.c: 96:   WaitForBusy(); CantaIR(0x08);
  8332   0012C4  EC74  F00D         	call	_WaitForBusy	;wreg free
  8333   0012C8  0E08               	movlw	8
  8334   0012CA  ECE6  F00D         	call	_CantaIR
  8335                           
  8336                           ;LcTLCD.c: 97:   WaitForBusy(); CantaIR(0x01);
  8337   0012CE  EC74  F00D         	call	_WaitForBusy	;wreg free
  8338   0012D2  0E01               	movlw	1
  8339   0012D4  ECE6  F00D         	call	_CantaIR
  8340                           
  8341                           ;LcTLCD.c: 98:   Espera(Timer,12);
  8342   0012D8  0E00               	movlw	0
  8343   0012DA  6E61               	movwf	(Espera@Timer+1)^0,c
  8344   0012DC  0E00               	movlw	0
  8345   0012DE  6E60               	movwf	Espera@Timer^0,c
  8346   0012E0  0E00               	movlw	0
  8347   0012E2  6E63               	movwf	(Espera@ms+1)^0,c
  8348   0012E4  0E0C               	movlw	12
  8349   0012E6  6E62               	movwf	Espera@ms^0,c
  8350   0012E8  ECB3  F00D         	call	_Espera	;wreg free
  8351                           
  8352                           ;LcTLCD.c: 99:   WaitForBusy(); CantaIR(0x04 | 0x02);
  8353   0012EC  EC74  F00D         	call	_WaitForBusy	;wreg free
  8354   0012F0  0E06               	movlw	6
  8355   0012F2  ECE6  F00D         	call	_CantaIR
  8356                           
  8357                           ;LcTLCD.c: 100:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  8358   0012F6  EC74  F00D         	call	_WaitForBusy	;wreg free
  8359   0012FA  0E0F               	movlw	15
  8360   0012FC  ECE6  F00D         	call	_CantaIR
  8361                           
  8362                           ;LcTLCD.c: 101:  }
  8363   001300  4A6A               	infsnz	LcInit@i^0,f,c
  8364   001302  2A6B               	incf	(LcInit@i+1)^0,f,c
  8365   001304  BE6B               	btfsc	(LcInit@i+1)^0,7,c
  8366   001306  D79D               	goto	l3866
  8367   001308  506B               	movf	(LcInit@i+1)^0,w,c
  8368   00130A  E105               	bnz	u3050
  8369   00130C  0E02               	movlw	2
  8370   00130E  5C6A               	subwf	LcInit@i^0,w,c
  8371   001310  B0D8               	btfsc	status,0,c
  8372   001312  0012               	return	
  8373   001314  D796               	goto	l3866
  8374   001316                     u3050:
  8375   001316  0012               	return		;funcret
  8376   001318                     __end_of_LcInit:
  8377                           	callstack 0
  8378                           
  8379 ;; *************** function _WaitForBusy *****************
  8380 ;; Defined at:
  8381 ;;		line 261 in file "LcTLCD.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  Busy            1   13[COMRAM] unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1
  8395 ;;      Params:         0       0       0
  8396 ;;      Locals:         1       0       0
  8397 ;;      Temps:          0       0       0
  8398 ;;      Totals:         1       0       0
  8399 ;;Total ram usage:        1 bytes
  8400 ;; Hardware stack levels used: 1
  8401 ;; Hardware stack levels required when called: 3
  8402 ;; This function calls:
  8403 ;;		_TI_GetTics
  8404 ;;		_TI_ResetTics
  8405 ;; This function is called by:
  8406 ;;		_LcInit
  8407 ;;		_LcClear
  8408 ;;		_LcCursorOn
  8409 ;;		_LcCursorOff
  8410 ;;		_LcGotoXY
  8411 ;;		_LcPutChar
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text62
  8416   001AE8                     __ptext62:
  8417                           	callstack 0
  8418   001AE8                     _WaitForBusy:
  8419                           	callstack 25
  8420                           
  8421                           ;LcTLCD.c: 262:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  8422                           
  8423                           ;incstack = 0
  8424   001AE8  8695               	bsf	149,3,c	;volatile
  8425   001AEA  8495               	bsf	149,2,c	;volatile
  8426   001AEC  8295               	bsf	149,1,c	;volatile
  8427   001AEE  8095               	bsf	149,0,c	;volatile
  8428                           
  8429                           ;LcTLCD.c: 263:  (LATDbits.LATD4 = 0);
  8430   001AF0  988C               	bcf	140,4,c	;volatile
  8431                           
  8432                           ;LcTLCD.c: 264:  (LATDbits.LATD5 = 1);
  8433   001AF2  8A8C               	bsf	140,5,c	;volatile
  8434                           
  8435                           ;LcTLCD.c: 265:  TI_ResetTics(Timer);
  8436   001AF4  0E00               	movlw	0
  8437   001AF6  EC59  F00E         	call	_TI_ResetTics
  8438   001AFA                     l3342:
  8439                           
  8440                           ;LcTLCD.c: 267:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  8441   001AFA  8C8C               	bsf	140,6,c	;volatile
  8442   001AFC  8C8C               	bsf	140,6,c	;volatile
  8443                           
  8444                           ;LcTLCD.c: 268:   Busy = (PORTDbits.RD3);
  8445   001AFE  0E00               	movlw	0
  8446   001B00  B683               	btfsc	131,3,c	;volatile
  8447   001B02  0E01               	movlw	1
  8448   001B04  6E60               	movwf	WaitForBusy@Busy^0,c
  8449                           
  8450                           ;LcTLCD.c: 269:   (LATDbits.LATD6 = 0);
  8451   001B06  9C8C               	bcf	140,6,c	;volatile
  8452                           
  8453                           ;LcTLCD.c: 270:   (LATDbits.LATD6 = 0);
  8454   001B08  9C8C               	bcf	140,6,c	;volatile
  8455                           
  8456                           ;LcTLCD.c: 271:   (LATDbits.LATD6 = 1);(LATDbits.LATD6 = 1);
  8457   001B0A  8C8C               	bsf	140,6,c	;volatile
  8458   001B0C  8C8C               	bsf	140,6,c	;volatile
  8459                           
  8460                           ;LcTLCD.c: 273:   (LATDbits.LATD6 = 0);
  8461   001B0E  9C8C               	bcf	140,6,c	;volatile
  8462                           
  8463                           ;LcTLCD.c: 274:   (LATDbits.LATD6 = 0);
  8464   001B10  9C8C               	bcf	140,6,c	;volatile
  8465                           
  8466                           ;LcTLCD.c: 275:   if (TI_GetTics(Timer)) break;
  8467   001B12  0E00               	movlw	0
  8468   001B14  EC05  F00D         	call	_TI_GetTics
  8469   001B18  5053               	movf	?_TI_GetTics^0,w,c
  8470   001B1A  1054               	iorwf	(?_TI_GetTics+1)^0,w,c
  8471   001B1C  1055               	iorwf	(?_TI_GetTics+2)^0,w,c
  8472   001B1E  1056               	iorwf	(?_TI_GetTics+3)^0,w,c
  8473   001B20  A4D8               	btfss	status,2,c
  8474   001B22  0012               	return	
  8475                           
  8476                           ;LcTLCD.c: 276:  } while(Busy);
  8477   001B24  5060               	movf	WaitForBusy@Busy^0,w,c
  8478   001B26  B4D8               	btfsc	status,2,c
  8479   001B28  0012               	return	
  8480   001B2A  D7E7               	goto	l3342
  8481   001B2C                     __end_of_WaitForBusy:
  8482                           	callstack 0
  8483                           
  8484 ;; *************** function _TI_NewTimer *****************
  8485 ;; Defined at:
  8486 ;;		line 44 in file "Timer.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  TimerHandle     2    0[COMRAM] PTR unsigned char 
  8489 ;;		 -> NULL(0), SMSTimer(1), debouncerTimer(1), sysTmr(1), 
  8490 ;;		 -> songTime(1), pTime(1), songTimer(1), timer(1), 
  8491 ;;		 -> RAM(511), 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;  Counter         1    3[COMRAM] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      unsigned char 
  8496 ;; Registers used:
  8497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMRAM   BANK0   BANK1
  8503 ;;      Params:         2       0       0
  8504 ;;      Locals:         1       0       0
  8505 ;;      Temps:          1       0       0
  8506 ;;      Totals:         4       0       0
  8507 ;;Total ram usage:        4 bytes
  8508 ;; Hardware stack levels used: 1
  8509 ;; Hardware stack levels required when called: 2
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_LcInit
  8514 ;;		_initMenu
  8515 ;;		_initAudio
  8516 ;;		_initSysTimer
  8517 ;;		_initKeypad
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text63
  8522   001A5A                     __ptext63:
  8523                           	callstack 0
  8524   001A5A                     _TI_NewTimer:
  8525                           	callstack 27
  8526                           
  8527                           ;Timer.c: 45:  unsigned char Counter=0;
  8528                           
  8529                           ;incstack = 0
  8530   001A5A  0E00               	movlw	0
  8531   001A5C  6E56               	movwf	TI_NewTimer@Counter^0,c
  8532                           
  8533                           ;Timer.c: 46:  while (Timers[Counter].Busy==1) {
  8534   001A5E  D005               	goto	l3536
  8535   001A60                     l3532:
  8536                           
  8537                           ;Timer.c: 47:   if (++Counter == 15) return (0);
  8538   001A60  2A56               	incf	TI_NewTimer@Counter^0,f,c
  8539   001A62  0E0F               	movlw	15
  8540   001A64  1856               	xorwf	TI_NewTimer@Counter^0,w,c
  8541   001A66  B4D8               	btfsc	status,2,c
  8542   001A68  0012               	return	
  8543   001A6A                     l3536:
  8544                           
  8545                           ;Timer.c: 46:  while (Timers[Counter].Busy==1) {
  8546   001A6A  5056               	movf	TI_NewTimer@Counter^0,w,c
  8547   001A6C  0D05               	mullw	5
  8548   001A6E  0E04               	movlw	low (_Timers+4)
  8549   001A70  24F3               	addwf	243,w,c
  8550   001A72  6ED9               	movwf	fsr2l,c
  8551   001A74  0E01               	movlw	high (_Timers+4)
  8552   001A76  20F4               	addwfc	prodh,w,c
  8553   001A78  6EDA               	movwf	fsr2h,c
  8554   001A7A  04DE               	decf	postinc2,w,c
  8555   001A7C  B4D8               	btfsc	status,2,c
  8556   001A7E  D7F0               	goto	l3532
  8557                           
  8558                           ;Timer.c: 49:  Timers[Counter].Busy=1;
  8559   001A80  5056               	movf	TI_NewTimer@Counter^0,w,c
  8560   001A82  0D05               	mullw	5
  8561   001A84  0E04               	movlw	low (_Timers+4)
  8562   001A86  24F3               	addwf	243,w,c
  8563   001A88  6ED9               	movwf	fsr2l,c
  8564   001A8A  0E01               	movlw	high (_Timers+4)
  8565   001A8C  20F4               	addwfc	prodh,w,c
  8566   001A8E  6EDA               	movwf	fsr2h,c
  8567   001A90  0E01               	movlw	1
  8568   001A92  6EDF               	movwf	indf2,c
  8569                           
  8570                           ;Timer.c: 50:  *TimerHandle=Counter;
  8571   001A94  C053  FFD9         	movff	TI_NewTimer@TimerHandle,fsr2l
  8572   001A98  C054  FFDA         	movff	TI_NewTimer@TimerHandle+1,fsr2h
  8573   001A9C  C056  FFDF         	movff	TI_NewTimer@Counter,indf2
  8574   001AA0  0012               	return		;funcret
  8575   001AA2                     __end_of_TI_NewTimer:
  8576                           	callstack 0
  8577                           
  8578 ;; *************** function _Espera *****************
  8579 ;; Defined at:
  8580 ;;		line 210 in file "LcTLCD.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  Timer           2   13[COMRAM] int 
  8583 ;;  ms              2   15[COMRAM] int 
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      void 
  8588 ;; Registers used:
  8589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1
  8595 ;;      Params:         4       0       0
  8596 ;;      Locals:         0       0       0
  8597 ;;      Temps:          4       0       0
  8598 ;;      Totals:         8       0       0
  8599 ;;Total ram usage:        8 bytes
  8600 ;; Hardware stack levels used: 1
  8601 ;; Hardware stack levels required when called: 3
  8602 ;; This function calls:
  8603 ;;		_TI_GetTics
  8604 ;;		_TI_ResetTics
  8605 ;; This function is called by:
  8606 ;;		_LcInit
  8607 ;;		_LcClear
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text64
  8612   001B66                     __ptext64:
  8613                           	callstack 0
  8614   001B66                     _Espera:
  8615                           	callstack 24
  8616                           
  8617                           ;LcTLCD.c: 211:  TI_ResetTics(Timer);
  8618                           
  8619                           ;incstack = 0
  8620   001B66  5060               	movf	Espera@Timer^0,w,c
  8621   001B68  EC59  F00E         	call	_TI_ResetTics
  8622   001B6C                     l3318:
  8623   001B6C  C062  F064         	movff	Espera@ms,??_Espera
  8624   001B70  C063  F065         	movff	Espera@ms+1,??_Espera+1
  8625   001B74  0E00               	movlw	0
  8626   001B76  BE65               	btfsc	(??_Espera+1)^0,7,c
  8627   001B78  0EFF               	movlw	255
  8628   001B7A  6E66               	movwf	(??_Espera+2)^0,c
  8629   001B7C  6E67               	movwf	(??_Espera+3)^0,c
  8630   001B7E  5060               	movf	Espera@Timer^0,w,c
  8631   001B80  EC05  F00D         	call	_TI_GetTics
  8632   001B84  5064               	movf	??_Espera^0,w,c
  8633   001B86  5C53               	subwf	?_TI_GetTics^0,w,c
  8634   001B88  5065               	movf	(??_Espera+1)^0,w,c
  8635   001B8A  5854               	subwfb	(?_TI_GetTics+1)^0,w,c
  8636   001B8C  5066               	movf	(??_Espera+2)^0,w,c
  8637   001B8E  5855               	subwfb	(?_TI_GetTics+2)^0,w,c
  8638   001B90  5067               	movf	(??_Espera+3)^0,w,c
  8639   001B92  5856               	subwfb	(?_TI_GetTics+3)^0,w,c
  8640   001B94  B0D8               	btfsc	status,0,c
  8641   001B96  0012               	return	
  8642   001B98  D7E9               	goto	l3318
  8643   001B9A                     __end_of_Espera:
  8644                           	callstack 0
  8645                           
  8646 ;; *************** function _TI_ResetTics *****************
  8647 ;; Defined at:
  8648 ;;		line 54 in file "Timer.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  TimerHandle     1    wreg     unsigned char 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  TimerHandle     1    0[COMRAM] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  1    wreg      void 
  8655 ;; Registers used:
  8656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1
  8662 ;;      Params:         0       0       0
  8663 ;;      Locals:         1       0       0
  8664 ;;      Temps:          0       0       0
  8665 ;;      Totals:         1       0       0
  8666 ;;Total ram usage:        1 bytes
  8667 ;; Hardware stack levels used: 1
  8668 ;; Hardware stack levels required when called: 2
  8669 ;; This function calls:
  8670 ;;		Nothing
  8671 ;; This function is called by:
  8672 ;;		_Espera
  8673 ;;		_WaitForBusy
  8674 ;;		_menuLoop
  8675 ;;		_audioLoop
  8676 ;;		_playMusic
  8677 ;;		_sysTimerLoop
  8678 ;;		_updateSysTimestamp
  8679 ;;		_keypadLoop
  8680 ;;		_smsLoop
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           	psect	text65
  8685   001CB2                     __ptext65:
  8686                           	callstack 0
  8687   001CB2                     _TI_ResetTics:
  8688                           	callstack 27
  8689                           
  8690                           ;incstack = 0
  8691                           ;TI_ResetTics@TimerHandle stored from wreg
  8692   001CB2  6E53               	movwf	TI_ResetTics@TimerHandle^0,c
  8693                           
  8694                           ;Timer.c: 55:  (INTCONbits.GIE = 0); Timers[TimerHandle].InitialTics=Tics; (INTCONbits.G
      +                          IE = 1);
  8695   001CB4  9EF2               	bcf	242,7,c	;volatile
  8696   001CB6  5053               	movf	TI_ResetTics@TimerHandle^0,w,c
  8697   001CB8  0D05               	mullw	5
  8698   001CBA  0E00               	movlw	low _Timers
  8699   001CBC  24F3               	addwf	243,w,c
  8700   001CBE  6ED9               	movwf	fsr2l,c
  8701   001CC0  0E01               	movlw	high _Timers
  8702   001CC2  20F4               	addwfc	prodh,w,c
  8703   001CC4  6EDA               	movwf	fsr2h,c
  8704   001CC6  C01D  FFDE         	movff	_Tics,postinc2	;volatile
  8705   001CCA  C01E  FFDE         	movff	_Tics+1,postinc2	;volatile
  8706   001CCE  C01F  FFDE         	movff	_Tics+2,postinc2	;volatile
  8707   001CD2  C020  FFDE         	movff	_Tics+3,postinc2	;volatile
  8708   001CD6  8EF2               	bsf	242,7,c	;volatile
  8709   001CD8  0012               	return		;funcret
  8710   001CDA                     __end_of_TI_ResetTics:
  8711                           	callstack 0
  8712                           
  8713 ;; *************** function _TI_GetTics *****************
  8714 ;; Defined at:
  8715 ;;		line 58 in file "Timer.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  TimerHandle     1    wreg     unsigned char 
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;  TimerHandle     1   12[COMRAM] unsigned char 
  8720 ;;  CopyCurrentT    4    8[COMRAM] unsigned long 
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  4    0[COMRAM] unsigned long 
  8723 ;; Registers used:
  8724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMRAM   BANK0   BANK1
  8730 ;;      Params:         4       0       0
  8731 ;;      Locals:         5       0       0
  8732 ;;      Temps:          4       0       0
  8733 ;;      Totals:        13       0       0
  8734 ;;Total ram usage:       13 bytes
  8735 ;; Hardware stack levels used: 1
  8736 ;; Hardware stack levels required when called: 2
  8737 ;; This function calls:
  8738 ;;		Nothing
  8739 ;; This function is called by:
  8740 ;;		_Espera
  8741 ;;		_WaitForBusy
  8742 ;;		_menuLoop
  8743 ;;		_audioLoop
  8744 ;;		_sysTimerLoop
  8745 ;;		_keypadLoop
  8746 ;;		_smsLoop
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text66
  8751   001A0A                     __ptext66:
  8752                           	callstack 0
  8753   001A0A                     _TI_GetTics:
  8754                           	callstack 27
  8755                           
  8756                           ;incstack = 0
  8757                           ;TI_GetTics@TimerHandle stored from wreg
  8758   001A0A  6E5F               	movwf	TI_GetTics@TimerHandle^0,c
  8759                           
  8760                           ;Timer.c: 59:     (INTCONbits.GIE = 0); unsigned long CopyCurrentTics=Tics; (INTCONbits.
      +                          GIE = 1);
  8761   001A0C  9EF2               	bcf	242,7,c	;volatile
  8762   001A0E  C01D  F05B         	movff	_Tics,TI_GetTics@CopyCurrentTics	;volatile
  8763   001A12  C01E  F05C         	movff	_Tics+1,TI_GetTics@CopyCurrentTics+1	;volatile
  8764   001A16  C01F  F05D         	movff	_Tics+2,TI_GetTics@CopyCurrentTics+2	;volatile
  8765   001A1A  C020  F05E         	movff	_Tics+3,TI_GetTics@CopyCurrentTics+3	;volatile
  8766   001A1E  8EF2               	bsf	242,7,c	;volatile
  8767                           
  8768                           ;Timer.c: 60:  return (CopyCurrentTics-(Timers[TimerHandle].InitialTics));
  8769   001A20  505F               	movf	TI_GetTics@TimerHandle^0,w,c
  8770   001A22  0D05               	mullw	5
  8771   001A24  0E00               	movlw	low _Timers
  8772   001A26  24F3               	addwf	243,w,c
  8773   001A28  6ED9               	movwf	fsr2l,c
  8774   001A2A  0E01               	movlw	high _Timers
  8775   001A2C  20F4               	addwfc	prodh,w,c
  8776   001A2E  6EDA               	movwf	fsr2h,c
  8777   001A30  CFDE F057          	movff	postinc2,??_TI_GetTics
  8778   001A34  CFDE F058          	movff	postinc2,??_TI_GetTics+1
  8779   001A38  CFDE F059          	movff	postinc2,??_TI_GetTics+2
  8780   001A3C  CFDE F05A          	movff	postinc2,??_TI_GetTics+3
  8781   001A40  5057               	movf	??_TI_GetTics^0,w,c
  8782   001A42  5C5B               	subwf	TI_GetTics@CopyCurrentTics^0,w,c
  8783   001A44  6E53               	movwf	?_TI_GetTics^0,c
  8784   001A46  5058               	movf	(??_TI_GetTics+1)^0,w,c
  8785   001A48  585C               	subwfb	(TI_GetTics@CopyCurrentTics+1)^0,w,c
  8786   001A4A  6E54               	movwf	(?_TI_GetTics+1)^0,c
  8787   001A4C  5059               	movf	(??_TI_GetTics+2)^0,w,c
  8788   001A4E  585D               	subwfb	(TI_GetTics@CopyCurrentTics+2)^0,w,c
  8789   001A50  6E55               	movwf	(?_TI_GetTics+2)^0,c
  8790   001A52  505A               	movf	(??_TI_GetTics+3)^0,w,c
  8791   001A54  585E               	subwfb	(TI_GetTics@CopyCurrentTics+3)^0,w,c
  8792   001A56  6E56               	movwf	(?_TI_GetTics+3)^0,c
  8793   001A58  0012               	return		;funcret
  8794   001A5A                     __end_of_TI_GetTics:
  8795                           	callstack 0
  8796                           
  8797 ;; *************** function _EscriuPrimeraOrdre *****************
  8798 ;; Defined at:
  8799 ;;		line 279 in file "LcTLCD.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  ordre           1    wreg     unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  ordre           1    1[COMRAM] unsigned char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  1    wreg      void 
  8806 ;; Registers used:
  8807 ;;		wreg, status,2, status,0
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1
  8813 ;;      Params:         0       0       0
  8814 ;;      Locals:         1       0       0
  8815 ;;      Temps:          1       0       0
  8816 ;;      Totals:         2       0       0
  8817 ;;Total ram usage:        2 bytes
  8818 ;; Hardware stack levels used: 1
  8819 ;; Hardware stack levels required when called: 2
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_LcInit
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           	psect	text67
  8828   001784                     __ptext67:
  8829                           	callstack 0
  8830   001784                     _EscriuPrimeraOrdre:
  8831                           	callstack 27
  8832                           
  8833                           ;incstack = 0
  8834                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8835   001784  6E54               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8836                           
  8837                           ;LcTLCD.c: 281:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0); (LATDbits.LATD4 = 0); (LATDbits.LATD5 = 0);
  8838   001786  9695               	bcf	149,3,c	;volatile
  8839   001788  9495               	bcf	149,2,c	;volatile
  8840   00178A  9295               	bcf	149,1,c	;volatile
  8841   00178C  9095               	bcf	149,0,c	;volatile
  8842   00178E  988C               	bcf	140,4,c	;volatile
  8843   001790  9A8C               	bcf	140,5,c	;volatile
  8844                           
  8845                           ;LcTLCD.c: 282:  (LATDbits.LATD6 = 1); (LATDbits.LATD6 = 1);
  8846   001792  8C8C               	bsf	140,6,c	;volatile
  8847   001794  8C8C               	bsf	140,6,c	;volatile
  8848                           
  8849                           ;LcTLCD.c: 283:   (LATDbits.LATD3 = (ordre & 0x08 ? 1 : 0));
  8850   001796  A654               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  8851   001798  D003               	goto	u400
  8852   00179A  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8853   00179C  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8854   00179E  D001               	goto	u418
  8855   0017A0                     u400:
  8856   0017A0  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8857   0017A2                     u418:
  8858   0017A2  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8859   0017A4  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8860   0017A6  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8861   0017A8  508C               	movf	140,w,c	;volatile
  8862   0017AA  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8863   0017AC  0BF7               	andlw	-9
  8864   0017AE  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8865   0017B0  6E8C               	movwf	140,c	;volatile
  8866                           
  8867                           ;LcTLCD.c: 284:   (LATDbits.LATD2 = (ordre & 0x04 ? 1 : 0));
  8868   0017B2  A454               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  8869   0017B4  D003               	goto	u420
  8870   0017B6  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8871   0017B8  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8872   0017BA  D001               	goto	u438
  8873   0017BC                     u420:
  8874   0017BC  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8875   0017BE                     u438:
  8876   0017BE  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8877   0017C0  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8878   0017C2  508C               	movf	140,w,c	;volatile
  8879   0017C4  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8880   0017C6  0BFB               	andlw	-5
  8881   0017C8  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8882   0017CA  6E8C               	movwf	140,c	;volatile
  8883                           
  8884                           ;LcTLCD.c: 285:   (LATDbits.LATD1 = (ordre & 0x02 ? 1 : 0));
  8885   0017CC  A254               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  8886   0017CE  D003               	goto	u440
  8887   0017D0  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8888   0017D2  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8889   0017D4  D001               	goto	u458
  8890   0017D6                     u440:
  8891   0017D6  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8892   0017D8                     u458:
  8893   0017D8  4653               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8894   0017DA  508C               	movf	140,w,c	;volatile
  8895   0017DC  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8896   0017DE  0BFD               	andlw	-3
  8897   0017E0  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8898   0017E2  6E8C               	movwf	140,c	;volatile
  8899                           
  8900                           ;LcTLCD.c: 286:   (LATDbits.LATD0 = (ordre & 0x01 ? 1 : 0));
  8901   0017E4  A054               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  8902   0017E6  D003               	goto	u460
  8903   0017E8  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8904   0017EA  2A53               	incf	??_EscriuPrimeraOrdre^0,f,c
  8905   0017EC  D001               	goto	u478
  8906   0017EE                     u460:
  8907   0017EE  6A53               	clrf	??_EscriuPrimeraOrdre^0,c
  8908   0017F0                     u478:
  8909   0017F0  508C               	movf	140,w,c	;volatile
  8910   0017F2  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8911   0017F4  0BFE               	andlw	-2
  8912   0017F6  1853               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8913   0017F8  6E8C               	movwf	140,c	;volatile
  8914                           
  8915                           ;LcTLCD.c: 287:  (LATDbits.LATD6 = 0);
  8916   0017FA  9C8C               	bcf	140,6,c	;volatile
  8917   0017FC  0012               	return		;funcret
  8918   0017FE                     __end_of_EscriuPrimeraOrdre:
  8919                           	callstack 0
  8920                           
  8921 ;; *************** function _CantaIR *****************
  8922 ;; Defined at:
  8923 ;;		line 229 in file "LcTLCD.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  IR              1    wreg     unsigned char 
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;  IR              1    2[COMRAM] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      void 
  8930 ;; Registers used:
  8931 ;;		wreg, status,2, status,0, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMRAM   BANK0   BANK1
  8937 ;;      Params:         0       0       0
  8938 ;;      Locals:         1       0       0
  8939 ;;      Temps:          0       0       0
  8940 ;;      Totals:         1       0       0
  8941 ;;Total ram usage:        1 bytes
  8942 ;; Hardware stack levels used: 1
  8943 ;; Hardware stack levels required when called: 3
  8944 ;; This function calls:
  8945 ;;		_CantaPartAlta
  8946 ;;		_CantaPartBaixa
  8947 ;; This function is called by:
  8948 ;;		_LcInit
  8949 ;;		_LcClear
  8950 ;;		_LcCursorOn
  8951 ;;		_LcCursorOff
  8952 ;;		_LcGotoXY
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text68
  8957   001BCC                     __ptext68:
  8958                           	callstack 0
  8959   001BCC                     _CantaIR:
  8960                           	callstack 24
  8961                           
  8962                           ;incstack = 0
  8963                           ;CantaIR@IR stored from wreg
  8964   001BCC  6E55               	movwf	CantaIR@IR^0,c
  8965                           
  8966                           ;LcTLCD.c: 230:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 0);
  8967   001BCE  9695               	bcf	149,3,c	;volatile
  8968   001BD0  9495               	bcf	149,2,c	;volatile
  8969   001BD2  9295               	bcf	149,1,c	;volatile
  8970   001BD4  9095               	bcf	149,0,c	;volatile
  8971                           
  8972                           ;LcTLCD.c: 231:  (LATDbits.LATD4 = 0);
  8973   001BD6  988C               	bcf	140,4,c	;volatile
  8974                           
  8975                           ;LcTLCD.c: 232:  (LATDbits.LATD5 = 0);
  8976   001BD8  9A8C               	bcf	140,5,c	;volatile
  8977                           
  8978                           ;LcTLCD.c: 233:  (LATDbits.LATD6 = 1);
  8979   001BDA  8C8C               	bsf	140,6,c	;volatile
  8980                           
  8981                           ;LcTLCD.c: 234:  CantaPartAlta(IR);
  8982   001BDC  5055               	movf	CantaIR@IR^0,w,c
  8983   001BDE  ECA3  F00C         	call	_CantaPartAlta
  8984                           
  8985                           ;LcTLCD.c: 235:  (LATDbits.LATD6 = 1);
  8986   001BE2  8C8C               	bsf	140,6,c	;volatile
  8987                           
  8988                           ;LcTLCD.c: 236:  (LATDbits.LATD6 = 0);
  8989   001BE4  9C8C               	bcf	140,6,c	;volatile
  8990                           
  8991                           ;LcTLCD.c: 237:  (LATDbits.LATD6 = 0);
  8992   001BE6  9C8C               	bcf	140,6,c	;volatile
  8993                           
  8994                           ;LcTLCD.c: 238:  (LATDbits.LATD6 = 1);
  8995   001BE8  8C8C               	bsf	140,6,c	;volatile
  8996                           
  8997                           ;LcTLCD.c: 239:  CantaPartBaixa(IR);
  8998   001BEA  5055               	movf	CantaIR@IR^0,w,c
  8999   001BEC  EC6F  F00C         	call	_CantaPartBaixa
  9000                           
  9001                           ;LcTLCD.c: 240:  (LATDbits.LATD6 = 1);
  9002   001BF0  8C8C               	bsf	140,6,c	;volatile
  9003                           
  9004                           ;LcTLCD.c: 241:  (LATDbits.LATD6 = 0);
  9005   001BF2  9C8C               	bcf	140,6,c	;volatile
  9006                           
  9007                           ;LcTLCD.c: 242:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = TRISDbits.TRI
      +                          SD3 = 1);
  9008   001BF4  8695               	bsf	149,3,c	;volatile
  9009   001BF6  8495               	bsf	149,2,c	;volatile
  9010   001BF8  8295               	bsf	149,1,c	;volatile
  9011   001BFA  8095               	bsf	149,0,c	;volatile
  9012   001BFC  0012               	return		;funcret
  9013   001BFE                     __end_of_CantaIR:
  9014                           	callstack 0
  9015                           
  9016 ;; *************** function _CantaPartBaixa *****************
  9017 ;; Defined at:
  9018 ;;		line 222 in file "LcTLCD.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;  c               1    wreg     unsigned char 
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;  c               1    1[COMRAM] unsigned char 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		wreg, status,2, status,0
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1
  9032 ;;      Params:         0       0       0
  9033 ;;      Locals:         1       0       0
  9034 ;;      Temps:          1       0       0
  9035 ;;      Totals:         2       0       0
  9036 ;;Total ram usage:        2 bytes
  9037 ;; Hardware stack levels used: 1
  9038 ;; Hardware stack levels required when called: 2
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_CantaIR
  9043 ;;		_CantaData
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text69
  9048   0018DE                     __ptext69:
  9049                           	callstack 0
  9050   0018DE                     _CantaPartBaixa:
  9051                           	callstack 24
  9052                           
  9053                           ;incstack = 0
  9054                           ;CantaPartBaixa@c stored from wreg
  9055   0018DE  6E54               	movwf	CantaPartBaixa@c^0,c
  9056                           
  9057                           ;LcTLCD.c: 223:   (LATDbits.LATD3 = (c & 0x08 ? 1 : 0));
  9058   0018E0  A654               	btfss	CantaPartBaixa@c^0,3,c
  9059   0018E2  D003               	goto	u2410
  9060   0018E4  6A53               	clrf	??_CantaPartBaixa^0,c
  9061   0018E6  2A53               	incf	??_CantaPartBaixa^0,f,c
  9062   0018E8  D001               	goto	u2428
  9063   0018EA                     u2410:
  9064   0018EA  6A53               	clrf	??_CantaPartBaixa^0,c
  9065   0018EC                     u2428:
  9066   0018EC  4653               	rlncf	??_CantaPartBaixa^0,f,c
  9067   0018EE  4653               	rlncf	??_CantaPartBaixa^0,f,c
  9068   0018F0  4653               	rlncf	??_CantaPartBaixa^0,f,c
  9069   0018F2  508C               	movf	140,w,c	;volatile
  9070   0018F4  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9071   0018F6  0BF7               	andlw	-9
  9072   0018F8  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9073   0018FA  6E8C               	movwf	140,c	;volatile
  9074                           
  9075                           ;LcTLCD.c: 224:   (LATDbits.LATD2 = (c & 0x04 ? 1 : 0));
  9076   0018FC  A454               	btfss	CantaPartBaixa@c^0,2,c
  9077   0018FE  D003               	goto	u2430
  9078   001900  6A53               	clrf	??_CantaPartBaixa^0,c
  9079   001902  2A53               	incf	??_CantaPartBaixa^0,f,c
  9080   001904  D001               	goto	u2448
  9081   001906                     u2430:
  9082   001906  6A53               	clrf	??_CantaPartBaixa^0,c
  9083   001908                     u2448:
  9084   001908  4653               	rlncf	??_CantaPartBaixa^0,f,c
  9085   00190A  4653               	rlncf	??_CantaPartBaixa^0,f,c
  9086   00190C  508C               	movf	140,w,c	;volatile
  9087   00190E  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9088   001910  0BFB               	andlw	-5
  9089   001912  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9090   001914  6E8C               	movwf	140,c	;volatile
  9091                           
  9092                           ;LcTLCD.c: 225:   (LATDbits.LATD1 = (c & 0x02 ? 1 : 0));
  9093   001916  A254               	btfss	CantaPartBaixa@c^0,1,c
  9094   001918  D003               	goto	u2450
  9095   00191A  6A53               	clrf	??_CantaPartBaixa^0,c
  9096   00191C  2A53               	incf	??_CantaPartBaixa^0,f,c
  9097   00191E  D001               	goto	u2468
  9098   001920                     u2450:
  9099   001920  6A53               	clrf	??_CantaPartBaixa^0,c
  9100   001922                     u2468:
  9101   001922  4653               	rlncf	??_CantaPartBaixa^0,f,c
  9102   001924  508C               	movf	140,w,c	;volatile
  9103   001926  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9104   001928  0BFD               	andlw	-3
  9105   00192A  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9106   00192C  6E8C               	movwf	140,c	;volatile
  9107                           
  9108                           ;LcTLCD.c: 226:   (LATDbits.LATD0 = (c & 0x01 ? 1 : 0));
  9109   00192E  A054               	btfss	CantaPartBaixa@c^0,0,c
  9110   001930  D003               	goto	u2470
  9111   001932  6A53               	clrf	??_CantaPartBaixa^0,c
  9112   001934  2A53               	incf	??_CantaPartBaixa^0,f,c
  9113   001936  D001               	goto	u2488
  9114   001938                     u2470:
  9115   001938  6A53               	clrf	??_CantaPartBaixa^0,c
  9116   00193A                     u2488:
  9117   00193A  508C               	movf	140,w,c	;volatile
  9118   00193C  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9119   00193E  0BFE               	andlw	-2
  9120   001940  1853               	xorwf	??_CantaPartBaixa^0,w,c
  9121   001942  6E8C               	movwf	140,c	;volatile
  9122   001944  0012               	return		;funcret
  9123   001946                     __end_of_CantaPartBaixa:
  9124                           	callstack 0
  9125                           
  9126 ;; *************** function _CantaPartAlta *****************
  9127 ;; Defined at:
  9128 ;;		line 215 in file "LcTLCD.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  c               1    wreg     unsigned char 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  c               1    1[COMRAM] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1
  9142 ;;      Params:         0       0       0
  9143 ;;      Locals:         1       0       0
  9144 ;;      Temps:          1       0       0
  9145 ;;      Totals:         2       0       0
  9146 ;;Total ram usage:        2 bytes
  9147 ;; Hardware stack levels used: 1
  9148 ;; Hardware stack levels required when called: 2
  9149 ;; This function calls:
  9150 ;;		Nothing
  9151 ;; This function is called by:
  9152 ;;		_CantaIR
  9153 ;;		_CantaData
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text70
  9158   001946                     __ptext70:
  9159                           	callstack 0
  9160   001946                     _CantaPartAlta:
  9161                           	callstack 24
  9162                           
  9163                           ;incstack = 0
  9164                           ;CantaPartAlta@c stored from wreg
  9165   001946  6E54               	movwf	CantaPartAlta@c^0,c
  9166                           
  9167                           ;LcTLCD.c: 216:   (LATDbits.LATD3 = (c & 0x80 ? 1 : 0));
  9168   001948  AE54               	btfss	CantaPartAlta@c^0,7,c
  9169   00194A  D003               	goto	u2330
  9170   00194C  6A53               	clrf	??_CantaPartAlta^0,c
  9171   00194E  2A53               	incf	??_CantaPartAlta^0,f,c
  9172   001950  D001               	goto	u2348
  9173   001952                     u2330:
  9174   001952  6A53               	clrf	??_CantaPartAlta^0,c
  9175   001954                     u2348:
  9176   001954  4653               	rlncf	??_CantaPartAlta^0,f,c
  9177   001956  4653               	rlncf	??_CantaPartAlta^0,f,c
  9178   001958  4653               	rlncf	??_CantaPartAlta^0,f,c
  9179   00195A  508C               	movf	140,w,c	;volatile
  9180   00195C  1853               	xorwf	??_CantaPartAlta^0,w,c
  9181   00195E  0BF7               	andlw	-9
  9182   001960  1853               	xorwf	??_CantaPartAlta^0,w,c
  9183   001962  6E8C               	movwf	140,c	;volatile
  9184                           
  9185                           ;LcTLCD.c: 217:   (LATDbits.LATD2 = (c & 0x40 ? 1 : 0));
  9186   001964  AC54               	btfss	CantaPartAlta@c^0,6,c
  9187   001966  D003               	goto	u2350
  9188   001968  6A53               	clrf	??_CantaPartAlta^0,c
  9189   00196A  2A53               	incf	??_CantaPartAlta^0,f,c
  9190   00196C  D001               	goto	u2368
  9191   00196E                     u2350:
  9192   00196E  6A53               	clrf	??_CantaPartAlta^0,c
  9193   001970                     u2368:
  9194   001970  4653               	rlncf	??_CantaPartAlta^0,f,c
  9195   001972  4653               	rlncf	??_CantaPartAlta^0,f,c
  9196   001974  508C               	movf	140,w,c	;volatile
  9197   001976  1853               	xorwf	??_CantaPartAlta^0,w,c
  9198   001978  0BFB               	andlw	-5
  9199   00197A  1853               	xorwf	??_CantaPartAlta^0,w,c
  9200   00197C  6E8C               	movwf	140,c	;volatile
  9201                           
  9202                           ;LcTLCD.c: 218:   (LATDbits.LATD1 = (c & 0x20 ? 1 : 0));
  9203   00197E  AA54               	btfss	CantaPartAlta@c^0,5,c
  9204   001980  D003               	goto	u2370
  9205   001982  6A53               	clrf	??_CantaPartAlta^0,c
  9206   001984  2A53               	incf	??_CantaPartAlta^0,f,c
  9207   001986  D001               	goto	u2388
  9208   001988                     u2370:
  9209   001988  6A53               	clrf	??_CantaPartAlta^0,c
  9210   00198A                     u2388:
  9211   00198A  4653               	rlncf	??_CantaPartAlta^0,f,c
  9212   00198C  508C               	movf	140,w,c	;volatile
  9213   00198E  1853               	xorwf	??_CantaPartAlta^0,w,c
  9214   001990  0BFD               	andlw	-3
  9215   001992  1853               	xorwf	??_CantaPartAlta^0,w,c
  9216   001994  6E8C               	movwf	140,c	;volatile
  9217                           
  9218                           ;LcTLCD.c: 219:   (LATDbits.LATD0 = (c & 0x10 ? 1 : 0));
  9219   001996  A854               	btfss	CantaPartAlta@c^0,4,c
  9220   001998  D003               	goto	u2390
  9221   00199A  6A53               	clrf	??_CantaPartAlta^0,c
  9222   00199C  2A53               	incf	??_CantaPartAlta^0,f,c
  9223   00199E  D001               	goto	u2408
  9224   0019A0                     u2390:
  9225   0019A0  6A53               	clrf	??_CantaPartAlta^0,c
  9226   0019A2                     u2408:
  9227   0019A2  508C               	movf	140,w,c	;volatile
  9228   0019A4  1853               	xorwf	??_CantaPartAlta^0,w,c
  9229   0019A6  0BFE               	andlw	-2
  9230   0019A8  1853               	xorwf	??_CantaPartAlta^0,w,c
  9231   0019AA  6E8C               	movwf	140,c	;volatile
  9232   0019AC  0012               	return		;funcret
  9233   0019AE                     __end_of_CantaPartAlta:
  9234                           	callstack 0
  9235                           
  9236 ;; *************** function _RSI_High *****************
  9237 ;; Defined at:
  9238 ;;		line 23 in file "MAIN.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  1    wreg      void 
  9245 ;; Registers used:
  9246 ;;		wreg, status,2, status,0, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1
  9252 ;;      Params:         0       0       0
  9253 ;;      Locals:         0       0       0
  9254 ;;      Temps:          0       0       0
  9255 ;;      Totals:         0       0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used: 1
  9258 ;; Hardware stack levels required when called: 1
  9259 ;; This function calls:
  9260 ;;		_RSI_Timer0
  9261 ;; This function is called by:
  9262 ;;		Interrupt level 2
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	intcode
  9267   000008                     __pintcode:
  9268                           	callstack 0
  9269   000008                     _RSI_High:
  9270                           	callstack 23
  9271                           
  9272                           ;incstack = 0
  9273   000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9274                           
  9275                           ;MAIN.c: 25:     }
  9276   00000A  EC6B  F00F         	call	_RSI_Timer0	;wreg free
  9277   00000E  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9278   000010  0011               	retfie		f
  9279   000012                     __end_of_RSI_High:
  9280                           	callstack 0
  9281                           
  9282 ;; *************** function _RSI_Timer0 *****************
  9283 ;; Defined at:
  9284 ;;		line 26 in file "Timer.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      void 
  9291 ;; Registers used:
  9292 ;;		wreg, status,2, status,0
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1
  9298 ;;      Params:         0       0       0
  9299 ;;      Locals:         0       0       0
  9300 ;;      Temps:          0       0       0
  9301 ;;      Totals:         0       0       0
  9302 ;;Total ram usage:        0 bytes
  9303 ;; Hardware stack levels used: 1
  9304 ;; This function calls:
  9305 ;;		Nothing
  9306 ;; This function is called by:
  9307 ;;		_RSI_High
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           	psect	text72
  9312   001ED6                     __ptext72:
  9313                           	callstack 0
  9314   001ED6                     _RSI_Timer0:
  9315                           	callstack 23
  9316                           
  9317                           ;Timer.c: 28:     TMR0=65223;
  9318                           
  9319                           ;incstack = 0
  9320   001ED6  0EFE               	movlw	254
  9321   001ED8  6ED7               	movwf	215,c	;volatile
  9322   001EDA  0EC7               	movlw	199
  9323   001EDC  6ED6               	movwf	214,c	;volatile
  9324                           
  9325                           ;Timer.c: 29:     TMR0IF=0;
  9326   001EDE  94F2               	bcf	4082,2,c	;volatile
  9327                           
  9328                           ;Timer.c: 30:     Tics++;
  9329   001EE0  0E01               	movlw	1
  9330   001EE2  261D               	addwf	_Tics^0,f,c	;volatile
  9331   001EE4  0E00               	movlw	0
  9332   001EE6  221E               	addwfc	(_Tics+1)^0,f,c	;volatile
  9333   001EE8  221F               	addwfc	(_Tics+2)^0,f,c	;volatile
  9334   001EEA  2220               	addwfc	(_Tics+3)^0,f,c	;volatile
  9335   001EEC  0012               	return		;funcret
  9336   001EEE                     __end_of_RSI_Timer0:
  9337                           	callstack 0
  9338                           
  9339                           	psect	rparam
  9340   000000                     
  9341                           	psect	temp
  9342   00007D                     btemp:
  9343                           	callstack 0
  9344   00007D                     	ds	1
  9345   000000                     int$flags	set	btemp
  9346   000000                     wtemp8	set	btemp+1
  9347   000000                     ttemp5	set	btemp+1
  9348   000000                     ttemp6	set	btemp+4
  9349   000000                     ttemp7	set	btemp+8
  9350                           
  9351                           	psect	idloc
  9352                           
  9353                           ;Config register IDLOC0 @ 0x200000
  9354                           ;	unspecified, using default values
  9355   200000                     	org	2097152
  9356   200000  FF                 	db	255
  9357                           
  9358                           ;Config register IDLOC1 @ 0x200001
  9359                           ;	unspecified, using default values
  9360   200001                     	org	2097153
  9361   200001  FF                 	db	255
  9362                           
  9363                           ;Config register IDLOC2 @ 0x200002
  9364                           ;	unspecified, using default values
  9365   200002                     	org	2097154
  9366   200002  FF                 	db	255
  9367                           
  9368                           ;Config register IDLOC3 @ 0x200003
  9369                           ;	unspecified, using default values
  9370   200003                     	org	2097155
  9371   200003  FF                 	db	255
  9372                           
  9373                           ;Config register IDLOC4 @ 0x200004
  9374                           ;	unspecified, using default values
  9375   200004                     	org	2097156
  9376   200004  FF                 	db	255
  9377                           
  9378                           ;Config register IDLOC5 @ 0x200005
  9379                           ;	unspecified, using default values
  9380   200005                     	org	2097157
  9381   200005  FF                 	db	255
  9382                           
  9383                           ;Config register IDLOC6 @ 0x200006
  9384                           ;	unspecified, using default values
  9385   200006                     	org	2097158
  9386   200006  FF                 	db	255
  9387                           
  9388                           ;Config register IDLOC7 @ 0x200007
  9389                           ;	unspecified, using default values
  9390   200007                     	org	2097159
  9391   200007  FF                 	db	255
  9392                           
  9393                           	psect	config
  9394                           
  9395                           ; Padding undefined space
  9396   300000                     	org	3145728
  9397   300000  FF                 	db	255
  9398                           
  9399                           ;Config register CONFIG1H @ 0x300001
  9400                           ;	Oscillator
  9401                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9402                           ;	Fail-Safe Clock Monitor Enable bit
  9403                           ;	FCMEN = 0x0, unprogrammed default
  9404                           ;	Internal/External Oscillator Switchover bit
  9405                           ;	IESO = 0x0, unprogrammed default
  9406   300001                     	org	3145729
  9407   300001  06                 	db	6
  9408                           
  9409                           ;Config register CONFIG2L @ 0x300002
  9410                           ;	Power-up Timer Enable bit
  9411                           ;	PWRT = OFF, PWRT disabled
  9412                           ;	Brown-out Reset Enable bits
  9413                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9414                           ;	Brown-out Reset Voltage bits
  9415                           ;	BORV = 0x3, unprogrammed default
  9416   300002                     	org	3145730
  9417   300002  19                 	db	25
  9418                           
  9419                           ;Config register CONFIG2H @ 0x300003
  9420                           ;	Watchdog Timer Enable bit
  9421                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9422                           ;	Watchdog Timer Postscale Select bits
  9423                           ;	WDTPS = 0xF, unprogrammed default
  9424   300003                     	org	3145731
  9425   300003  1E                 	db	30
  9426                           
  9427                           ; Padding undefined space
  9428   300004                     	org	3145732
  9429   300004  FF                 	db	255
  9430                           
  9431                           ;Config register CONFIG3H @ 0x300005
  9432                           ;	CCP2 MUX bit
  9433                           ;	CCP2MX = 0x1, unprogrammed default
  9434                           ;	PORTB A/D Enable bit
  9435                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9436                           ;	Low-Power Timer1 Oscillator Enable bit
  9437                           ;	LPT1OSC = 0x0, unprogrammed default
  9438                           ;	MCLR Pin Enable bit
  9439                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  9440   300005                     	org	3145733
  9441   300005  01                 	db	1
  9442                           
  9443                           ;Config register CONFIG4L @ 0x300006
  9444                           ;	Stack Full/Underflow Reset Enable bit
  9445                           ;	STVREN = 0x1, unprogrammed default
  9446                           ;	Single-Supply ICSP Enable bit
  9447                           ;	LVP = OFF, Single-Supply ICSP disabled
  9448                           ;	Boot Block Size Select bits
  9449                           ;	BBSIZ = 0x0, unprogrammed default
  9450                           ;	Extended Instruction Set Enable bit
  9451                           ;	XINST = 0x0, unprogrammed default
  9452                           ;	Background Debugger Enable bit
  9453                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9454   300006                     	org	3145734
  9455   300006  81                 	db	129
  9456                           
  9457                           ; Padding undefined space
  9458   300007                     	org	3145735
  9459   300007  FF                 	db	255
  9460                           
  9461                           ;Config register CONFIG5L @ 0x300008
  9462                           ;	unspecified, using default values
  9463                           ;	Code Protection bit
  9464                           ;	CP0 = 0x1, unprogrammed default
  9465                           ;	Code Protection bit
  9466                           ;	CP1 = 0x1, unprogrammed default
  9467   300008                     	org	3145736
  9468   300008  03                 	db	3
  9469                           
  9470                           ;Config register CONFIG5H @ 0x300009
  9471                           ;	unspecified, using default values
  9472                           ;	Boot Block Code Protection bitProtect Boot
  9473                           ;	CPB = 0x1, unprogrammed default
  9474                           ;	Data EEPROM Code Protection bit
  9475                           ;	CPD = 0x1, unprogrammed default
  9476   300009                     	org	3145737
  9477   300009  C0                 	db	192
  9478                           
  9479                           ;Config register CONFIG6L @ 0x30000A
  9480                           ;	unspecified, using default values
  9481                           ;	Write Protection bit
  9482                           ;	WRT0 = 0x1, unprogrammed default
  9483                           ;	Write Protection bit
  9484                           ;	WRT1 = 0x1, unprogrammed default
  9485   30000A                     	org	3145738
  9486   30000A  03                 	db	3
  9487                           
  9488                           ;Config register CONFIG6H @ 0x30000B
  9489                           ;	unspecified, using default values
  9490                           ;	Configuration Register Write Protection bit
  9491                           ;	WRTC = 0x1, unprogrammed default
  9492                           ;	Boot Block Write Protection bit
  9493                           ;	WRTB = 0x1, unprogrammed default
  9494                           ;	Data EEPROM Write Protection bit
  9495                           ;	WRTD = 0x1, unprogrammed default
  9496   30000B                     	org	3145739
  9497   30000B  E0                 	db	224
  9498                           
  9499                           ;Config register CONFIG7L @ 0x30000C
  9500                           ;	unspecified, using default values
  9501                           ;	Table Read Protection bit
  9502                           ;	EBTR0 = 0x1, unprogrammed default
  9503                           ;	Table Read Protection bit
  9504                           ;	EBTR1 = 0x1, unprogrammed default
  9505   30000C                     	org	3145740
  9506   30000C  03                 	db	3
  9507                           
  9508                           ;Config register CONFIG7H @ 0x30000D
  9509                           ;	unspecified, using default values
  9510                           ;	Boot Block Table Read Protection bit
  9511                           ;	EBTRB = 0x1, unprogrammed default
  9512   30000D                     	org	3145741
  9513   30000D  40                 	db	64
  9514                           tosu	equ	0xFFF
  9515                           tosh	equ	0xFFE
  9516                           tosl	equ	0xFFD
  9517                           stkptr	equ	0xFFC
  9518                           pclatu	equ	0xFFB
  9519                           pclath	equ	0xFFA
  9520                           pcl	equ	0xFF9
  9521                           tblptru	equ	0xFF8
  9522                           tblptrh	equ	0xFF7
  9523                           tblptrl	equ	0xFF6
  9524                           tablat	equ	0xFF5
  9525                           prodh	equ	0xFF4
  9526                           prodl	equ	0xFF3
  9527                           indf0	equ	0xFEF
  9528                           postinc0	equ	0xFEE
  9529                           postdec0	equ	0xFED
  9530                           preinc0	equ	0xFEC
  9531                           plusw0	equ	0xFEB
  9532                           fsr0h	equ	0xFEA
  9533                           fsr0l	equ	0xFE9
  9534                           wreg	equ	0xFE8
  9535                           indf1	equ	0xFE7
  9536                           postinc1	equ	0xFE6
  9537                           postdec1	equ	0xFE5
  9538                           preinc1	equ	0xFE4
  9539                           plusw1	equ	0xFE3
  9540                           fsr1h	equ	0xFE2
  9541                           fsr1l	equ	0xFE1
  9542                           bsr	equ	0xFE0
  9543                           indf2	equ	0xFDF
  9544                           postinc2	equ	0xFDE
  9545                           postdec2	equ	0xFDD
  9546                           preinc2	equ	0xFDC
  9547                           plusw2	equ	0xFDB
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    204
    Data        120
    BSS         175
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     34     124
    BANK0           128      0     110
    BANK1           256      0      95

Pointer List with Targets:

    displayMenu@string	PTR unsigned char  size(1) Largest target is 138
		 -> MAINMENU(CODE[138]), 

    lcdAddString@string	PTR unsigned char  size(2) Largest target is 20
		 -> ERRORMESSAGES(BANK1[20]), ENDCOMMUNICATION(BANK0[11]), PLAYRECORDINGS(BANK0[12]), STARTRECORDING(BANK0[14]), 
		 -> CURRENTTIME(BANK0[14]), MODIFYTIME(BANK0[13]), PORTNAMEMENU(BANK0[12]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(2) Largest target is 511
		 -> NULL(NULL[0]), SMSTimer(COMRAM[1]), debouncerTimer(COMRAM[1]), sysTmr(COMRAM[1]), 
		 -> songTime(COMRAM[1]), pTime(COMRAM[1]), songTimer(COMRAM[1]), timer(COMRAM[1]), 
		 -> RAM(DATA[511]), 


Critical Paths under _main in COMRAM

    _main->_menuLoop
    _sysTimerLoop->_LcPutChar
    _smsLoop->_TI_GetTics
    _menuLoop->_displayMenu
    _refreshDisplay->_resetDisplay
    _LcClear->_Espera
    _lcdAddString->_LcPutChar
    _getCharacter->_getDigitValue
    _getDigitValue->_getColumn
    _displayMenu->_LcPutChar
    _moveOneRow->_LcGotoXY
    _memoryLoop->_LcPutChar
    _updateSysTimestamp->_TI_ResetTics
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcCursorOn->_WaitForBusy
    _LcCursorOff->_WaitForBusy
    _keypadLoop->_TI_GetTics
    _playMusic->_TI_ResetTics
    _initSysTimer->_TI_NewTimer
    _initMenu->_TI_NewTimer
    _initKeypad->_TI_NewTimer
    _initAudio->_TI_NewTimer
    _audioLoop->_TI_GetTics
    _LcInit->_Espera
    _WaitForBusy->_TI_GetTics
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _RSI_High in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   27221
                             _LcInit
                            _TI_Init
                          _audioLoop
                          _initAudio
                       _initJoystick
                         _initKeypad
                           _initMenu
                            _initSIO
                       _initSysTimer
                       _joystickLoop
                         _keypadLoop
                         _memoryLoop
                           _menuLoop
                            _smsLoop
                       _sysTimerLoop
 ---------------------------------------------------------------------------------
 (1) _sysTimerLoop                                         2     2      0    2572
                                             23 COMRAM     2     2      0
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
                            ___lbdiv
                            ___lbmod
              _incrementSysTimestamp
 ---------------------------------------------------------------------------------
 (2) _incrementSysTimestamp                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _smsLoop                                              2     2      0      67
                                             13 COMRAM     2     2      0
                         _TI_GetTics
                       _TI_ResetTics
                      _getDigitValue
 ---------------------------------------------------------------------------------
 (1) _menuLoop                                             8     8      0   13584
                                             26 COMRAM     8     8      0
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
                            ___awmod
                       _chargeMemory
                            _checkRX
                            _checkTX
                        _displayMenu
                  _displayRecordings
                   _displayTimestamp
                       _getCharacter
                       _getColumnAct
                      _getDigitValue
                    _getJoystickDown
                      _getJoystickUp
                   _getNumRecordings
                              _getRX
                      _goToWaitState
                             _isIdle
                          _isNextKey
                          _isPressed
                      _joystickAlive
                       _joystickIdle
                       _lcdAddString
                          _playMusic
                     _refreshDisplay
                       _resetDisplay
                          _saveIndex
                          _sendIndex
                      _sendTimestamp
                              _setTX
                          _stopMusic
                 _updateSysTimestamp
 ---------------------------------------------------------------------------------
 (2) _sendTimestamp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendIndex                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _saveIndex                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _refreshDisplay                                       0     0      0    1551
                       _resetDisplay
 ---------------------------------------------------------------------------------
 (2) _resetDisplay                                         1     1      0    1551
                                             21 COMRAM     1     1      0
                            _LcClear
                      _goToWaitState
 ---------------------------------------------------------------------------------
 (3) _goToWaitState                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LcClear                                              0     0      0    1507
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _lcdAddString                                         2     0      2    3208
                                             23 COMRAM     2     0      2
                          _LcPutChar
                         _moveOneRow
 ---------------------------------------------------------------------------------
 (2) _joystickIdle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _joystickAlive                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _isPressed                                            1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isNextKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _isIdle                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getNumRecordings                                     2     2      0      24
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getJoystickUp                                        1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getJoystickDown                                      1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getColumnAct                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCharacter                                         3     3      0     155
                                              3 COMRAM     3     3      0
                      _getDigitValue
 ---------------------------------------------------------------------------------
 (2) _getDigitValue                                        1     1      0       0
                                              2 COMRAM     1     1      0
                          _getColumn
 ---------------------------------------------------------------------------------
 (3) _getColumn                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _displayRecordings                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayMenu                                          3     2      1    2636
                                             23 COMRAM     3     2      1
                          _LcPutChar
                         _moveOneRow
 ---------------------------------------------------------------------------------
 (3) _moveOneRow                                           0     0      0    1092
                           _LcGotoXY
 ---------------------------------------------------------------------------------
 (2) _chargeMemory                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _memoryLoop                                           8     8      0    5400
                                             23 COMRAM     8     8      0
                        _LcCursorOff
                         _LcCursorOn
                           _LcGotoXY
                          _LcPutChar
                            ___lbdiv
                            ___lbmod
                            _checkRX
                            _checkTX
                   _displayTimestamp
                    _finishedDisplay
                              _getRX
                    _getSysTimestamp
                           _readData
                           _saveData
                              _setTX
                 _updateSysTimestamp
 ---------------------------------------------------------------------------------
 (2) _updateSysTimestamp                                   3     0      3     545
                                              1 COMRAM     3     0      3
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _setTX                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _saveData                                             2     1      1     500
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _readData                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getSysTimestamp                                      2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRX                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _finishedDisplay                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _displayTimestamp                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _checkTX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checkRX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     463
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     618
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1424
                                             22 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1    1092
                                             14 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     220
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _keypadLoop                                           2     2      0     111
                                             13 COMRAM     2     2      0
                         _TI_GetTics
                       _TI_ResetTics
                           _getDigit
                          _playMusic
                          _stopMusic
 ---------------------------------------------------------------------------------
 (2) _stopMusic                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _playMusic                                            1     1      0      44
                                              1 COMRAM     1     1      0
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _getDigit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _joystickLoop                                         3     3      0      24
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initSysTimer                                         0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initJoystick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initAudio                                            0     0      0     719
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _audioLoop                                            4     4      0      67
                                             13 COMRAM     4     4      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    2452
                                             21 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0      90
                                             13 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          4     2      2     719
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4    1197
                                             13 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      45
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     220
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _RSI_High                                             0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (8) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _TI_GetTics
       _TI_ResetTics
   _TI_Init
   _audioLoop
     _TI_GetTics
     _TI_ResetTics
   _initAudio
     _TI_NewTimer
   _initJoystick
   _initKeypad
     _TI_NewTimer
   _initMenu
     _TI_NewTimer
   _initSIO
   _initSysTimer
     _TI_NewTimer
   _joystickLoop
   _keypadLoop
     _TI_GetTics
     _TI_ResetTics
     _getDigit
     _playMusic
       _TI_ResetTics
     _stopMusic
   _memoryLoop
     _LcCursorOff
       _CantaIR
       _WaitForBusy
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _LcGotoXY
       _CantaIR
       _WaitForBusy
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
       _WaitForBusy
     ___lbdiv
     ___lbmod
     _checkRX
     _checkTX
     _displayTimestamp
     _finishedDisplay
     _getRX
     _getSysTimestamp
     _readData
     _saveData
     _setTX
     _updateSysTimestamp
       _TI_ResetTics
   _menuLoop
     _LcCursorOff
     _LcCursorOn
     _LcGotoXY
     _LcPutChar
     _TI_GetTics
     _TI_ResetTics
     ___awmod
     _chargeMemory
     _checkRX
     _checkTX
     _displayMenu
       _LcPutChar
       _moveOneRow
         _LcGotoXY
     _displayRecordings
     _displayTimestamp
     _getCharacter
       _getDigitValue
         _getColumn
     _getColumnAct
     _getDigitValue
     _getJoystickDown
     _getJoystickUp
     _getNumRecordings
     _getRX
     _goToWaitState
     _isIdle
     _isNextKey
     _isPressed
     _joystickAlive
     _joystickIdle
     _lcdAddString
       _LcPutChar
       _moveOneRow
     _playMusic
     _refreshDisplay
       _resetDisplay
         _LcClear
           _CantaIR
           _Espera
           _WaitForBusy
         _goToWaitState
     _resetDisplay
     _saveIndex
     _sendIndex
     _sendTimestamp
     _setTX
     _stopMusic
     _updateSysTimestamp
   _smsLoop
     _TI_GetTics
     _TI_ResetTics
     _getDigitValue
   _sysTimerLoop
     _LcPutChar
     _TI_GetTics
     _TI_ResetTics
     ___lbdiv
     ___lbmod
     _incrementSysTimestamp

 _RSI_High (ROOT)
   _RSI_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      5F       7       37.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      6E       5       85.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     22      7C       1       98.4%
BITBIGSFRhhhhl      19      0       0       9        0.0%
BITBIGSFRhhhl       10      0       0      10        0.0%
BITBIGSFRhhhhh       D      0       0       8        0.0%
BITBIGSFRhlhlll      8      0       0      16        0.0%
BITBIGSFRhlhllh      7      0       0      15        0.0%
BITBIGSFRhlhhh       7      0       0      12        0.0%
BITBIGSFRhlhhl       7      0       0      13        0.0%
BITBIGSFRllh         6      0       0      18        0.0%
BITBIGSFRlh          5      0       0      17        0.0%
BITBIGSFRhlhllh      1      0       0      14        0.0%
BITBIGSFRlllh        1      0       0      19        0.0%
BITBIGSFRhhl         1      0       0      11        0.0%
BITBIGSFRllll        1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     149      21        0.0%
DATA                 0      0     149       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun May 21 00:49:15 2023

                             _x 0048                               _y 0047                      _RSI_Timer0 1ED6  
                  ?_displayMenu 006A                              l76 13E0                              l79 13F4  
                            l97 1EBA                      _TI_GetTics 1A0A                             l102 1EA2  
                           l216 14FE                             l209 14BE                             l722 0FE6  
                           l725 1006                             l718 0FC0                             l902 0C64  
                           l736 108A                             l728 1026                             l920 0D3C  
                           l760 1E8A                             l488 06B4                             l922 0D5C  
                           l914 0D14                             l747 16C2                             l924 0D7C  
                           l764 1D0E                             l598 1542                             l769 1D7A  
                           l929 0DB2                             l894 0C12                             l886 0B80  
                           l896 0C3A                             l978 1E3E                             u400 17A0  
                           u420 17BC                             u440 17D6                             u418 17A2  
                           u460 17EE                             u438 17BE                             u458 17D8  
                           u478 17F0                             _row 0021                ??_CantaPartBaixa 0053  
                  ___awmod@sign 0058                             prod 0FF3                             wreg 0FE8  
          __end_of_chargeMemory 1FF6                   _ERRORMESSAGES 014B                            l2094 1D86  
                          l4030 1046                            l4102 16C8                            l4034 1052  
                          l4202 0C4C                            l4106 16D0                            l4114 16E2  
                          l4130 113A                            l4122 1110                            l4044 1078  
                          l4220 0CAE                            l4212 0C7E                            l4204 0C54  
                          l4140 1184                            l4132 1140                            l3318 1B6C  
                          l3342 1AFA                            l4310 0E9E                            l4302 0E7A  
                          l5014 1C56                            l4048 1084                            l4312 0EA6  
                          l4232 0D02                            l4216 0C8C                            l5104 03E8  
                          l5032 02F4                            l4144 1190                            l4136 1162  
                          l4128 1134                            l4058 10A2                            l4330 0EF4  
                          l4322 0EDA                            l4226 0CD6                            l4162 0B40  
                          l5202 054A                            l5130 0434                            l5122 0418  
                          l5114 0400                            l5050 032E                            l5018 02D0  
                          l4154 11D4                            l3532 1A60                            l4076 10CC  
                          l4244 0D2E                            l4180 0BCA                            l3444 1D1C  
                          l3604 1396                            l3612 13DA                            l5300 06CC  
                          l5212 056E                            l5204 0552                            l5140 0460  
                          l5036 0302                            l4084 167A                            l4148 11B2  
                          l3390 14DE                            l3374 149A                            l4326 0EE4  
                          l4318 0EC6                            l4262 0D9E                            l4174 0BA6  
                          l3622 1848                            l5310 0732                            l5222 058A  
                          l5134 0442                            l5126 0426                            l5118 040C  
                          l5062 035E                            l5046 0322                            l5038 0306  
                          l3536 1A6A                            l3464 1732                            l4272 0DC0  
                          l4184 0BE8                            l4336 0EFE                            l3624 1860  
                          l3608 13BC                            l5400 0888                            l5320 075E  
                          l5208 0560                            l5072 0384                            l3386 14CE  
                          l3378 14A8                            l3466 173E                            l4290 0E56  
                          l4282 0E0C                            l4266 0DAC                            l4186 0BEE  
                          l5410 08B6                            l5330 0788                            l5250 0600  
                          l5234 05CA                            l5154 049A                            l5146 0476  
                          l5090 03BC                     _TI_NewTimer 1A5A                            l3396 1506  
                          l3484 1778                            l3476 175C                            l3804 1B5A  
                          l4276 0DE8                            l3628 1868                            l5324 076E  
                          l5308 071C                            l5260 063A                            l5244 05EC  
                          l5228 05B4                            l5076 0390                            l3708 1F00  
                          l3398 152A                            l3478 1768                            l3822 1CAA  
                          l3814 1C92                            l4294 0E62                            l4286 0E2E  
                          l4278 0DEE                            l3590 1380                            l5350 07C8  
                          l5326 077C                            l5318 0754                            l5270 065A  
                          l5254 0620                            l5174 04E2                            l5166 04CA  
                          l5158 04A8                            l5086 03B4                            l3808 1B62  
                          l3656 1CE8                            l5408 08AE                            l5344 07B2  
                          l5176 04E8                            l3834 1C02                            l3922 1584  
                          l3914 1546                            l4298 0E6E                            l3762 188E  
                          l3658 1CEE                            l5426 08FE                            l5418 08EA  
                          l5362 07F8                            l5338 079C                            l5266 0650  
                          l5194 0526                            l3932 15C2                            l5452 0982  
                          l5444 0968                            l5372 0822                            l5276 066E  
                          l5508 1ACA                            l3782 18D4                            l3774 18BC  
                          l3766 189C                            l3758 1882                            l3598 138A  
                          l5438 094E                            l5382 0852                            l5358 07E8  
                          l5286 068A                            l5198 0538                            l3792 1B3E  
                          l3768 18A4                            l3688 1E36                            l5480 09F4  
                          l5472 09D6                            l5464 09AA                            l5456 098C  
                          l5448 0972                            l5392 0868                            l3866 1242  
                          l3778 18C6                            l3972 144E                            l3956 1422  
                          l3948 1406                            l3796 1B44                            l5468 09BC  
                          l3974 1458                            l3982 1466                            l5486 0A18  
                          l3978 1460                            l3998 0FE0                            u3010 1B48  
                          u2330 1952                            u2410 18EA                            u3050 1316  
                          u2350 196E                            u2430 1906                            u3310 1068  
                          u2408 19A2                            u3160 143A                            u2370 1988  
                          u2450 1920                            u2348 1954                            u2428 18EC  
                          u3340 1072                            u5020 069E                            u2390 19A0  
                          u2470 1938                            u2368 1970                            u2448 1908  
                          u3450 16B4                            u2388 198A                            u2468 1922  
                          u3380 10B8                            u5300 091C                            u2830 180E  
                          u2750 1336                            u5070 074A                            u3470 1128  
                          u2488 193A                            u2920 1F88                            u2840 182A  
                          u2760 134E                            u2850 1FC4        __end_of_displayTimestamp 1FBC  
                          u3730 0EBA                            u2770 1362                            u5330 09D4  
                          u5170 083A                            u2860 1FD0                            u3580 0CA8  
                          u5350 0A0C                            u2880 1F7A                            u3690 0DE2  
                          u2970 18A8                            u4650 0378                            u4580 0328  
                          u4780 04A2                            u4970 0618                            _TMR0 0FD6  
                          _Tics 001D                            _Rows 0046                            _data 002B  
                          _main 1AA2                            fsr2h 0FDA                            indf2 0FDF  
                          fsr1l 0FE1                            fsr2l 0FD9                      _LcCursorOn 1FD4  
                          btemp 007D                 __end_of_TI_Init 1C2E                            prodl 0FF3  
               __end_of_LcClear 1DB0                            start 0012                 __end_of_CantaIR 1BFE  
                 LcInit@columns 0068                 saveData@address 0054                    ___param_bank 0000  
         _incrementSysTimestamp 1EEE            __end_of_lcdAddString 1C5C                __end_of_MAINMENU 0297  
       __end_of_finishedDisplay 1F8C                     Espera@Timer 0060                           ?_main 0053  
               __end_of___lbdiv 1B66                           _EEADR 0FA9                 __end_of___awmod 18DE  
               __end_of___lbmod 1CB2                           _T0CON 0FD5                           _RCREG 0FAE  
                         _SPBRG 0FAF                 __end_of_checkRX 1FD4                 __end_of_checkTX 1FC8  
                         _TXREG 0FAD            __end_of_getCharacter 13DE                           _Timer 0029  
                         _getRX 0040                 __end_of_initSIO 1E28                           _pTime 0050  
                         _index 003F                    _TI_ResetTics 1CB2                           _setTX 001E  
                         _timer 0052                     _LcCursorOff 1FE0                           _state 004B  
              __end_of_RSI_High 0012                           tablat 0FF5           __end_of_sendTimestamp 002C  
               __end_of_smsLoop 1706                           ttemp5 007E                           ttemp6 0081  
                         ttemp7 0085                           status 0FD8                           wtemp8 007E  
               ___lbdiv@divisor 0053                __end_of_LcGotoXY 1540            __end_of_getColumnAct 0040  
               ___lbdiv@counter 0055         EscriuPrimeraOrdre@ordre 0054                 __initialization 15E6  
                _refreshDisplay 1CDA                    __end_of_main 1AE8                     ?_RSI_Timer0 0053  
                TI_Init@counter 0053                  _isPressed$1194 0053                     ?_TI_GetTics 0053  
            _updateSysTimestamp 1C5C                    _sysTimerLoop 110E                          ??_main 0075  
                 __activetblptr 0002                   ?_initJoystick 0053             ?_updateSysTimestamp 0054  
                        ?_getRX 0053                          _ADCON0 0FC2                          _ADCON1 0FC1  
                        _ADCON2 0FC0                          _ADRESH 0FC4                          _EEDATA 0FA8  
                        ?_setTX 0053                          _EECON2 0FA7                   ?_initSysTimer 0053  
                     ??_TI_Init 0053                       ??_LcClear 0068                       ??_CantaIR 0055  
                LcGotoXY@Fisics 0066                  LcGotoXY@Column 0068                   ??_WaitForBusy 0060  
                        _TMR0IF 7F92                          _SPBRGH 0FB0                     ?_LcCursorOn 0053  
                _debouncerTimer 004D                          _LcInit 1216                __end_of_getDigit 1D90  
          ??_updateSysTimestamp 0057                          _Espera 1B66          __end_of_refreshDisplay 1D00  
                  _LcGotoXY$556 0064          ?_incrementSysTimestamp 0053                          _RowAct 0044  
                        _Timers 0100                       ??___lbdiv 0054                       ??___awmod 0057  
                     ??___lbmod 0054                          _isIdle 1F70               __end_of_SMSVALUES 02CD  
              __end_of_readData 1F70                __end_of_initMenu 1F1A           __end_of_getDigitValue 1E0C  
              ?_finishedDisplay 0053                       ??_checkRX 0053                       ??_checkTX 0053  
              __end_of_menuLoop 0B3E                          clear_0 164C                          clear_1 1658  
                        clear_2 1664                          _period 0038                 ___awmod@divisor 0055  
                        _scroll 0025                          isa$std 0001                 ___awmod@counter 0057  
              __end_of_saveData 1D6E                  ??_initJoystick 0053                          _sysTmr 004E  
                     ??_initSIO 0053                    __pdataCOMRAM 0075                    __mediumconst 0000  
                        tblptrh 0FF7                          tblptrl 0FF6                          tblptru 0FF8  
                     ??_smsLoop 0060                  ??_initSysTimer 0057               __end_of_CantaData 1BCC  
              goToWaitState@stg 0053                ___lbdiv@dividend 0054                 _getJoystickDown 1EA6  
               ___lbmod@divisor 0053                      __accesstop 0080         __end_of__initialization 166A  
               ___lbmod@counter 0055               __end_of_LcPutChar 1784                   ___rparam_used 0001  
               ?_refreshDisplay 0053                  __pcstackCOMRAM 0053             __end_of_WaitForBusy 1B2C  
                  _chargeMemory 1FEC           __end_of_joystickAlive 1FB0                    __pidataBANK0 19AE  
                  __pidataBANK1 1F1A                   __end_of_getRX 0044                   __end_of_setTX 0026  
             ??_getSysTimestamp 0055                ___lbdiv@quotient 0056                       ?_RSI_High 0053  
         __end_of_goToWaitState 1F50       TI_GetTics@CopyCurrentTics 005B                       ?_LcGotoXY 0061  
                       ??_getRX 0053                    _lcdAddString 1C2E                         ??_setTX 0053  
                   setTX@letter 0053                    ?_TI_NewTimer 0053                      __pbssBANK0 00DC  
                    __pbssBANK1 0100               ?_displayTimestamp 0053              _state@EEPROM$F1543 002E  
            ??_displayTimestamp 0053                         ?_LcInit 0068                   _CantaPartAlta 1946  
        TI_NewTimer@TimerHandle 0053                         ?_Espera 0060                    _getCharacter 1318  
         __end_of_getJoystickUp 1EA6         TI_ResetTics@TimerHandle 0053                         ?_isIdle 0053  
                    ??_RSI_High 0053                    _getColumnAct 003C                         LcInit@i 006A  
       __end_of_getJoystickDown 1EBE                      ??_LcGotoXY 0062                   ?_resetDisplay 0053  
                     ?_getDigit 0053                      _displayPos 0040                    ?_LcCursorOff 0053  
                       _TI_Init 1BFE                         _LcClear 1D90                         _CantaIR 1BCC  
                     ?_readData 0053                       ?_initMenu 0053                       ?_menuLoop 0053  
                   _WaitForBusy 1AE8                  ?_CantaPartAlta 0053                         _Columns 0045  
             __end_of_getColumn 1D26            __end_of_initJoystick 1DD0                       ?_saveData 0053  
                       __Hparam 0000               __end_of_audioLoop 15E6                      _keyPressed 0030  
                       __Lparam 0000                   ?_joystickIdle 0053               displayMenu@string 006A  
                    _initKeypad 1D26                   ?_joystickLoop 0053          _index@SystemTimer$F936 0036  
                  ??_RSI_Timer0 0053                         ___lbdiv 1B2C               __end_of_isNextKey 003C  
                       ___awmod 186E                         ___lbmod 1C88            __end_of_initSysTimer 1E76  
                  __psmallconst 0200                    ??_TI_GetTics 0057                      _currentKey 0032  
             __end_of_isPressed 1E8E                         _checkRX 1FC8                         _checkTX 1FBC  
                       __pcinit 15E6                         __ramtop 0200                      _keypadLoop 0FBE  
                       __ptext0 1AA2                         __ptext1 110E                         __ptext2 1EEE  
                       __ptext3 1678                         __ptext4 02CE                         __ptext5 0026  
                       __ptext6 1F8C                         __ptext7 002C                         __ptext8 1CDA  
                       __ptext9 1DD0  displayRecordings@indexPosition 0053               __end_of_initAudio 1ED6  
                    _memoryLoop 0B3E                       CantaIR@IR 0055                         _initSIO 1E0C  
              _getNumRecordings 1E28                ___awmod@dividend 0053                  ??_resetDisplay 0068  
                       _nextKey 0035                 resetDisplay@stg 0068                      ??_getDigit 0053  
                       _smsLoop 1678                 WaitForBusy@Busy 0060               __end_of_sendIndex 1F98  
                    _recordings 0001               __end_of_saveIndex 0032            end_of_initialization 166A  
             __end_of_playMusic 1F40              __end_of_RSI_Timer0 1EEE                      ??_readData 0053  
                    ??_initMenu 0057                   __Lmediumconst 0000                      ??_menuLoop 006D  
       ??_incrementSysTimestamp 0053                    ??_LcCursorOn 0061                      _moveOneRow 1E42  
            __end_of_TI_GetTics 1A5A                      ??_saveData 0054                  ??_joystickIdle 0053  
                    _numPressed 002F                  ??_joystickLoop 0053                       _RCSTAbits 0FAB  
                       postdec1 0FE5                         postdec2 0FDD                _ENDCOMMUNICATION 00D1  
                       postinc0 0FEE                         postinc2 0FDE               getCharacter@digit 0058  
             __end_of_stopMusic 0038                       _PORTBbits 0F81                       _PORTDbits 0F83  
                     _SMSVALUES 0297             __end_of_DIGITVALUES 020D              __end_of_LcCursorOn 1FE0  
              ?_getJoystickDown 0053           TI_GetTics@TimerHandle 005F                ___lbmod@dividend 0054  
                     _TRISAbits 0F92                       _TRISBbits 0F93                       _TRISCbits 0F94  
                     _TRISDbits 0F95                 _memoryLoop$1563 006C                 _memoryLoop$1564 006E  
               _memoryLoop$1566 0070                 ??_CantaPartAlta 0053                ??_refreshDisplay 0069  
                   ___lbmod@rem 0056                       _CantaData 1B9A                       _TXSTAbits 0FAC  
               _getSysTimestamp 1FF6                  __end_of_LcInit 1318                       _LcPutChar 1706  
                __end_of_Espera 1B9A                     ?_initKeypad 0053                   ??_displayMenu 006B  
    __end_of_EscriuPrimeraOrdre 17FE                     _BAUDCONbits 0FB8                   __pidataCOMRAM 0016  
                __end_of_isIdle 1F7E                     ?_keypadLoop 0053                       _ColumnAct 0043  
                   ?_memoryLoop 0053             start_initialization 15E6               displayTimestamp@i 0053  
            TI_NewTimer@Counter 0056               _displayRecordings 1F50                _state@Audio$F899 0039  
            ?_displayRecordings 0053                   _sendTimestamp 0026                      ?_CantaData 0053  
                   ?_moveOneRow 0053                        ??_LcInit 0069                        ??_Espera 0064  
           ??_displayRecordings 0053            __end_of_resetDisplay 1DEE                      ?_LcPutChar 0053  
                _STARTRECORDING 009E              _state@Keypad$F1158 0034          sendIndex@indexPosition 0053  
                      ??_isIdle 0053                     __pdataBANK0 0080                     __pdataBANK1 014B  
                   _DIGITVALUES 0201             __end_of_displayMenu 186E                    _initJoystick 1DB0  
                   __pbssCOMRAM 0001       __end_of_displayRecordings 1F60                    saveData@data 0053  
          __end_of_joystickIdle 1FA4            __end_of_joystickLoop 1496                    _menuLoop$799 0073  
                 ?_TI_ResetTics 0053         __end_of_getSysTimestamp 2000                    _initSysTimer 1E5C  
                      ?_TI_Init 0053                        ?_LcClear 0053                        ?_CantaIR 0053  
                ?_sendTimestamp 0053                  _CantaPartBaixa 18DE           _getNumRecordings$1580 0053  
                  ?_WaitForBusy 0053        __end_of_getNumRecordings 1E42                       __pintcode 0008  
                     _getColumn 1D00                        ?___lbdiv 0053                        ?___awmod 0053  
                      ?___lbmod 0053                       _audioLoop 1540                 CantaPartBaixa@c 0054  
                     _direction 004A                   ?_sysTimerLoop 0053                        ?_checkRX 0053  
                      ?_checkTX 0053                   _getDigitValue 1DEE                       _isNextKey 0038  
                      ?_initSIO 0053                     __smallconst 0200                       _isPressed 1E76  
               readData@address 0053                       _indexTemp 002D                       _initAudio 1EBE  
                      ?_smsLoop 0053                  ??_TI_ResetTics 0053                    playMusic@aux 0054  
        __end_of_CantaPartBaixa 1946                  _PLAYRECORDINGS 00B9                        _MAINMENU 020D  
             ??_finishedDisplay 0053                     ??_CantaData 0055                        _LATBbits 0F8A  
                      _LATCbits 0F8B                       _sendIndex 1F8C                        _LATDbits 0F8C  
                     _saveIndex 002C                       _playMusic 1F2E   __end_of_incrementSysTimestamp 1F04  
                      _PIR1bits 0F9E                     ??_LcPutChar 0069                       _timeValue 0027  
                     _waitState 003B                      ?_getColumn 0053                       _skipState 003E  
                 _joystickAlive 1FA4                  ??_sysTimerLoop 006A                     _displayMenu 17FE  
                    ?_audioLoop 0053                       _timestamp 00DC                  ?_getDigitValue 0053  
                     _songTimer 0051                     _CURRENTTIME 0090                        _RSI_High 0008  
                     _stateToGo 003A                      _ADCON0bits 0FC2                      ?_isNextKey 0053  
                      _SMSTimer 004C                   _goToWaitState 1F40                      ?_isPressed 0053  
                      Espera@ms 0062                       _stopMusic 0032                        _LcGotoXY 1496  
                   _indexEEPROM 002C                      ?_initAudio 0053                     LcGotoXY@Row 0061  
               ??_sendTimestamp 0053                     _INTCON2bits 0FF1                       copy_data0 15FA  
                     copy_data1 161A                       copy_data2 163A                 ?_CantaPartBaixa 0053  
              ?_getSysTimestamp 0053                      ?_sendIndex 0053                      ?_saveIndex 0053  
                    ?_playMusic 0053                      _EECON1bits 0FA6                    _MUSICPERIODS 0075  
                      __Hrparam 0000                        __Lrparam 0000                   ?_chargeMemory 0053  
                  ??_initKeypad 0057                  ?_joystickAlive 0053                 _state@Menu$F788 003D  
              _displayTimestamp 1FB0                   _getJoystickUp 1E8E                    ??_keypadLoop 0060  
                ?_goToWaitState 0053                    ??_memoryLoop 006A                      ?_stopMusic 0053  
                      _colIndex 0041                        _getDigit 1D6E                    _resetDisplay 1DD0  
                      _hasMoved 0049                        __ptext10 1F40                        __ptext11 1D90  
            _EscriuPrimeraOrdre 1784                        __ptext20 1EA6                        __ptext12 1C2E  
                      __ptext21 003C                        __ptext13 1F98                        __ptext30 0B3E  
                      __ptext22 1318                        __ptext14 1FA4                        __ptext31 1C5C  
                      __ptext23 1DEE                        __ptext15 1E76                        __ptext40 1FC8  
                      __ptext32 001E                        __ptext24 1D00                        __ptext16 0038  
                      __ptext41 1C88                        __ptext33 1D4C                        __ptext25 1F50  
                      __ptext17 1F70                        __ptext50 1F2E                        __ptext42 1B2C  
                      __ptext34 1F60                        __ptext26 17FE                        __ptext18 1E28  
                      __ptext51 1D6E                        __ptext43 1706                        __ptext35 1FF6  
                      __ptext27 1E42                        __ptext19 1E8E                        __ptext60 1BFE  
                      __ptext52 13DE                        __ptext44 1496                        __ptext36 0040  
                      __ptext28 1FEC                        __ptext61 1216                        __ptext53 1E5C  
                      __ptext45 1B9A                        __ptext37 1F7E                        __ptext29 186E  
                      __ptext70 1946                        __ptext62 1AE8                        __ptext54 1E0C  
                      __ptext46 1FD4                        __ptext38 1FB0                        __ptext63 1A5A  
                      __ptext55 1F04                        __ptext47 1FE0                        __ptext39 1FBC  
                      __ptext72 1ED6                        __ptext64 1B66                        __ptext56 1D26  
                      __ptext48 0FBE                        __ptext65 1CB2                        __ptext57 1DB0  
                      __ptext49 0032                        __ptext66 1A0A                        __ptext58 1EBE  
                      __ptext67 1784                        __ptext59 1540                        __ptext68 1BCC  
                      __ptext69 18DE                   ?_lcdAddString 006A                   ??_TI_NewTimer 0055  
                  _PORTNAMEMENU 00C5                  CantaPartAlta@c 0054              __end_of_initKeypad 1D4C  
                      _readData 1F60                        _initMenu 1F04                    ??_moveOneRow 0069  
           ?_EscriuPrimeraOrdre 0053                        _menuLoop 02CE           __end_of_CantaPartAlta 19AE  
    __end_of_updateSysTimestamp 1C88                   CantaData@Data 0055              __end_of_keypadLoop 110E  
                      _saveData 1D4C                   ?_getCharacter 0053                  ??_chargeMemory 0053  
            __end_of_memoryLoop 0FBE                     ??_getColumn 0055                        isa$xinst 0000  
                      _rowIndex 0042                        _portName 0019                    _joystickIdle 1F98  
               ??_getDigitValue 0055            __end_of_TI_ResetTics 1CDA                    _joystickLoop 13DE  
                      _songTime 004F                        int$flags 007D                  ?_getJoystickUp 0053  
                      _stateSMS 0033             updateSysTimestamp@i 0056                     ??_audioLoop 0060  
          ??_EscriuPrimeraOrdre 0053                      LcInit@rows 0069                     ??_isNextKey 0053  
                 ?_getColumnAct 0053                     ??_isPressed 0053                      _INTCONbits 0FF2  
            __end_of_moveOneRow 1E5C             _getJoystickDown$267 0053                      _MODIFYTIME 00AC  
                   ??_initAudio 0057                  ??_lcdAddString 006C                   ??_LcCursorOff 0061  
                      intlevel2 0000            __end_of_sysTimerLoop 1216          _state@SystemTimer$F935 0037  
                   ??_sendIndex 0053                     ??_saveIndex 0053                      LcPutChar@c 0069  
                   ??_playMusic 0054                  ??_getCharacter 0056             __end_of_TI_NewTimer 1AA2  
            lcdAddString@string 006A                 ??_joystickAlive 0053               ?_getNumRecordings 0053  
                   _scrollIndex 0023              ??_getNumRecordings 0053                 ??_goToWaitState 0053  
                    _MUSICDELAY 0080                _joystickLoop$265 0055                  ??_getColumnAct 0053  
               _finishedDisplay 1F7E                     ??_stopMusic 0053               _getJoystickUp$269 0053  
                   _tmpPortChar 003C                     _previousKey 0031             __end_of_LcCursorOff 1FEC  
        updateSysTimestamp@time 0054               ??_getJoystickDown 0053                 ??_getJoystickUp 0053  
